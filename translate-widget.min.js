class TranslationCache {
  constructor() {
    (this.cache = new Map()), (this.maxSize = 1e3);
  }
  getKey(e, n) {
    return `${n}:${e}`;
  }
  get(e, n) {
    return this.cache.get(this.getKey(e, n));
  }
  set(e, n, a) {
    if (this.cache.size >= this.maxSize) {
      const e = this.cache.keys().next().value;
      this.cache.delete(e);
    }
    this.cache.set(this.getKey(e, n), a);
  }
}
const initializeTranslationWidget = (e, n) => {
    if (!e)
      return void console.error(
        "Public key is required to initialize the translation widget"
      );
    const a = n?.primaryColor || "#2563eb",
      o = document.createElement("style");
    (o.textContent = `\n        .translate-widget {\n          position: fixed;\n          bottom: 20px;\n          right: 20px;\n          z-index: 9999;\n          font-family: Arial, sans-serif;\n        }\n    \n        .translate-button {\n          width: 48px;\n          height: 48px;\n          border-radius: 50%;\n          background: ${a};\n          border: none;\n          cursor: pointer;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n        }\n    \n        .translate-button:hover {\n          background: ${a};\n        }\n    \n        .translate-popup {\n          position: absolute;\n          bottom: 60px;\n          right: 0;\n          background: white;\n          border-radius: 8px;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n          padding: 16px;\n          width: 250px;\n          display: none;\n        }\n    \n        .translate-popup.active {\n          display: block;\n        }\n    \n        .translate-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 12px;\n        }\n    \n        .translate-title {\n          margin: 0;\n          font-size: 16px;\n          font-weight: bold;\n          color: #000000;\n        }\n    \n        .translate-close {\n          background: none;\n          border: none;\n          cursor: pointer;\n          padding: 4px;\n        }\n    \n        .translate-select {\n          width: 100%;\n          padding: 8px;\n          border: 1px solid #e2e8f0;\n          border-radius: 4px;\n          margin-bottom: 12px;\n          background-color:#ffffff;\n        }\n    \n        .translate-reset {\n          width: 100%;\n          padding: 8px;\n          background: ${a};\n          border: none;\n          border-radius: 4px;\n          cursor: pointer;\n          display: none;\n        }\n    \n        .translate-reset:hover {\n          background: ${a};\n        }\n    \n        .translate-reset.active {\n          display: block;\n        }\n    \n        .translate-loading {\n          position: fixed;\n          top: 20px;\n          right: 20px;\n          background: ${a};\n          color: white;\n          padding: 8px 16px;\n          border-radius: 4px;\n          display: none;\n        }\n    \n        .translate-loading.active {\n          display: block;\n        }\n\n        .translate-target-language {\n        color: #000000;\n        }\n      `),
      document.head.appendChild(o);
    let t = n?.pageLanguage || "en";
    const c = languages.find((e) => e.code === t)?.name || "English",
      i = document.createElement("div");
    (i.className = "translate-widget"),
      (i.innerHTML = `\n        <button class="translate-button">\n          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2">\n            <circle cx="12" cy="12" r="10"></circle>\n            <line x1="2" y1="12" x2="22" y2="12"></line>\n            <path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"></path>\n          </svg>\n        </button>\n        <div class="translate-popup">\n          <div class="translate-header">\n            <h3 class="translate-title">Translate Page</h3>\n            <button class="translate-close">âœ•</button>\n          </div>\n          <select class="translate-select">\n            <option value="">Select Language</option>\n            ${languages
        .map(
          (e) =>
            `<option class="translate-target-language" value="${e.code}">${e.name}</option>`
        )
        .join(
          ""
        )}\n          </select>\n          <button class="translate-reset">Reset to ${c}</button>\n        </div>\n        <div class="translate-loading">Translating...</div>\n      `),
      document.body.appendChild(i);
    const d = i.querySelector(".translate-button"),
      r = i.querySelector(".translate-popup"),
      s = i.querySelector(".translate-close"),
      m = i.querySelector(".translate-select"),
      l = i.querySelector(".translate-reset"),
      u = i.querySelector(".translate-loading");
    d.addEventListener("click", () => {
      r.classList.toggle("active");
    }),
      s.addEventListener("click", () => {
        r.classList.remove("active");
      });
    const h = new TranslationCache();
    async function g(n, a) {
      const o = (function () {
          const e = document.createTreeWalker(
              document.body,
              NodeFilter.SHOW_TEXT,
              {
                acceptNode: function (e) {
                  const n = e.parentElement;
                  return n
                    ? "SCRIPT" === n.tagName ||
                      "STYLE" === n.tagName ||
                      n.closest(".translate-widget") ||
                      n.closest(".notranslate")
                      ? NodeFilter.FILTER_REJECT
                      : e.textContent.trim()
                      ? NodeFilter.FILTER_ACCEPT
                      : NodeFilter.FILTER_REJECT
                    : NodeFilter.FILTER_REJECT;
                },
              }
            ),
            n = [];
          let a;
          for (; (a = e.nextNode()); ) n.push(a);
          return n;
        })(),
        t = [];
      for (let e = 0; e < o.length; e += 10) t.push(o.slice(e, e + 10));
      await Promise.all(
        t.map(async (o) => {
          const t = [],
            c = [];
          if (
            (o.forEach((e) => {
              const o = e.parentElement;
              if (!o) return;
              let i;
              if (o.hasAttribute("data-original-text"))
                (i = e.textContent.trim()),
                  "en" !== a &&
                    "en" !== n &&
                    (i = o.getAttribute("data-original-text"));
              else {
                const n = e.textContent.trim();
                n && (o.setAttribute("data-original-text", n), (i = n));
              }
              i && (t.push(i), c.push(e));
            }),
            t.length > 0)
          ) {
            const a = await (async function (n, a) {
              try {
                const o = h.get(n, a);
                if (o)
                  return console.log("Retrieved from cache:", n, "->", o), o;
                const t = await fetch(
                  "https://api.jigsawstack.com/v1/ai/translate",
                  {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                      "x-api-key": e,
                    },
                    body: JSON.stringify({ text: n, target_language: a }),
                  }
                );
                if (!t.ok)
                  throw new Error(`Error translating text: ${t.statusText}`);
                const c = (await t.json()).translated_text;
                return h.set(n, a, c), c;
              } catch (e) {
                return console.error("Translation error:", e), n;
              }
            })(t, n);
            a.forEach((e, n) => {
              c[n].textContent = e;
            });
          }
        })
      );
    }
    m.addEventListener("change", async function () {
      const e = this.value;
      if (e && e !== t) {
        u.classList.add("active"), l.classList.add("active");
        try {
          await g(e, t), (t = e);
        } catch (e) {
          console.error("Translation error:", e),
            alert("An error occurred during translation. Please try again.");
        } finally {
          u.classList.remove("active");
        }
      }
    }),
      l.addEventListener("click", () => {
        document.querySelectorAll("[data-original-text]").forEach((e) => {
          const n = Array.from(e.childNodes).filter(
            (e) => e.nodeType === Node.TEXT_NODE
          );
          n.length > 0 &&
            (n[0].textContent = e.getAttribute("data-original-text"));
        }),
          (m.value = "en"),
          (t = "en"),
          l.classList.remove("active");
      }),
      (m.innerHTML = `\n      <option value=${t}>${c}</option>\n      ${languages
        .filter((e) => e.code !== t)
        .map((e) => `<option value="${e.code}">${e.name}</option>`)
        .join("")}\n    `);
  },
  languages = [
    { code: "aa", name: "Afar" },
    { code: "ab", name: "Abkhazian" },
    { code: "af", name: "Afrikaans" },
    { code: "ak", name: "Akan" },
    { code: "am", name: "Amharic" },
    { code: "an", name: "Aragonese" },
    { code: "ar", name: "Arabic" },
    { code: "as", name: "Assamese" },
    { code: "av", name: "Avar" },
    { code: "ay", name: "Aymara" },
    { code: "az", name: "Azerbaijani" },
    { code: "ba", name: "Bashkir" },
    { code: "be", name: "Belarusian" },
    { code: "bg", name: "Bulgarian" },
    { code: "bh", name: "Bihari" },
    { code: "bi", name: "Bislama" },
    { code: "bm", name: "Bambara" },
    { code: "bn", name: "Bengali" },
    { code: "bo", name: "Tibetan" },
    { code: "br", name: "Breton" },
    { code: "bs", name: "Bosnian" },
    { code: "ca", name: "Catalan" },
    { code: "ce", name: "Chechen" },
    { code: "ch", name: "Chamorro" },
    { code: "co", name: "Corsican" },
    { code: "cr", name: "Cree" },
    { code: "cs", name: "Czech" },
    { code: "cu", name: "Old Church Slavonic / Old Bulgarian" },
    { code: "cv", name: "Chuvash" },
    { code: "cy", name: "Welsh" },
    { code: "da", name: "Danish" },
    { code: "de", name: "German" },
    { code: "dv", name: "Divehi" },
    { code: "dz", name: "Dzongkha" },
    { code: "ee", name: "Ewe" },
    { code: "el", name: "Greek" },
    { code: "en", name: "English" },
    { code: "eo", name: "Esperanto" },
    { code: "es", name: "Spanish" },
    { code: "et", name: "Estonian" },
    { code: "eu", name: "Basque" },
    { code: "fa", name: "Persian" },
    { code: "ff", name: "Peul" },
    { code: "fi", name: "Finnish" },
    { code: "fj", name: "Fijian" },
    { code: "fo", name: "Faroese" },
    { code: "fr", name: "French" },
    { code: "fy", name: "West Frisian" },
    { code: "ga", name: "Irish" },
    { code: "gd", name: "Scottish Gaelic" },
    { code: "gl", name: "Galician" },
    { code: "gn", name: "Guarani" },
    { code: "gu", name: "Gujarati" },
    { code: "gv", name: "Manx" },
    { code: "ha", name: "Hausa" },
    { code: "he", name: "Hebrew" },
    { code: "hi", name: "Hindi" },
    { code: "ho", name: "Hiri Motu" },
    { code: "hr", name: "Croatian" },
    { code: "ht", name: "Haitian" },
    { code: "hu", name: "Hungarian" },
    { code: "hy", name: "Armenian" },
    { code: "hz", name: "Herero" },
    { code: "ia", name: "Interlingua" },
    { code: "id", name: "Indonesian" },
    { code: "ie", name: "Interlingue" },
    { code: "ig", name: "Igbo" },
    { code: "ii", name: "Sichuan Yi" },
    { code: "ik", name: "Inupiak" },
    { code: "io", name: "Ido" },
    { code: "is", name: "Icelandic" },
    { code: "it", name: "Italian" },
    { code: "iu", name: "Inuktitut" },
    { code: "ja", name: "Japanese" },
    { code: "jv", name: "Javanese" },
    { code: "ka", name: "Georgian" },
    { code: "kg", name: "Kongo" },
    { code: "ki", name: "Kikuyu" },
    { code: "kj", name: "Kuanyama" },
    { code: "kk", name: "Kazakh" },
    { code: "kl", name: "Greenlandic" },
    { code: "km", name: "Cambodian" },
    { code: "kn", name: "Kannada" },
    { code: "ko", name: "Korean" },
    { code: "kr", name: "Kanuri" },
    { code: "ks", name: "Kashmiri" },
    { code: "ku", name: "Kurdish" },
    { code: "kv", name: "Komi" },
    { code: "kw", name: "Cornish" },
    { code: "ky", name: "Kirghiz" },
    { code: "la", name: "Latin" },
    { code: "lb", name: "Luxembourgish" },
    { code: "lg", name: "Ganda" },
    { code: "li", name: "Limburgian" },
    { code: "ln", name: "Lingala" },
    { code: "lo", name: "Laotian" },
    { code: "lt", name: "Lithuanian" },
    { code: "lu", name: "Luba-Katanga" },
    { code: "lv", name: "Latvian" },
    { code: "mg", name: "Malagasy" },
    { code: "mh", name: "Marshallese" },
    { code: "mi", name: "Maori" },
    { code: "mk", name: "Macedonian" },
    { code: "ml", name: "Malayalam" },
    { code: "mn", name: "Mongolian" },
    { code: "mo", name: "Moldovan" },
    { code: "mr", name: "Marathi" },
    { code: "ms", name: "Malay" },
    { code: "mt", name: "Maltese" },
    { code: "my", name: "Burmese" },
    { code: "na", name: "Nauruan" },
    { code: "nb", name: "Norwegian BokmÃ¥l" },
    { code: "nd", name: "North Ndebele" },
    { code: "ne", name: "Nepali" },
    { code: "ng", name: "Ndonga" },
    { code: "nl", name: "Dutch" },
    { code: "nn", name: "Norwegian Nynorsk" },
    { code: "no", name: "Norwegian" },
    { code: "nr", name: "South Ndebele" },
    { code: "nv", name: "Navajo" },
    { code: "ny", name: "Chichewa" },
    { code: "oc", name: "Occitan" },
    { code: "oj", name: "Ojibwa" },
    { code: "om", name: "Oromo" },
    { code: "or", name: "Oriya" },
    { code: "os", name: "Ossetian / Ossetic" },
    { code: "pa", name: "Panjabi / Punjabi" },
    { code: "pi", name: "Pali" },
    { code: "pl", name: "Polish" },
    { code: "ps", name: "Pashto" },
    { code: "pt", name: "Portuguese" },
    { code: "qu", name: "Quechua" },
    { code: "rm", name: "Raeto Romance" },
    { code: "rn", name: "Kirundi" },
    { code: "ro", name: "Romanian" },
    { code: "ru", name: "Russian" },
    { code: "rw", name: "Rwandi" },
    { code: "sa", name: "Sanskrit" },
    { code: "sc", name: "Sardinian" },
    { code: "sd", name: "Sindhi" },
    { code: "se", name: "Northern Sami" },
    { code: "sg", name: "Sango" },
    { code: "sh", name: "Serbo-Croatian" },
    { code: "si", name: "Sinhalese" },
    { code: "sk", name: "Slovak" },
    { code: "sl", name: "Slovenian" },
    { code: "sm", name: "Samoan" },
    { code: "sn", name: "Shona" },
    { code: "so", name: "Somalia" },
    { code: "sq", name: "Albanian" },
    { code: "sr", name: "Serbian" },
    { code: "ss", name: "Swati" },
    { code: "st", name: "Southern Sotho" },
    { code: "su", name: "Sundanese" },
    { code: "sv", name: "Swedish" },
    { code: "sw", name: "Swahili" },
    { code: "ta", name: "Tamil" },
    { code: "te", name: "Telugu" },
    { code: "tg", name: "Tajik" },
    { code: "th", name: "Thai" },
    { code: "ti", name: "Tigrinya" },
    { code: "tk", name: "Turkmen" },
    { code: "tl", name: "Tagalog / Filipino" },
    { code: "tn", name: "Tswana" },
    { code: "to", name: "Tonga" },
    { code: "tr", name: "Turkish" },
    { code: "ts", name: "Tsonga" },
    { code: "tt", name: "Tatar" },
    { code: "tw", name: "Twi" },
    { code: "ty", name: "Tahitian" },
    { code: "ug", name: "Uyghur" },
    { code: "uk", name: "Ukrainian" },
    { code: "ur", name: "Urdu" },
    { code: "uz", name: "Uzbek" },
    { code: "ve", name: "Venda" },
    { code: "vi", name: "Vietnamese" },
    { code: "vo", name: "VolapÃ¼k" },
    { code: "wa", name: "Walloon" },
    { code: "wo", name: "Wolof" },
    { code: "xh", name: "Xhosa" },
    { code: "yi", name: "Yiddish" },
    { code: "yo", name: "Yoruba" },
    { code: "za", name: "Zhuang" },
    { code: "zh", name: "Chinese" },
    { code: "zu", name: "Zulu" },
  ];
