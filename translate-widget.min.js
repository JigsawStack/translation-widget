class TranslationCache {
  constructor() {
    (this.cache = new Map()), (this.maxSize = 1e3);
  }
  getKey(e, t) {
    return `${t}:${e}`;
  }
  get(e, t) {
    return this.cache.get(this.getKey(e, t));
  }
  set(e, t, n) {
    if (this.cache.size >= this.maxSize) {
      const e = this.cache.keys().next().value;
      this.cache.delete(e);
    }
    this.cache.set(this.getKey(e, t), n);
  }
}
const initializeTranslationWidget = (e) => {
  if (!e)
    return void console.error(
      "Public key is required to initialize the translation widget"
    );
  const t = document.createElement("style");
  (t.textContent =
    "\n        .translate-widget {\n          position: fixed;\n          bottom: 20px;\n          right: 20px;\n          z-index: 9999;\n          font-family: Arial, sans-serif;\n        }\n    \n        .translate-button {\n          width: 48px;\n          height: 48px;\n          border-radius: 50%;\n          background: #2563eb;\n          border: none;\n          cursor: pointer;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n        }\n    \n        .translate-button:hover {\n          background: #1d4ed8;\n        }\n    \n        .translate-popup {\n          position: absolute;\n          bottom: 60px;\n          right: 0;\n          background: white;\n          border-radius: 8px;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n          padding: 16px;\n          width: 250px;\n          display: none;\n        }\n    \n        .translate-popup.active {\n          display: block;\n        }\n    \n        .translate-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 12px;\n        }\n    \n        .translate-title {\n          margin: 0;\n          font-size: 16px;\n          font-weight: bold;\n        }\n    \n        .translate-close {\n          background: none;\n          border: none;\n          cursor: pointer;\n          padding: 4px;\n        }\n    \n        .translate-select {\n          width: 100%;\n          padding: 8px;\n          border: 1px solid #e2e8f0;\n          border-radius: 4px;\n          margin-bottom: 12px;\n        }\n    \n        .translate-reset {\n          width: 100%;\n          padding: 8px;\n          background: #2563eb;\n          border: none;\n          border-radius: 4px;\n          cursor: pointer;\n          display: none;\n        }\n    \n        .translate-reset:hover {\n          background: #2563eb;\n        }\n    \n        .translate-reset.active {\n          display: block;\n        }\n    \n        .translate-loading {\n          position: fixed;\n          top: 20px;\n          right: 20px;\n          background: #2563eb;\n          color: white;\n          padding: 8px 16px;\n          border-radius: 4px;\n          display: none;\n        }\n    \n        .translate-loading.active {\n          display: block;\n        }\n      "),
    document.head.appendChild(t);
  const n = [
      { code: "en", name: "English" },
      { code: "es", name: "Spanish" },
      { code: "fr", name: "French" },
      { code: "de", name: "German" },
      { code: "zh", name: "Chinese" },
    ],
    a = document.createElement("div");
  (a.className = "translate-widget"),
    (a.innerHTML = `\n        <button class="translate-button">\n          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2">\n            <circle cx="12" cy="12" r="10"></circle>\n            <line x1="2" y1="12" x2="22" y2="12"></line>\n            <path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"></path>\n          </svg>\n        </button>\n        <div class="translate-popup">\n          <div class="translate-header">\n            <h3 class="translate-title">Translate Page</h3>\n            <button class="translate-close">âœ•</button>\n          </div>\n          <select class="translate-select">\n            <option value="">Select Language</option>\n            ${n
      .map((e) => `<option value="${e.code}">${e.name}</option>`)
      .join(
        ""
      )}\n          </select>\n          <button class="translate-reset">Reset to English</button>\n        </div>\n        <div class="translate-loading">Translating...</div>\n      `),
    document.body.appendChild(a);
  const r = a.querySelector(".translate-button"),
    o = a.querySelector(".translate-popup"),
    i = a.querySelector(".translate-close"),
    s = a.querySelector(".translate-select"),
    l = a.querySelector(".translate-reset"),
    c = a.querySelector(".translate-loading");
  r.addEventListener("click", () => {
    o.classList.toggle("active");
  }),
    i.addEventListener("click", () => {
      o.classList.remove("active");
    });
  const d = new TranslationCache();
  async function p(t, n) {
    try {
      const a = d.get(t, n);
      if (a) return console.log("Retrieved from cache:", t, "->", a), a;
      const r = await fetch("https://api.jigsawstack.com/v1/ai/translate", {
        method: "POST",
        headers: { "Content-Type": "application/json", "x-api-key": e },
        body: JSON.stringify({ text: t, target_language: n }),
      });
      if (!r.ok) throw new Error(`Error translating text: ${r.statusText}`);
      const o = (await r.json()).translated_text;
      return d.set(t, n, o), o;
    } catch (e) {
      return console.error("Translation error:", e), t;
    }
  }
  let u = "en";
  s.addEventListener("change", async function () {
    const e = this.value;
    if (e && e !== u) {
      c.classList.add("active"), l.classList.add("active");
      try {
        const t = (function () {
            const e = document.createTreeWalker(
                document.body,
                NodeFilter.SHOW_TEXT,
                {
                  acceptNode: function (e) {
                    const t = e.parentElement;
                    return t
                      ? "SCRIPT" === t.tagName ||
                        "STYLE" === t.tagName ||
                        t.closest(".translate-widget")
                        ? NodeFilter.FILTER_REJECT
                        : e.textContent.trim()
                        ? NodeFilter.FILTER_ACCEPT
                        : NodeFilter.FILTER_REJECT
                      : NodeFilter.FILTER_REJECT;
                  },
                }
              ),
              t = [];
            let n;
            for (; (n = e.nextNode()); ) t.push(n);
            return t;
          })(),
          n = 10;
        for (let a = 0; a < t.length; a += n) {
          const r = t.slice(a, a + n);
          await Promise.all(
            r.map(async (t) => {
              const n = t.parentElement;
              if (!n) return;
              let a;
              if (n.hasAttribute("data-original-text"))
                (a = t.textContent.trim()),
                  "en" !== u &&
                    "en" !== e &&
                    (a = n.getAttribute("data-original-text"));
              else {
                const e = t.textContent.trim();
                e && (n.setAttribute("data-original-text", e), (a = e));
              }
              if (a) {
                const n = await p(a, e);
                t.textContent = n;
              }
            })
          );
        }
        u = e;
      } catch (e) {
        console.error("Translation error:", e),
          alert("An error occurred during translation. Please try again.");
      } finally {
        c.classList.remove("active");
      }
    }
  }),
    l.addEventListener("click", () => {
      document.querySelectorAll("[data-original-text]").forEach((e) => {
        const t = Array.from(e.childNodes).filter(
          (e) => e.nodeType === Node.TEXT_NODE
        );
        t.length > 0 &&
          (t[0].textContent = e.getAttribute("data-original-text"));
      }),
        (s.value = "en"),
        (u = "en"),
        l.classList.remove("active");
    }),
    (s.innerHTML = `\n      <option value="en">English</option>\n      ${n
      .filter((e) => "en" !== e.code)
      .map((e) => `<option value="${e.code}">${e.name}</option>`)
      .join("")}\n    `);
};
