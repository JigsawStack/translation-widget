{"version":3,"file":"index.min.js","sources":["../src/lib/translation/index.ts","../src/constants/languages.ts","../src/utils/utils.ts","../src/lib/dom/index.ts","../src/constants/index.ts","../node_modules/lz-string/libs/lz-string.js","../src/lib/storage/localstorage.ts","../src/widget/index.ts","../src/templates/html/widget.html?raw","../src/index.ts"],"sourcesContent":["interface TranslationResponse {\n    translated_text: string | string[]\n    source_language?: string\n    detected_language?: string\n    confidence?: number\n}\n\ninterface TranslationError extends Error {\n    status?: number\n    response?: Response\n}\n\ninterface CacheMetrics {\n    hits: number\n    misses: number\n}\n\nexport class TranslationService {\n    private readonly publicKey: string\n    private cacheMetrics: CacheMetrics = { hits: 0, misses: 0 }\n    // Todo: convert this to use sdk instead of api\n    private readonly apiUrl = 'https://api.jigsawstack.com/v1/ai/translate'\n\n    constructor(publicKey: string) {\n        this.publicKey = publicKey\n    }\n\n    getCacheMetrics(): CacheMetrics {\n        return { ...this.cacheMetrics }\n    }\n\n    async translateBatchText(\n        texts: string[],\n        targetLang: string,\n        maxRetries = 2,\n        retryDelay = 100\n    ): Promise<string[]> {\n        let attempt = 0;\n        while (attempt < maxRetries) {\n            try {\n                const response = await fetch(this.apiUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'x-api-key': this.publicKey,\n                    },\n                    body: JSON.stringify({\n                        text: texts,\n                        target_language: targetLang,\n                    }),\n                });\n\n                if (!response.ok) {\n                    const error: TranslationError = new Error(\n                        `Error translating text: ${response.statusText}`\n                    );\n                    error.status = response.status;\n                    error.response = response;\n                    throw error;\n                }\n\n                const result = (await response.json()) as TranslationResponse;\n                const translations = Array.isArray(result.translated_text)\n                    ? result.translated_text\n                    : [result.translated_text];\n\n                return translations;\n            } catch (error) {\n                attempt++;\n                if (attempt >= maxRetries) {\n                    console.error('Translation error after retries:', error);\n                    return texts; // Return original texts on error\n                }\n                // Wait before retrying\n                await new Promise(res => setTimeout(res, retryDelay));\n            }\n        }\n        return texts; // Fallback, should not reach here\n    }\n}\n","import { Language } from \"../types\"\nexport const languages: Language[] = [\n    {\n        code: 'af',\n        name: 'Afrikaans',\n        native: 'Afrikaans',\n        region: 'South Africa'\n    },\n    {\n        code: 'am',\n        name: 'Amharic',\n        native: 'አማርኛ',\n        region: 'Ethiopia'\n    },\n    {\n        code: 'ar',\n        name: 'Arabic',\n        native: 'العربية',\n        rtl: 1,\n        region: 'Saudi Arabia'\n    },\n    {\n        code: 'as',\n        name: 'Assamese',\n        native: 'অসমীয়া',\n        region: 'India'\n    },\n    {\n        code: 'az',\n        name: 'Azerbaijani',\n        native: 'Azərbaycanca / آذربايجان',\n        region: 'Azerbaijan'\n    },\n    {\n        code: 'ba',\n        name: 'Bashkir',\n        native: 'Башҡорт',\n        region: 'Russia'\n    },\n    {\n        code: 'be',\n        name: 'Belarusian',\n        native: 'Беларуская',\n        region: 'Belarus'\n    },\n    {\n        code: 'bg',\n        name: 'Bulgarian',\n        native: 'Български',\n        region: 'Bulgaria'\n    },\n    {\n        code: 'bn',\n        name: 'Bengali',\n        native: 'বাংলা',\n        region: 'Bangladesh'\n    },\n    {\n        code: 'bo',\n        name: 'Tibetan',\n        native: 'བོད་ཡིག / Bod skad',\n        region: 'Tibet'\n    },\n    {\n        code: 'br',\n        name: 'Breton',\n        native: 'Brezhoneg',\n        region: 'France'\n    },\n    {\n        code: 'bs',\n        name: 'Bosnian',\n        native: 'Bosanski',\n        region: 'Bosnia'\n    },\n    {\n        code: 'ca',\n        name: 'Catalan',\n        native: 'Català',\n        region: 'Spain'\n    },\n    {\n        code: 'ch',\n        name: 'Chamorro',\n        native: 'Chamoru',\n        region: 'Guam'\n    },\n    {\n        code: 'co',\n        name: 'Corsican',\n        native: 'Corsu',\n        region: 'France'\n    },\n    {\n        code: 'cs',\n        name: 'Czech',\n        native: 'Česky',\n        region: 'Czech Republic'\n    },\n    {\n        code: 'cy',\n        name: 'Welsh',\n        native: 'Cymraeg',\n        region: 'Wales'\n    },\n    {\n        code: 'da',\n        name: 'Danish',\n        native: 'Dansk',\n        region: 'Denmark'\n    },\n    {\n        code: 'de',\n        name: 'German',\n        native: 'Deutsch',\n        region: 'Germany'\n    },\n    {\n        code: 'dv',\n        name: 'Divehi',\n        native: 'ދިވެހިބަސް',\n        rtl: 1,\n        region: 'Maldives'\n    },\n    {\n        code: 'dz',\n        name: 'Dzongkha',\n        native: 'ཇོང་ཁ',\n        region: 'Bhutan'\n    },\n    {\n        code: 'el',\n        name: 'Greek',\n        native: 'Ελληνικά',\n        region: 'Greece'\n    },\n    {\n        code: 'en',\n        name: 'English',\n        native: 'English',\n        region: 'United Kingdom'\n    },\n    {\n        code: 'eo',\n        name: 'Esperanto',\n        native: 'Esperanto',\n        region: 'International'\n    },\n    {\n        code: 'es',\n        name: 'Spanish',\n        native: 'Español',\n        region: 'Spain'\n    },\n    {\n        code: 'et',\n        name: 'Estonian',\n        native: 'Eesti',\n        region: 'Estonia'\n    },\n    {\n        code: 'eu',\n        name: 'Basque',\n        native: 'Euskara',\n        region: 'Spain'\n    },\n    {\n        code: 'fa',\n        name: 'Persian',\n        native: 'فارسی',\n        rtl: 1,\n        region: 'Iran'\n    },\n    {\n        code: 'ff',\n        name: 'Peul',\n        native: 'Fulfulde',\n        region: 'Nigeria'\n    },\n    {\n        code: 'fi',\n        name: 'Finnish',\n        native: 'Suomi',\n        region: 'Finland'\n    },\n    {\n        code: 'fj',\n        name: 'Fijian',\n        native: 'Na Vosa Vakaviti',\n        region: 'Fiji'\n    },\n    {\n        code: 'fo',\n        name: 'Faroese',\n        native: 'Føroyskt',\n        region: 'Faroe Islands'\n    },\n    {\n        code: 'fr',\n        name: 'French',\n        native: 'Français',\n        region: 'France'\n    },\n    {\n        code: 'fy',\n        name: 'West Frisian',\n        native: 'Frysk',\n        region: 'Netherlands'\n    },\n    {\n        code: 'ga',\n        name: 'Irish',\n        native: 'Gaeilge',\n        region: 'Ireland'\n    },\n    {\n        code: 'gd',\n        name: 'Scottish Gaelic',\n        native: 'Gàidhlig',\n        region: 'Scotland'\n    },\n    {\n        code: 'gl',\n        name: 'Galician',\n        native: 'Galego',\n        region: 'Spain'\n    },\n    {\n        code: 'gn',\n        name: 'Guarani',\n        native: \"Avañe'ẽ\",\n        region: 'Paraguay'\n    },\n    {\n        code: 'gu',\n        name: 'Gujarati',\n        native: 'ગુજરાતી',\n        region: 'India'\n    },\n    {\n        code: 'gv',\n        name: 'Manx',\n        native: 'Gaelg',\n        region: 'Isle of Man'\n    },\n    {\n        code: 'ha',\n        name: 'Hausa',\n        native: 'هَوُسَ',\n        rtl: 1,\n        region: 'Nigeria'\n    },\n    {\n        code: 'he',\n        name: 'Hebrew',\n        native: 'עברית',\n        rtl: 1,\n        region: 'Israel'\n    },\n    {\n        code: 'hi',\n        name: 'Hindi',\n        native: 'हिन्दी',\n        region: 'India'\n    },\n    {\n        code: 'hr',\n        name: 'Croatian',\n        native: 'Hrvatski',\n        region: 'Croatia'\n    },\n    {\n        code: 'ht',\n        name: 'Haitian',\n        native: 'Krèyol ayisyen',\n        region: 'Haiti'\n    },\n    {\n        code: 'hu',\n        name: 'Hungarian',\n        native: 'Magyar',\n        region: 'Hungary'\n    },\n    {\n        code: 'hy',\n        name: 'Armenian',\n        native: 'Հայերեն',\n        region: 'Armenia'\n    },\n    {\n        code: 'id',\n        name: 'Indonesian',\n        native: 'Bahasa Indonesia',\n        region: 'Indonesia'\n    },\n    {\n        code: 'ig',\n        name: 'Igbo',\n        native: 'Igbo',\n        region: 'Nigeria'\n    },\n    {\n        code: 'is',\n        name: 'Icelandic',\n        native: 'Íslenska',\n        region: 'Iceland'\n    },\n    {\n        code: 'it',\n        name: 'Italian',\n        native: 'Italiano',\n        region: 'Italy'\n    },\n    {\n        code: 'iu',\n        name: 'Inuktitut',\n        native: 'ᐃᓄᒃᑎᑐᑦ',\n        region: 'Canada'\n    },\n    {\n        code: 'ja',\n        name: 'Japanese',\n        native: '日本語',\n        region: 'Japan'\n    },\n    {\n        code: 'jv',\n        name: 'Javanese',\n        native: 'Basa Jawa',\n        region: 'Indonesia'\n    },\n    {\n        code: 'ka',\n        name: 'Georgian',\n        native: 'ქართული',\n        region: 'Georgia'\n    },\n    {\n        code: 'kg',\n        name: 'Kongo',\n        native: 'KiKongo',\n        region: 'Congo'\n    },\n    {\n        code: 'ki',\n        name: 'Kikuyu',\n        native: 'Gĩkũyũ',\n        region: 'Kenya'\n    },\n    {\n        code: 'kj',\n        name: 'Kuanyama',\n        native: 'Kuanyama',\n        region: 'Namibia'\n    },\n    {\n        code: 'kk',\n        name: 'Kazakh',\n        native: 'Қазақша',\n        region: 'Kazakhstan'\n    },\n    {\n        code: 'kl',\n        name: 'Greenlandic',\n        native: 'Kalaallisut',\n        region: 'Greenland'\n    },\n    {\n        code: 'km',\n        name: 'Cambodian',\n        native: 'ភាសាខ្មែរ',\n        region: 'Cambodia'\n    },\n    {\n        code: 'kn',\n        name: 'Kannada',\n        native: 'ಕನ್ನಡ',\n        region: 'India'\n    },\n    {\n        code: 'ko',\n        name: 'Korean',\n        native: '한국어',\n        region: 'South Korea'\n    },\n    {\n        code: 'kr',\n        name: 'Kanuri',\n        native: 'Kanuri',\n        region: 'Nigeria'\n    },\n    {\n        code: 'ks',\n        name: 'Kashmiri',\n        native: 'कश्मीरी / كشميري',\n        rtl: 1,\n        region: 'India'\n    },\n    {\n        code: 'ku',\n        name: 'Kurdish',\n        native: 'Kurdî / كوردی',\n        rtl: 1,\n        region: 'Iraq'\n    },\n    {\n        code: 'kv',\n        name: 'Komi',\n        native: 'Коми',\n        region: 'Russia'\n    },\n    {\n        code: 'kw',\n        name: 'Cornish',\n        native: 'Kernewek',\n        region: 'United Kingdom'\n    },\n    {\n        code: 'ky',\n        name: 'Kirghiz',\n        native: 'Kırgızca / Кыргызча',\n        region: 'Kyrgyzstan'\n    },\n    {\n        code: 'la',\n        name: 'Latin',\n        native: 'Latina',\n        region: 'Vatican'\n    },\n    {\n        code: 'lb',\n        name: 'Luxembourgish',\n        native: 'Lëtzebuergesch',\n        region: 'Luxembourg'\n    },\n    {\n        code: 'lg',\n        name: 'Ganda',\n        native: 'Luganda',\n        region: 'Uganda'\n    },\n    {\n        code: 'li',\n        name: 'Limburgian',\n        native: 'Limburgs',\n        region: 'Netherlands'\n    },\n    {\n        code: 'ln',\n        name: 'Lingala',\n        native: 'Lingála',\n        region: 'Congo'\n    },\n    {\n        code: 'lo',\n        name: 'Laotian',\n        native: 'ລາວ / Pha xa lao',\n        region: 'Laos'\n    },\n    {\n        code: 'lt',\n        name: 'Lithuanian',\n        native: 'Lietuvių',\n        region: 'Lithuania'\n    },\n    {\n        code: 'lu',\n        name: 'Luba-Katanga',\n        native: 'Tshiluba',\n        region: 'Congo'\n    },\n    {\n        code: 'lv',\n        name: 'Latvian',\n        native: 'Latviešu',\n        region: 'Latvia'\n    },\n    {\n        code: 'mg',\n        name: 'Malagasy',\n        native: 'Malagasy',\n        region: 'Madagascar'\n    },\n    {\n        code: 'mh',\n        name: 'Marshallese',\n        native: 'Kajin Majel / Ebon',\n        region: 'Marshall Islands'\n    },\n    {\n        code: 'mi',\n        name: 'Maori',\n        native: 'Māori',\n        region: 'New Zealand'\n    },\n    {\n        code: 'mk',\n        name: 'Macedonian',\n        native: 'Македонски',\n        region: 'North Macedonia'\n    },\n    {\n        code: 'ml',\n        name: 'Malayalam',\n        native: 'മലയാളം',\n        region: 'India'\n    },\n    {\n        code: 'mn',\n        name: 'Mongolian',\n        native: 'Монгол',\n        region: 'Mongolia'\n    },\n    {\n        code: 'mo',\n        name: 'Moldovan',\n        native: 'Moldovenească',\n        region: 'Moldova'\n    },\n    {\n        code: 'mr',\n        name: 'Marathi',\n        native: 'मराठी',\n        region: 'India'\n    },\n    {\n        code: 'ms',\n        name: 'Malay',\n        native: 'Bahasa Melayu',\n        region: 'Malaysia'\n    },\n    {\n        code: 'mt',\n        name: 'Maltese',\n        native: 'bil-Malti',\n        region: 'Malta'\n    },\n    {\n        code: 'sv',\n        name: 'Swedish',\n        native: 'Svenska',\n        region: 'Sweden'\n    },\n    {\n        code: 'sw',\n        name: 'Swahili',\n        native: 'Kiswahili',\n        region: 'Tanzania'\n    },\n    {\n        code: 'ta',\n        name: 'Tamil',\n        native: 'தமிழ்',\n        region: 'India'\n    },\n    {\n        code: 'te',\n        name: 'Telugu',\n        native: 'తెలుగు',\n        region: 'India'\n    },\n    {\n        code: 'tg',\n        name: 'Tajik',\n        native: 'Тоҷикӣ',\n        region: 'Tajikistan'\n    },\n    {\n        code: 'th',\n        name: 'Thai',\n        native: 'ไทย / Phasa Thai',\n        region: 'Thailand'\n    },\n    {\n        code: 'ti',\n        name: 'Tigrinya',\n        native: 'ትግርኛ',\n        region: 'Eritrea'\n    },\n    {\n        code: 'tk',\n        name: 'Turkmen',\n        native: 'Туркмен / تركمن',\n        region: 'Turkmenistan'\n    },\n    {\n        code: 'tl',\n        name: 'Tagalog',\n        native: 'Tagalog',\n        region: 'Philippines'\n    },\n    {\n        code: 'tn',\n        name: 'Tswana',\n        native: 'Setswana',\n        region: 'Botswana'\n    },\n    {\n        code: 'to',\n        name: 'Tonga',\n        native: 'Lea Faka-Tonga',\n        region: 'Tonga'\n    },\n    {\n        code: 'tr',\n        name: 'Turkish',\n        native: 'Türkçe',\n        region: 'Turkey'\n    },\n    {\n        code: 'ts',\n        name: 'Tsonga',\n        native: 'Xitsonga',\n        region: 'South Africa'\n    },\n    {\n        code: 'tt',\n        name: 'Tatar',\n        native: 'Tatarça',\n        region: 'Russia'\n    },\n    {\n        code: 'tw',\n        name: 'Twi',\n        native: 'Twi',\n        region: 'Ghana'\n    },\n    {\n        code: 'ty',\n        name: 'Tahitian',\n        native: 'Reo Mā`ohi',\n        region: 'French Polynesia'\n    },\n    {\n        code: 'ug',\n        name: 'Uyghur',\n        native: 'Uyƣurqə / ئۇيغۇرچە',\n        region: 'China'\n    },\n    {\n        code: 'uk',\n        name: 'Ukrainian',\n        native: 'Українська',\n        region: 'Ukraine'\n    },\n    {\n        code: 'ur',\n        name: 'Urdu',\n        native: 'اردو',\n        rtl: 1,\n        region: 'Pakistan'\n    },\n    {\n        code: 'uz',\n        name: 'Uzbek',\n        native: 'Ўзбек',\n        region: 'Uzbekistan'\n    },\n    {\n        code: 've',\n        name: 'Venda',\n        native: 'Tshivenḓa',\n        region: 'South Africa'\n    },\n    {\n        code: 'vi',\n        name: 'Vietnamese',\n        native: 'Tiếng Việt',\n        region: 'Vietnam'\n    },\n    {\n        code: 'vo',\n        name: 'Volapük',\n        native: 'Volapük',\n        region: 'International'\n    },\n    {\n        code: 'wo',\n        name: 'Wolof',\n        native: 'Wollof',\n        region: 'Senegal'\n    },\n    {\n        code: 'xh',\n        name: 'Xhosa',\n        native: 'isiXhosa',\n        region: 'South Africa'\n    },\n    {\n        code: 'yi',\n        name: 'Yiddish',\n        native: 'ייִדיש',\n        rtl: 1,\n        region: 'Israel'\n    },\n    {\n        code: 'yo',\n        name: 'Yoruba',\n        native: 'Yorùbá',\n        region: 'Nigeria'\n    },\n    {\n        code: 'zh',\n        name: 'Chinese',\n        native: '中文',\n        region: 'China'\n    },\n    {\n        code: 'zu',\n        name: 'Zulu',\n        native: 'isiZulu',\n        region: 'South Africa'\n    }\n]","import { languages } from \"../constants/languages\";\nfunction generateHashForContent(nodes: Node[]): string {\n    const content = nodes.map(node => {\n        if (node.nodeType === Node.TEXT_NODE) {\n            const parent = node.parentElement as HTMLElement | null;\n            // Use original text if available, else current text\n            if (parent && parent.hasAttribute('data-original-text')) {\n                return parent.getAttribute('data-original-text')?.replace(/\\s+/g, ' ').trim();\n            }\n            return node.textContent?.replace(/\\s+/g, ' ').trim().toLocaleLowerCase();\n        }\n    }).join(' ').trim();\n\n    const hash = murmurhash3_32_gc(content.toLowerCase(), 42).toString(16);\n    return hash;\n}\n\nfunction murmurhash3_32_gc(key: string, seed: number) {\n    let remainder = key.length & 3, bytes = key.length - remainder;\n    let h1 = seed, c1 = 0xcc9e2d51, c2 = 0x1b873593;\n    let i = 0;\n\n    while (i < bytes) {\n        let k1 =\n            (key.charCodeAt(i) & 0xff) |\n            ((key.charCodeAt(++i) & 0xff) << 8) |\n            ((key.charCodeAt(++i) & 0xff) << 16) |\n            ((key.charCodeAt(++i) & 0xff) << 24);\n        ++i;\n\n        k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;\n        k1 = (k1 << 15) | (k1 >>> 17);\n        k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;\n\n        h1 ^= k1;\n        h1 = (h1 << 13) | (h1 >>> 19);\n        const h1b = (((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16)) & 0xffffffff;\n        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));\n    }\n\n    let k1 = 0;\n\n    switch (remainder) {\n        //@ts-expect-error - this is a valid case\n        case 3: k1 ^= key.charCodeAt(i + 2) << 16;\n        //@ts-expect-error - this is a valid case\n        case 2: k1 ^= key.charCodeAt(i + 1) << 8;\n        case 1:\n            k1 ^= key.charCodeAt(i);\n            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;\n            k1 = (k1 << 15) | (k1 >>> 17);\n            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;\n            h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n    h1 ^= h1 >>> 16;\n    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;\n    h1 ^= h1 >>> 13;\n    h1 = (((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16)) & 0xffffffff;\n    h1 ^= h1 >>> 16;\n\n    return h1 >>> 0;\n}\n\nfunction getVisibleTextContent(element: HTMLElement): string {\n    // Get all child text nodes that are not inside .sr-only or [aria-hidden=\"true\"]\n    let text = '';\n    element.childNodes.forEach(node => {\n        if (\n            node.nodeType === Node.TEXT_NODE &&\n            !(element.classList.contains('sr-only') || element.getAttribute('aria-hidden') === 'true')\n        ) {\n            text += node.textContent;\n        }\n        if (\n            node.nodeType === Node.ELEMENT_NODE &&\n            !(node as HTMLElement).classList.contains('sr-only') &&\n            (node as HTMLElement).getAttribute('aria-hidden') !== 'true'\n        ) {\n            text += getVisibleTextContent(node as HTMLElement);\n        }\n    });\n    return text.trim();\n}\n\nconst removeEmojis = (text: string) => text.replace(/[\\p{Emoji_Presentation}\\p{Extended_Pictographic}]/gu, '');\n\nconst getUserLanguage = () => {\n    const userLanguages = window.navigator.languages\n    const userLanguage = languages.find(lang => userLanguages.includes(lang.code))\n    return userLanguage?.code || 'en';\n}\n\nexport { generateHashForContent, getVisibleTextContent, removeEmojis, getUserLanguage }","// type TreeWalkerFilter = (node: Node) => number\n\ninterface NodeProcessor {\n    acceptNode(node: Node): number\n}\n\nimport { removeEmojis } from '../../utils/utils'\n\nexport class DocumentNavigator {\n    /**\n     * Retrieves text nodes eligible for translation from the document\n     * @returns Collection of text nodes ready for translation\n     */\n    static findTranslatableContent(): Text[] {\n        const validator: NodeProcessor = {\n            acceptNode(node: Node): number {\n                if (node.nodeType !== Node.TEXT_NODE) {\n                    // Log non-text nodes\n                    return NodeFilter.FILTER_REJECT\n                }\n\n                const container = (node as Text).parentElement\n                if (!container) {\n                    return NodeFilter.FILTER_REJECT\n                }\n\n                // Skip if any ancestor has aria-hidden=\"true\"\n                if (container.closest('[aria-hidden=\"true\"]')) {\n                    return NodeFilter.FILTER_REJECT\n                }\n\n                // // check if the classname is sr-only\n                if (container.classList.contains('sr-only')) {\n                    return NodeFilter.FILTER_REJECT\n                }\n\n\n                const shouldSkip =\n                    container.closest('script, style, code') !== null ||\n                    container.closest('next-route-announcer') !== null ||\n                    container.closest('.translate-widget') !== null ||\n                    container.closest('.widget-trigger') !== null ||\n                    container.closest('.widget-dropdown') !== null ||\n                    container.closest('.notranslate') !== null ||\n                    !node.textContent?.trim()\n                return shouldSkip\n                    ? NodeFilter.FILTER_REJECT\n                    : NodeFilter.FILTER_ACCEPT\n            }\n        }\n\n        const navigator = document.createTreeWalker(\n            document.body,\n            NodeFilter.SHOW_TEXT,\n            validator\n        )\n\n        const results: Text[] = []\n        let currentNode: Node | null\n\n        while ((currentNode = navigator.nextNode())) {\n            if (currentNode.nodeType === Node.TEXT_NODE) {\n                const text = currentNode.textContent?.trim() || ''\n                /**\n                 * Skip the content if \n                 * 1. the content if empty \n                 * 2. the content is only one character in length \n                 * 3. the content is only an emoji\n                 */\n                const textWithoutEmojis = removeEmojis(text)\n                if (\n                    text.length === 0 ||\n                    text.length === 1 ||\n                    textWithoutEmojis.length === 0\n                ) {\n                    continue\n                }\n                results.push(currentNode as Text)\n            }\n        }\n\n        return results\n    }\n\n    /**\n     * Divides a collection into smaller groups\n     * @param items Collection to divide\n     * @param groupSize Maximum size of each group\n     * @returns Array of item groups\n     */\n    static divideIntoGroups<T>(items: T[], groupSize: number): T[][] {\n        const groups: T[][] = []\n\n        for (let i = 0; i < items.length; i += groupSize) {\n            groups.push(items.slice(i, i + groupSize))\n        }\n\n        return groups\n    }\n\n    /**\n     * Determines if a node contains translatable text\n     * @param node Node to evaluate\n     * @returns Whether the node contains translatable content\n     */\n    static containsTranslatableContent(node: Node): node is Text {\n        if (node.nodeType !== Node.TEXT_NODE) {\n            return false\n        }\n\n        const container = node.parentElement\n        if (!container) {\n            return false\n        }\n        return !(\n            container.tagName === 'SCRIPT' ||\n            container.tagName === 'STYLE' ||\n            container.tagName === 'CODE' ||\n            container.tagName === 'next-route-announcer' ||\n            container.closest('.translate-widget') ||\n            container.closest('.notranslate') ||\n            !node.textContent?.trim()\n        )\n    }\n\n    /**\n     * Retrieves the containing element of a node\n     * @param node Node to find container for\n     * @returns Containing element or null if none exists\n     */\n    static getContainer(node: Node): HTMLElement | null {\n        return node.parentElement\n    }\n}\n","export const MAX_CACHE_SIZE = 1000\nexport const BATCH_SIZE = 10\nexport const CACHE_PREFIX = 'jss-'\n\nexport const DEFAULT_CONFIG = {\n    primaryColor: '#2563eb',\n    pageLanguage: 'en',\n    autoDetectLanguage: false,\n    position: 'top-right' as const\n}\n","// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\n// This work is free. You can redistribute it and/or modify it\n// under the terms of the WTFPL, Version 2\n// For more information see LICENSE.txt or http://www.wtfpl.net/\n//\n// For more information, the home page:\n// http://pieroxy.net/blog/pages/lz-string/testing.html\n//\n// LZ-based compression algorithm, version 1.4.5\nvar LZString = (function() {\n\n// private property\nvar f = String.fromCharCode;\nvar keyStrBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar keyStrUriSafe = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\nvar baseReverseDic = {};\n\nfunction getBaseValue(alphabet, character) {\n  if (!baseReverseDic[alphabet]) {\n    baseReverseDic[alphabet] = {};\n    for (var i=0 ; i<alphabet.length ; i++) {\n      baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n    }\n  }\n  return baseReverseDic[alphabet][character];\n}\n\nvar LZString = {\n  compressToBase64 : function (input) {\n    if (input == null) return \"\";\n    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});\n    switch (res.length % 4) { // To produce valid Base64\n    default: // When could this happen ?\n    case 0 : return res;\n    case 1 : return res+\"===\";\n    case 2 : return res+\"==\";\n    case 3 : return res+\"=\";\n    }\n  },\n\n  decompressFromBase64 : function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });\n  },\n\n  compressToUTF16 : function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 15, function(a){return f(a+32);}) + \" \";\n  },\n\n  decompressFromUTF16: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });\n  },\n\n  //compress into uint8array (UCS-2 big endian format)\n  compressToUint8Array: function (uncompressed) {\n    var compressed = LZString.compress(uncompressed);\n    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character\n\n    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {\n      var current_value = compressed.charCodeAt(i);\n      buf[i*2] = current_value >>> 8;\n      buf[i*2+1] = current_value % 256;\n    }\n    return buf;\n  },\n\n  //decompress from uint8array (UCS-2 big endian format)\n  decompressFromUint8Array:function (compressed) {\n    if (compressed===null || compressed===undefined){\n        return LZString.decompress(compressed);\n    } else {\n        var buf=new Array(compressed.length/2); // 2 bytes per character\n        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {\n          buf[i]=compressed[i*2]*256+compressed[i*2+1];\n        }\n\n        var result = [];\n        buf.forEach(function (c) {\n          result.push(f(c));\n        });\n        return LZString.decompress(result.join(''));\n\n    }\n\n  },\n\n\n  //compress into a string that is already URI encoded\n  compressToEncodedURIComponent: function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});\n  },\n\n  //decompress from an output of compressToEncodedURIComponent\n  decompressFromEncodedURIComponent:function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    input = input.replace(/ /g, \"+\");\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });\n  },\n\n  compress: function (uncompressed) {\n    return LZString._compress(uncompressed, 16, function(a){return f(a);});\n  },\n  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {\n    if (uncompressed == null) return \"\";\n    var i, value,\n        context_dictionary= {},\n        context_dictionaryToCreate= {},\n        context_c=\"\",\n        context_wc=\"\",\n        context_w=\"\",\n        context_enlargeIn= 2, // Compensate for the first entry which should not count\n        context_dictSize= 3,\n        context_numBits= 2,\n        context_data=[],\n        context_data_val=0,\n        context_data_position=0,\n        ii;\n\n    for (ii = 0; ii < uncompressed.length; ii += 1) {\n      context_c = uncompressed.charAt(ii);\n      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {\n        context_dictionary[context_c] = context_dictSize++;\n        context_dictionaryToCreate[context_c] = true;\n      }\n\n      context_wc = context_w + context_c;\n      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {\n        context_w = context_wc;\n      } else {\n        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n          if (context_w.charCodeAt(0)<256) {\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<8 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          } else {\n            value = 1;\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1) | value;\n              if (context_data_position ==bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = 0;\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<16 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          }\n          context_enlargeIn--;\n          if (context_enlargeIn == 0) {\n            context_enlargeIn = Math.pow(2, context_numBits);\n            context_numBits++;\n          }\n          delete context_dictionaryToCreate[context_w];\n        } else {\n          value = context_dictionary[context_w];\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n\n\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        // Add wc to the dictionary.\n        context_dictionary[context_wc] = context_dictSize++;\n        context_w = String(context_c);\n      }\n    }\n\n    // Output the code for w.\n    if (context_w !== \"\") {\n      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n        if (context_w.charCodeAt(0)<256) {\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<8 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        } else {\n          value = 1;\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | value;\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = 0;\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<16 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        delete context_dictionaryToCreate[context_w];\n      } else {\n        value = context_dictionary[context_w];\n        for (i=0 ; i<context_numBits ; i++) {\n          context_data_val = (context_data_val << 1) | (value&1);\n          if (context_data_position == bitsPerChar-1) {\n            context_data_position = 0;\n            context_data.push(getCharFromInt(context_data_val));\n            context_data_val = 0;\n          } else {\n            context_data_position++;\n          }\n          value = value >> 1;\n        }\n\n\n      }\n      context_enlargeIn--;\n      if (context_enlargeIn == 0) {\n        context_enlargeIn = Math.pow(2, context_numBits);\n        context_numBits++;\n      }\n    }\n\n    // Mark the end of the stream\n    value = 2;\n    for (i=0 ; i<context_numBits ; i++) {\n      context_data_val = (context_data_val << 1) | (value&1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data_position = 0;\n        context_data.push(getCharFromInt(context_data_val));\n        context_data_val = 0;\n      } else {\n        context_data_position++;\n      }\n      value = value >> 1;\n    }\n\n    // Flush the last char\n    while (true) {\n      context_data_val = (context_data_val << 1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data.push(getCharFromInt(context_data_val));\n        break;\n      }\n      else context_data_position++;\n    }\n    return context_data.join('');\n  },\n\n  decompress: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });\n  },\n\n  _decompress: function (length, resetValue, getNextValue) {\n    var dictionary = [],\n        next,\n        enlargeIn = 4,\n        dictSize = 4,\n        numBits = 3,\n        entry = \"\",\n        result = [],\n        i,\n        w,\n        bits, resb, maxpower, power,\n        c,\n        data = {val:getNextValue(0), position:resetValue, index:1};\n\n    for (i = 0; i < 3; i += 1) {\n      dictionary[i] = i;\n    }\n\n    bits = 0;\n    maxpower = Math.pow(2,2);\n    power=1;\n    while (power!=maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n      bits |= (resb>0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n\n    switch (next = bits) {\n      case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 2:\n        return \"\";\n    }\n    dictionary[3] = c;\n    w = c;\n    result.push(c);\n    while (true) {\n      if (data.index > length) {\n        return \"\";\n      }\n\n      bits = 0;\n      maxpower = Math.pow(2,numBits);\n      power=1;\n      while (power!=maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n          data.position = resetValue;\n          data.val = getNextValue(data.index++);\n        }\n        bits |= (resb>0 ? 1 : 0) * power;\n        power <<= 1;\n      }\n\n      switch (c = bits) {\n        case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 2:\n          return result.join('');\n      }\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n      if (dictionary[c]) {\n        entry = dictionary[c];\n      } else {\n        if (c === dictSize) {\n          entry = w + w.charAt(0);\n        } else {\n          return null;\n        }\n      }\n      result.push(entry);\n\n      // Add w+entry[0] to the dictionary.\n      dictionary[dictSize++] = w + entry.charAt(0);\n      enlargeIn--;\n\n      w = entry;\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n    }\n  }\n};\n  return LZString;\n})();\n\nif (typeof define === 'function' && define.amd) {\n  define(function () { return LZString; });\n} else if( typeof module !== 'undefined' && module != null ) {\n  module.exports = LZString\n} else if( typeof angular !== 'undefined' && angular != null ) {\n  angular.module('LZString', [])\n  .factory('LZString', function () {\n    return LZString;\n  });\n}\n","import LZString from 'lz-string';\n\nexport class LocalStorageWrapper {\n    private prefix: string;\n    private readonly COMPRESSION_THRESHOLD = 10000;\n    private readonly COMPRESSION_MARKER = '__COMPRESSED__';\n\n    constructor(prefix = '') {\n      this.prefix = prefix;\n    }\n  \n    getKey(hash: string, url: string, targetLang: string): string {\n        // Only encode the URL, not the whole key\n        return `${hash}-${encodeURIComponent(url)}-${targetLang}`;\n    }\n\n    private shouldCompress(value: string): boolean {\n        return value.length > this.COMPRESSION_THRESHOLD;\n    }\n\n    private compress(value: string): string {\n        try {\n            return LZString.compressToBase64(value);\n        } catch (error) {\n            console.error('Compression failed:', error);\n            return value;\n        }\n    }\n\n    private decompress(value: string): string {\n        try {\n            return LZString.decompressFromBase64(value) || value;\n        } catch (error) {\n            console.error('Decompression failed:', error);\n            return value;\n        }\n    }\n\n    getItem(key: string): any {\n      const prefixedKey = this.prefix + key;\n      const item = localStorage.getItem(prefixedKey);\n      if (!item) return null;\n\n      try {\n        // Check if the item is compressed\n        const decompressed = item.startsWith(this.COMPRESSION_MARKER) \n            ? this.decompress(item.slice(this.COMPRESSION_MARKER.length)) \n            : item;\n        return JSON.parse(decompressed);\n      } catch (e) {\n        console.error('Error parsing cached item:', e);\n        return null;\n      }\n    }\n  \n    setItem(key: string, value: any): void {\n      const prefixedKey = this.prefix + key;\n      const stringified = JSON.stringify(value);\n      \n      // Use requestIdleCallback to defer compression if available\n      const storeValue = () => {\n        try {\n          const finalValue = this.shouldCompress(stringified)\n              ? `${this.COMPRESSION_MARKER}${this.compress(stringified)}`\n              : stringified;\n          localStorage.setItem(prefixedKey, finalValue);\n        } catch (error) {\n          console.error('Error storing item:', error);\n          // Fallback to storing uncompressed value\n          localStorage.setItem(prefixedKey, stringified);\n        }\n      };\n\n      if (typeof requestIdleCallback !== 'undefined') {\n        requestIdleCallback(() => storeValue());\n      } else {\n        // Fallback to setTimeout if requestIdleCallback is not available\n        setTimeout(storeValue, 0);\n      }\n    }\n  \n    removeItem(key: string): void {\n      const prefixedKey = this.prefix + key;\n      localStorage.removeItem(prefixedKey);\n    }\n  \n    clear(): void {\n      if (this.prefix) {\n        for (let key in localStorage) {\n          if (key.startsWith(this.prefix)) {\n            localStorage.removeItem(key);\n          }\n        }\n      } else {\n        localStorage.clear();\n      }\n    }\n  \n    key(index: number): string | null {\n      return localStorage.key(index);\n    }\n  \n    get length(): number {\n      return localStorage.length;\n    }\n  }\n","import { TranslationService } from '../lib/translation/index'\nimport { DocumentNavigator } from '../lib/dom'\nimport { languages } from '../constants/languages'\nimport { BATCH_SIZE, DEFAULT_CONFIG } from '../constants'\nimport type { Language, TranslationConfig } from '../types'\nimport widgetTemplate from '../templates/html/widget.html?raw'\nimport { generateHashForContent, getUserLanguage, removeEmojis } from '../utils/utils'\nimport { CACHE_PREFIX } from '../constants'\nimport { LocalStorageWrapper } from '../lib/storage/localstorage'\n// import emojiRegex from 'emoji-regex'\ninterface WidgetElements {\n    trigger: HTMLDivElement | null\n    dropdown: HTMLDivElement | null\n    searchInput: HTMLInputElement | null\n    clearSearch: HTMLDivElement | null\n    languageItems: NodeListOf<HTMLDivElement> | null\n    loadingIndicator: HTMLDivElement | null\n}\n\nexport class TranslationWidget {\n    private config: Required<TranslationConfig>\n    private translationService: TranslationService\n    private currentLanguage: string\n    private widget: HTMLDivElement\n    private elements: WidgetElements\n    private autoDetectLanguage: boolean\n    private isTranslated: boolean = false\n    private userLanguage: string\n    private isTranslating: boolean = false\n    private observer: MutationObserver | null = null\n    private translationScheduled: boolean = false\n    private scheduleTimeout: number | null = null\n    private lastTranslated: { url: string, lang: string, hash: string } | null = null\n    private static instance: TranslationWidget | null = null\n\n    constructor(publicKey: string, config: Partial<TranslationConfig> = {}) {\n        const allowedPositions = ['top-right', 'top-left', 'bottom-left', 'bottom-right'] as const;\n        let safeConfig = { ...DEFAULT_CONFIG, ...config };\n        if (safeConfig.position && !allowedPositions.includes(safeConfig.position)) {\n            console.warn(`Invalid position '${safeConfig.position}' passed to TranslationWidget. Falling back to 'top-right'.`);\n            safeConfig.position = 'top-right';\n        }\n        this.config = safeConfig as Required<TranslationConfig>;\n\n        if ( ! publicKey) {\n            throw new Error('Public key is required to initialize the translation widget')\n        }\n\n        if ( !publicKey.startsWith('sk_')) {\n            throw new Error('Please use proper api key. You can get one from https://jigsawstack.com')\n        }\n\n        this.translationService = new TranslationService(\n            publicKey,\n        )\n        this.autoDetectLanguage = this.config.autoDetectLanguage || false\n        this.currentLanguage = this.config.pageLanguage || 'en'\n        this.userLanguage = getUserLanguage()\n        this.widget = document.createElement('div')\n        this.elements = {\n            trigger: null,\n            dropdown: null,\n            searchInput: null,\n            clearSearch: null,\n            languageItems: null,\n            loadingIndicator: null\n        }\n        this.initialize()\n        TranslationWidget.instance = this\n    }\n\n    private initialize(): void {\n        if (!this.validateConfig()) return\n        \n        // Get language from URL parameter\n        const urlLang = this.getUrlParameter('lang')\n        let initialLang = this.config.pageLanguage;\n        if (urlLang) {\n            const supportedLang = languages.find(lang => lang.code === urlLang)\n            if (supportedLang) {\n                initialLang = urlLang\n            }\n        } else {\n            // Check localStorage for preferred language\n            const prefLang = localStorage.getItem('jss-pref');\n            if (prefLang && languages.find(lang => lang.code === prefLang)) {\n                initialLang = prefLang;\n            } else if (this.autoDetectLanguage) {\n                initialLang = this.userLanguage\n            }\n        }\n        this.currentLanguage = initialLang;\n        this.createWidget()\n        // Update icon if not default language\n        const triggerIcon = this.elements.trigger?.querySelector('.trigger-icon');\n        if (triggerIcon && this.currentLanguage !== this.config.pageLanguage) {\n            // Find the language name\n            const langObj = languages.find(lang => lang.code === this.currentLanguage);\n            const langName = langObj ? langObj.name : this.currentLanguage.toUpperCase();\n            triggerIcon.innerHTML = `<span class=\\\"lang-code\\\">${this.currentLanguage.toUpperCase()}</span><span class=\\\"lang-name\\\">${langName}</span>`;\n        }\n        this.setupEventListeners()\n        this.setupURLObserver()\n        this.setupContentObserver()\n    }\n\n    private getUrlParameter(name: string): string | null {\n        const urlParams = new URLSearchParams(window.location.search)\n        return urlParams.get(name)\n    }\n\n    private setupContentObserver(): void {\n        this.observer = new MutationObserver((mutations) => {\n            mutations.forEach(mutation => {\n                if (this.widget.contains(mutation.target)) {\n                    return;\n                }\n                if (mutation.type === 'characterData' ||\n                    (mutation.type === 'childList' &&\n                        Array.from(mutation.addedNodes).some(node => node.nodeType === Node.TEXT_NODE))) {\n                }\n            });\n            if (this.isTranslating) return;\n            this.scheduleTranslation();\n        });\n        this.observeBody();\n    }\n\n    private observeBody() {\n        this.observer?.observe(document.body, {\n            childList: true,\n            subtree: true,\n            attributes: true,\n            characterData: true\n        });\n    }\n\n    private onUrlChange = () => {\n        this.scheduleTranslation();\n    }\n\n    private setupURLObserver(): void {\n        const historyMethods = ['pushState', 'replaceState'] as const;\n\n        historyMethods.forEach((method) => {\n            const original = history[method];\n            history[method] = function (\n                state: any,\n                title: string,\n                url?: string | URL | null\n            ) {\n                const result = original.call(this, state, title, url);\n                window.dispatchEvent(new Event(method));\n                return result;\n            };\n            window.addEventListener(method, this.onUrlChange);\n        });\n\n        // Also listen for popstate events (browser back/forward)\n        window.addEventListener('popstate', this.onUrlChange);\n    }\n\n    private validateConfig(): boolean {\n        if (!this.translationService) {\n            console.error(\n                'Translation service is required to initialize the translation widget'\n            )\n            return false\n        }\n        return true\n    }\n\n    private createWidget(): void {\n        const currentLanguageLabel = this.getCurrentLanguageLabel()\n        \n        // Create widget element\n        this.widget = document.createElement('div')\n        this.widget.className = `translation-widget position-${this.config.position || 'top-right'}`\n        document.body.appendChild(this.widget)\n        \n        this.widget.innerHTML = this.createWidgetHTML(currentLanguageLabel)\n\n        // Cache element references\n        this.elements = {\n            trigger: this.widget.querySelector<HTMLDivElement>('.widget-trigger'),\n            dropdown: this.widget.querySelector<HTMLDivElement>('.widget-dropdown'),\n            searchInput: this.widget.querySelector<HTMLInputElement>('.search-input'),\n            clearSearch: this.widget.querySelector<HTMLDivElement>('.clear-search'),\n            languageItems: this.widget.querySelectorAll<HTMLDivElement>('.language-item'),\n            loadingIndicator: this.widget.querySelector<HTMLDivElement>('.loading-spinner')\n        }\n\n        // Initialize trigger text with fade-in class\n        const triggerSpan = this.elements.trigger?.querySelector('span')\n        if (triggerSpan) {\n            triggerSpan.classList.add('fade-in')\n        }\n    }\n\n    private getCurrentLanguageLabel(): string {\n        return (\n            languages.find(\n                (language: Language) => language.code === this.currentLanguage\n            )?.native || 'English'\n        )\n    }\n\n    private createWidgetHTML(currentLanguageLabel: string): string {\n        const languageOptions = this.createLanguageOptions()\n        const languageCount = languages.length\n        return widgetTemplate\n            .replace('{{languageOptions}}', languageOptions)\n            .replace('{{currentLanguageLabel}}', currentLanguageLabel)\n            .replace('{{languageCount}}', languageCount.toString())\n    }\n\n    private createLanguageOptions(): string {\n        const currentLang = this.currentLanguage\n        const currentLanguage = languages.find(\n            (lang: Language) => lang.code === currentLang\n        )\n        const otherLanguages = languages\n            .filter((lang: Language) => lang.code !== currentLang)\n            .sort((a: Language, b: Language) =>\n                a.native.localeCompare(b.native)\n            )\n\n        if (!currentLanguage) return ''\n\n        const createLanguageItem = (lang: Language, isSelected: boolean = false) => `\n            <div class=\"language-item ${isSelected ? 'selected' : ''}\" tabindex=\"0\" role=\"option\" aria-selected=\"${isSelected}\" data-language-code=\"${lang.code}\">\n                <div class=\"language-info\">\n                    <div class=\"language-main\">\n                        <span class=\"language-name\">${lang.name}</span>\n                        <div class=\"language-code\">${lang.code}</div>\n                    </div>\n                    <div class=\"language-details\">\n                        <span class=\"language-native\">${lang.native}</span>\n                        <span class=\"language-separator\">•</span>\n                        <span class=\"language-region\">${lang.region}</span>\n                    </div>\n                </div>\n                <svg class=\"check-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\"></path>\n                </svg>\n            </div>\n        `\n\n        return `\n            ${createLanguageItem(currentLanguage, true)}\n            ${otherLanguages.map(lang => createLanguageItem(lang)).join('')}\n        `\n    }\n\n    private async updateTriggerText(newText: string): Promise<void> {\n        const triggerSpan = this.elements.trigger?.querySelector('span')\n        if (!triggerSpan) return\n\n        // Force a reflow to ensure the animation plays\n        triggerSpan.offsetHeight\n\n        // Start fade out\n        triggerSpan.classList.remove('fade-in')\n        triggerSpan.classList.add('fade-out')\n\n        // Wait for fade out\n        await new Promise(resolve => setTimeout(resolve, 300))\n\n        // Update text\n        triggerSpan.textContent = newText\n\n        // Force a reflow\n        triggerSpan.offsetHeight\n\n        // Start fade in\n        triggerSpan.classList.remove('fade-out')\n        triggerSpan.classList.add('fade-in')\n    }\n\n\n    private getTextToTranslate(\n        node: Text,\n        parent: HTMLElement,\n        targetLang: string\n    ): string | null {\n        if (!parent.hasAttribute('data-original-text')) {\n            const originalText = node.textContent?.trim()\n            if (originalText) {\n                parent.setAttribute('data-translated-lang', targetLang)\n                parent.setAttribute('data-original-text', originalText)\n                // Store original font size if not already stored\n                if (!parent.hasAttribute('data-original-font-size')) {\n                    const computedStyle = window.getComputedStyle(parent)\n                    parent.setAttribute('data-original-font-size', computedStyle.fontSize)\n                }\n                return originalText\n            }\n        } else {\n            const textToTranslate = node.textContent?.trim()\n            if (this.currentLanguage !== 'en' && targetLang !== 'en') {\n                parent.setAttribute('data-translated-lang', targetLang)\n                return parent.getAttribute('data-original-text')\n            }\n            return textToTranslate || null\n        }\n        return null\n    }\n\n    private calculateFontSize(text: string, originalFontSize: string): string {\n        const baseFontSize = 12; // Minimum font size in pixels\n        const maxFontSize = parseInt(originalFontSize); // Maximum font size is the original size\n        const textLength = text.length;\n        \n        // Calculate font size based on text length\n        // The longer the text, the smaller the font size\n        // We use a logarithmic scale to make the reduction more gradual\n        const fontSize = Math.max(\n            baseFontSize,\n            Math.min(\n                maxFontSize,\n                maxFontSize * (1 - Math.log(textLength) / 10)\n            )\n        );\n        \n        return `${fontSize}px`;\n    }\n\n    private async translatePage(targetLang: string): Promise<void> {\n        this.isTranslating = true;\n        this.observer?.disconnect(); // Pause observing during translation\n        try {\n            const nodes = DocumentNavigator.findTranslatableContent();\n            const batches = DocumentNavigator.divideIntoGroups(nodes, BATCH_SIZE);\n\n            const cache = new LocalStorageWrapper(CACHE_PREFIX)\n            let hash = generateHashForContent(nodes)\n            // Store all nodes and their corresponding texts for each batch\n            const allBatchNodes: Node[][] = [];\n            const allBatchTexts: string[][] = [];\n\n            // Prepare batches\n            batches.forEach(batch => {\n                const textsToTranslate: string[] = [];\n                const batchNodes: Node[] = [];\n                batch.forEach((node: Node) => {\n                    if (node.nodeType !== Node.TEXT_NODE) return;\n                    const parent = node.parentElement;\n                    if (!parent) return;\n\n                    const translatedLang = parent.getAttribute('data-translated-lang')\n\n                    // Skip if parent already has data-original-text and we're not translating to English\n                    if (parent.hasAttribute('data-original-text') && targetLang === translatedLang) {\n                        return;\n                    }\n\n                    let textToTranslate = this.getTextToTranslate(\n                        node as Text,\n                        parent,\n                        targetLang\n                    );\n                    textToTranslate = removeEmojis(textToTranslate || '')\n                    if (textToTranslate.length === 0 || textToTranslate.length === 1) {\n                        return;\n                    }\n\n                    if (textToTranslate) {\n                        textsToTranslate.push(textToTranslate.trim());\n                        batchNodes.push(node);\n                    }\n                });\n                allBatchNodes.push(batchNodes);\n                allBatchTexts.push(textsToTranslate);\n            });\n\n            // Only keep non-empty batches\n            const nonEmptyBatchNodes: Node[][] = [];\n            const nonEmptyBatchTexts: string[][] = [];\n            allBatchTexts.forEach((texts, i) => {\n                if (texts.length > 0) {\n                    nonEmptyBatchTexts.push(texts);\n                    nonEmptyBatchNodes.push(allBatchNodes[i]);\n                }\n            });\n\n            const key = cache.getKey(hash, window.location.href, targetLang)\n            const cachedTranslations = cache.getItem(key)\n            if (cachedTranslations && cachedTranslations[0]) {\n                const fullTranslations = cachedTranslations[0];\n                nodes.forEach((node, idx) => {\n                    if (node.nodeType === Node.TEXT_NODE) {\n                        const parent = node.parentElement;\n                        if (parent) {\n                            const originalFontSize = parent.getAttribute('data-original-font-size') || '16px';\n                            const newFontSize = this.calculateFontSize(fullTranslations[idx], originalFontSize);\n                            parent.style.fontSize = newFontSize;\n                        }\n                        node.textContent = fullTranslations[idx];\n                    }\n                });\n                this.isTranslated = true;\n                this.updateResetButtonVisibility();\n                return;\n            }\n\n            // Send all batch requests in parallel\n            const allTranslatedTexts = await Promise.all(\n                nonEmptyBatchTexts.map(texts =>\n                    this.translationService.translateBatchText(texts, targetLang)\n                )\n            );\n\n            if (allTranslatedTexts.length === 0) {\n                this.isTranslated = true;\n                this.updateResetButtonVisibility();\n                return;\n            }\n\n            // Check if all batches failed (returned original texts)\n            const allBatchesFailed = allTranslatedTexts.every((translations, batchIndex) => {\n                const originalTexts = nonEmptyBatchTexts[batchIndex];\n                return translations.every((translation, index) => translation === originalTexts[index]);\n            });\n\n            if (allBatchesFailed) {\n                console.warn('All translations failed, not caching results');\n                this.isTranslated = true;\n                this.updateResetButtonVisibility();\n                return;\n            }\n\n            // Build a full translation array for all nodes\n            const fullTranslations: string[] = [];\n            nodes.forEach((node, nodeIdx) => {\n                const parent = node.parentElement as HTMLElement | null;\n                // Check if this node was included in the API call\n                const batchIdx = nonEmptyBatchNodes.findIndex(batch => batch.includes(node));\n                if (batchIdx !== -1) {\n                    // This node was translated in this batch\n                    const textIdx = nonEmptyBatchNodes[batchIdx].indexOf(node);\n                    const translatedText = allTranslatedTexts[batchIdx][textIdx];\n                    fullTranslations[nodeIdx] = translatedText;\n                    \n                    // Apply font size adjustment\n                    if (parent) {\n                        const originalFontSize = parent.getAttribute('data-original-font-size') || '16px';\n                        const newFontSize = this.calculateFontSize(translatedText, originalFontSize);\n                        parent.style.fontSize = newFontSize;\n                    }\n                    \n                    node.textContent = translatedText;\n                } else if (parent && parent.getAttribute('data-translated-lang') === targetLang) {\n                    // Already translated, use current text\n                    fullTranslations[nodeIdx] = node.textContent || '';\n                } else {\n                    fullTranslations[nodeIdx] = node.textContent || '';\n                }\n            });\n\n            // Save the full array in cache for this hash\n            cache.setItem(key, [fullTranslations]);\n\n            this.isTranslated = true;\n            this.updateResetButtonVisibility();\n        } finally {\n            this.isTranslating = false;\n            this.observeBody(); // Resume observing after translation\n        }\n    }\n\n    private updateResetButtonVisibility(): void {\n        const resetButton = this.widget.querySelector<HTMLElement>('.reset-option')\n        if (resetButton) {\n            resetButton.style.display = this.isTranslated ? 'flex' : 'none'\n        }\n    }\n\n\n    resetTranslations(): void {\n        if (this.observer) {\n            this.observer.disconnect();\n        }\n        const elements = document.querySelectorAll<HTMLElement>('[data-original-text]')\n        elements.forEach(element => {\n            const textNodes = Array.from(element.childNodes).filter(\n                (node): node is Text => node.nodeType === Node.TEXT_NODE\n            )\n            if (textNodes.length > 0) {\n                const originalText = element.getAttribute('data-original-text')\n                if (originalText) {\n                    textNodes[0].textContent = originalText\n                }\n            }\n            // Restore original font size\n            const originalFontSize = element.getAttribute('data-original-font-size')\n            if (originalFontSize) {\n                element.style.fontSize = originalFontSize\n            }\n            element.removeAttribute('data-original-text')\n            element.removeAttribute('data-translated-lang')\n            element.removeAttribute('data-original-font-size')\n        })\n        this.isTranslated = false;\n\n        this.currentLanguage = this.config.pageLanguage;\n        // Update lastTranslated to reflect the reset state\n        const nodes = DocumentNavigator.findTranslatableContent();\n        const hash = generateHashForContent(nodes);\n        this.lastTranslated = {\n            url: window.location.href,\n            lang: this.config.pageLanguage,\n            hash\n        };\n\n        this.updateResetButtonVisibility();\n        this.observeBody(); // Reconnect observer\n    }\n\n    private adjustDropdownPosition(): void {\n        const { dropdown, trigger } = this.elements;\n        if (!dropdown || !trigger) return;\n\n        const triggerRect = trigger.getBoundingClientRect();\n        const dropdownRect = dropdown.getBoundingClientRect();\n        const viewportWidth = window.innerWidth;\n        const viewportHeight = window.innerHeight;\n\n        // Reset any previous positioning\n        dropdown.style.top = '';\n        dropdown.style.bottom = '';\n        dropdown.style.left = '';\n        dropdown.style.right = '';\n        dropdown.style.transform = '';\n\n        // Calculate available space\n        const spaceBelow = viewportHeight - triggerRect.bottom;\n        const spaceAbove = triggerRect.top;\n        const spaceRight = viewportWidth - triggerRect.right;\n        const spaceLeft = triggerRect.left;\n\n        // Determine vertical position\n        if (spaceBelow < dropdownRect.height && spaceAbove > spaceBelow) {\n            // Position above if there's more space above\n            dropdown.style.bottom = '100%';\n            dropdown.style.top = 'auto';\n            dropdown.style.marginBottom = '0.5rem';\n            dropdown.style.marginTop = '0';\n        } else {\n            // Position below (default)\n            dropdown.style.top = '100%';\n            dropdown.style.bottom = 'auto';\n            dropdown.style.marginTop = '0.5rem';\n            dropdown.style.marginBottom = '0';\n        }\n\n        // Determine horizontal position\n        if (spaceRight < dropdownRect.width && spaceLeft > spaceRight) {\n            // Position to the left if there's more space on the left\n            dropdown.style.right = '0';\n            dropdown.style.left = 'auto';\n        } else {\n            // Position to the right (default)\n            dropdown.style.left = '0';\n            dropdown.style.right = 'auto';\n        }\n\n        // Adjust if dropdown would overflow viewport\n        const finalRect = dropdown.getBoundingClientRect();\n        \n        if (finalRect.right > viewportWidth) {\n            dropdown.style.right = '0';\n            dropdown.style.left = 'auto';\n        }\n        \n        if (finalRect.left < 0) {\n            dropdown.style.left = '0';\n            dropdown.style.right = 'auto';\n        }\n    }\n\n    private setupEventListeners(): void {\n        const {\n            trigger,\n            dropdown,\n            searchInput,\n            clearSearch,\n            languageItems,\n        } = this.elements\n\n        if (!trigger || !dropdown || !searchInput || !clearSearch || !languageItems) {\n            console.error('Failed to find required elements')\n            return\n        }\n\n        // Reset button functionality\n        const resetButton = this.widget.querySelector<HTMLElement>('.reset-option')\n        if (resetButton) {\n            resetButton.addEventListener('click', () => {\n                if (this.isTranslating) return\n                this.resetTranslations()\n                resetButton.classList.remove('active')\n                this.isTranslated = false\n                this.updateResetButtonVisibility()\n                // Reset language selector to page language\n                const languageItems = this.widget.querySelectorAll<HTMLElement>('.language-item')\n                languageItems.forEach(item => {\n                    const isSelected = item.getAttribute('data-language-code') === this.config.pageLanguage\n                    item.classList.toggle('selected', isSelected)\n                    item.setAttribute('aria-selected', isSelected.toString())\n                })\n                // Restore SVG icon\n                const triggerIcon = this.elements.trigger?.querySelector('.trigger-icon');\n                if (triggerIcon) {\n                    triggerIcon.innerHTML = this.getLanguageSVG();\n                }\n                // Close dropdown\n                dropdown.classList.remove('open')\n                trigger.setAttribute('aria-expanded', 'false')\n                // Remove has-translation class\n                const triggerContent = trigger.querySelector<HTMLDivElement>('.trigger-content')\n                if (triggerContent) triggerContent.classList.remove('has-translation')\n            })\n        }\n\n        // Initialize reset button visibility\n        this.updateResetButtonVisibility()\n\n        // Toggle dropdown\n        trigger.addEventListener('click', () => {\n            if (this.isTranslating) return\n            dropdown.classList.toggle('open')\n            const isOpen = dropdown.classList.contains('open')\n            trigger.setAttribute('aria-expanded', isOpen.toString())\n            if (isOpen) {\n                this.adjustDropdownPosition()\n                searchInput.focus()\n            }\n        })\n\n        // Adjust position on window resize\n        window.addEventListener('resize', () => {\n            if (dropdown.classList.contains('open')) {\n                this.adjustDropdownPosition()\n            }\n        })\n\n        // Close dropdown when clicking outside\n        document.addEventListener('click', (e: MouseEvent) => {\n            if (!(e.target as Element).closest('.translation-widget')) {\n                if (dropdown.classList.contains('open')) {\n                    dropdown.classList.add('closing')\n                    setTimeout(() => {\n                        dropdown.classList.remove('open', 'closing')\n                        trigger.setAttribute('aria-expanded', 'false')\n                    }, 300)\n                }\n            }\n        })\n\n        // Search functionality\n        searchInput.addEventListener('input', () => {\n            const searchTerm = searchInput.value.toLowerCase()\n            const hasValue = searchTerm.length > 0\n            clearSearch.classList.toggle('visible', hasValue)\n\n            // Filter language items\n            const items = this.widget.querySelectorAll<HTMLElement>('.language-item')\n            const noResults = this.widget.querySelector<HTMLElement>('.no-results')\n            let visibleCount = 0\n\n            /**\n             * Feature - User can actually search for languages by name, native, code, and region.\n             */\n            items.forEach(item => {\n                const name = item.querySelector('.language-name')?.textContent?.toLowerCase() || ''\n                const native = item.querySelector('.language-native')?.textContent?.toLowerCase() || ''\n                const code = item.querySelector('.language-code')?.textContent?.toLowerCase() || ''\n                const region = item.querySelector('.language-region')?.textContent?.toLowerCase() || ''\n\n                const matches = name.includes(searchTerm) ||\n                    native.includes(searchTerm) ||\n                    code.includes(searchTerm) ||\n                    region.includes(searchTerm)\n\n                item.style.display = matches ? '' : 'none'\n                if (matches) visibleCount++\n            })\n\n            // Show/hide no results message\n            if (noResults) {\n                noResults.style.display = visibleCount === 0 ? 'flex' : 'none'\n            }\n        })\n\n        clearSearch.addEventListener('click', () => {\n            searchInput.value = ''\n            clearSearch.classList.remove('visible')\n            searchInput.focus()\n\n            // Show all language items and hide no results\n            const items = this.widget.querySelectorAll<HTMLElement>('.language-item')\n            const noResults = this.widget.querySelector<HTMLElement>('.no-results')\n\n            items.forEach(item => {\n                item.style.display = ''\n            })\n\n            if (noResults) {\n                noResults.style.display = 'none'\n            }\n        })\n\n        // Language selection\n        languageItems.forEach(item => {\n            item.addEventListener('click', async () => {\n                if (this.isTranslating) return\n                // Remove selected class from all items\n                languageItems.forEach(i => {\n                    i.classList.remove('selected')\n                    i.setAttribute('aria-selected', 'false')\n                })\n\n                // Add selected class to clicked item\n                item.classList.add('selected')\n                item.setAttribute('aria-selected', 'true')\n\n                // Update trigger text\n                const langName = item.querySelector('.language-name')?.textContent\n                const langCode = item.getAttribute('data-language-code')\n\n                if (langName) {\n                    await this.updateTriggerText(langName)\n                }\n\n                // Save preference to localStorage\n                if (langCode) {\n                    localStorage.setItem('jss-pref', langCode);\n                }\n\n                // Change icon to language code and name\n                const triggerIcon = this.elements.trigger?.querySelector('.trigger-icon');\n                if (triggerIcon && langCode && langName) {\n                    triggerIcon.innerHTML = `<span class=\\\"lang-code\\\">${langCode.toUpperCase()}</span><span class=\\\"lang-name\\\">${langName}</span>`;\n                }\n\n                // Close dropdown\n                dropdown.classList.remove('open')\n                trigger.setAttribute('aria-expanded', 'false')\n\n                // Handle translation\n                const triggerContent = trigger.querySelector<HTMLDivElement>('.trigger-content')\n                if (langCode && langCode !== this.currentLanguage) {\n                    if (triggerContent) triggerContent.classList.add('has-translation')\n                    // Show loading state\n                    const triggerLoading = trigger.querySelector<HTMLDivElement>('.trigger-loading')\n                    if (triggerContent && triggerLoading) {\n                        triggerContent.style.display = 'none'\n                        triggerLoading.style.display = 'flex'\n                    }\n\n                    try {\n                        await this.translatePage(langCode)\n                        this.currentLanguage = langCode\n                    } catch (error) {\n                        console.error('Translation error:', error)\n                        alert('An error occurred during translation. Please try again.')\n                    } finally {\n                        // Hide loading state\n                        if (triggerContent && triggerLoading) {\n                            triggerLoading.style.display = 'none'\n                            triggerContent.style.display = 'flex'\n                        }\n                    }\n                } else if (triggerContent) {\n                    // If original language is selected, remove the class\n                    triggerContent.classList.remove('has-translation')\n                }\n            })\n        })\n\n        // Keyboard navigation\n        document.addEventListener('keydown', (e: KeyboardEvent) => {\n            if (!dropdown.classList.contains('open')) return\n\n            if (e.key === 'Escape') {\n                dropdown.classList.remove('open')\n                trigger.setAttribute('aria-expanded', 'false')\n                trigger.focus()\n            }\n        })\n    }\n\n    private scheduleTranslation() {\n        if (this.translationScheduled) return;\n        const currentUrl = window.location.href;\n        const currentLang = this.currentLanguage;\n        const nodes = DocumentNavigator.findTranslatableContent();\n        const hash = generateHashForContent(nodes);\n        if (this.lastTranslated && this.lastTranslated.url === currentUrl && this.lastTranslated.lang === currentLang && this.lastTranslated.hash === hash) {\n            return;\n        }\n        this.translationScheduled = true;\n        if (this.scheduleTimeout) clearTimeout(this.scheduleTimeout);\n        this.scheduleTimeout = window.setTimeout(() => {\n            this.translationScheduled = false;\n            if (this.currentLanguage !== this.config.pageLanguage) {\n                this.lastTranslated = { url: currentUrl, lang: currentLang, hash };\n                // Show loading state\n                const triggerContent = this.elements.trigger?.querySelector<HTMLDivElement>('.trigger-content')\n                const triggerLoading = this.elements.trigger?.querySelector<HTMLDivElement>('.trigger-loading')\n                if (triggerContent && triggerLoading) {\n                    triggerContent.style.display = 'none'\n                    triggerLoading.style.display = 'flex'\n                }\n                this.translatePage(this.currentLanguage)\n                    .then(() => {\n                        // Update UI to reflect the selected language\n                        const languageItems = this.widget.querySelectorAll<HTMLElement>('.language-item')\n                        languageItems.forEach(item => {\n                            const isSelected = item.getAttribute('data-language-code') === this.currentLanguage\n                            item.classList.toggle('selected', isSelected)\n                            item.setAttribute('aria-selected', isSelected.toString())\n                        })\n                    })\n                    .catch(error => {\n                        console.error('Auto-translation error:', error)\n                    })\n                    .finally(() => {\n                        if (triggerContent && triggerLoading) {\n                            triggerLoading.style.display = 'none'\n                            triggerContent.style.display = 'flex'\n                        }\n                    })\n            }\n        }, 200);\n    }\n\n    /**\n     * Public method to translate the page to a specific language\n     * @param langCode The language code to translate to\n     * @returns Promise that resolves when translation is complete\n     */\n    public async translateTo(langCode: string): Promise<void> {\n        if (this.isTranslating) {\n            console.warn('Translation already in progress')\n            return\n        }\n\n        const supportedLang = languages.find(lang => lang.code === langCode)\n        if (!supportedLang) {\n            console.error(`Unsupported language code: ${langCode}`)\n            return\n        }\n\n        if (langCode === this.currentLanguage) {\n            console.log('Page is already in the requested language')\n            return\n        }\n\n        try {\n            await this.translatePage(langCode)\n            this.currentLanguage = langCode\n            \n            // Update UI to reflect the selected language\n            const languageItems = this.widget.querySelectorAll<HTMLElement>('.language-item')\n            languageItems.forEach(item => {\n                const isSelected = item.getAttribute('data-language-code') === langCode\n                item.classList.toggle('selected', isSelected)\n                item.setAttribute('aria-selected', isSelected.toString())\n            })\n\n            // Update trigger text\n            const triggerContent = this.elements.trigger?.querySelector<HTMLDivElement>('.trigger-content')\n            if (triggerContent) {\n                triggerContent.classList.add('has-translation')\n                const triggerSpan = triggerContent.querySelector('span')\n                if (triggerSpan) {\n                    this.updateTriggerText(supportedLang.name)\n                }\n            }\n        } catch (error) {\n            console.error('Translation error:', error)\n            throw error\n        }\n    }\n\n    /**\n     * Get the current instance of TranslationWidget\n     * @returns The current TranslationWidget instance or null if not initialized\n     */\n    public static getInstance(): TranslationWidget | null {\n        return TranslationWidget.instance\n    }\n\n    // Add this helper method to the class\n    private getLanguageSVG(): string {\n        return `\\n            <svg class=\\\"languages-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                    d=\\\"M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129\\\">\\n                </path>\\n            </svg>\\n        `;\n    }\n}\n\n// Expose the translate function globally\ndeclare global {\n    interface Window {\n        translate: (langCode: string) => Promise<void>\n    }\n}\n\n// Add the global translate function\nwindow.translate = async (langCode: string): Promise<void> => {\n    const instance = TranslationWidget.getInstance()\n    if (!instance) {\n        console.error('Translation widget not initialized')\n        return\n    }\n    await instance.translateTo(langCode)\n}\n","export default \"<!-- Widget Trigger Button -->\\n<div class=\\\"widget-trigger\\\" tabindex=\\\"0\\\" role=\\\"button\\\" aria-label=\\\"Open translation menu\\\" aria-expanded=\\\"false\\\">\\n    <!-- Normal State -->\\n    <div class=\\\"trigger-content\\\">\\n        <span class=\\\"trigger-icon\\\">\\n            <svg class=\\\"languages-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                    d=\\\"M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129\\\">\\n                </path>\\n            </svg>\\n        </span>\\n    </div>\\n\\n    <!-- Loading State (hidden by default) -->\\n    <div class=\\\"trigger-loading\\\" style=\\\"display: none;\\\">\\n        <div class=\\\"loading-spinner\\\"></div>\\n    </div>\\n</div>\\n\\n<!-- Dropdown Menu -->\\n<div class=\\\"widget-dropdown\\\">\\n    <!-- Header -->\\n    <div class=\\\"dropdown-header\\\">\\n        <div class=\\\"dropdown-title\\\">\\n            <div class=\\\"title-left\\\">\\n                <svg class=\\\"languages-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                        d=\\\"M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129\\\">\\n                    </path>\\n                </svg>\\n                <span class=\\\"title-text\\\">Select Language</span>\\n            </div>\\n            <div class=\\\"language-count\\\">{{languageCount}} languages</div>\\n        </div>\\n\\n        <!-- Search Input -->\\n        <div class=\\\"search-container\\\">\\n            <svg class=\\\"search-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                    d=\\\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\\\"></path>\\n            </svg>\\n            <input type=\\\"text\\\" class=\\\"search-input\\\" placeholder=\\\"Search languages...\\\" aria-label=\\\"Search languages\\\">\\n            <svg class=\\\"clear-search\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M6 18L18 6M6 6l12 12\\\">\\n                </path>\\n            </svg>\\n        </div>\\n    </div>\\n\\n    <!-- Reset Option -->\\n    <div class=\\\"reset-option\\\" tabindex=\\\"0\\\" role=\\\"button\\\" aria-label=\\\"Reset to original language\\\">\\n        <svg class=\\\"reset-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n            <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                d=\\\"M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6\\\"></path>\\n        </svg>\\n        <div class=\\\"reset-text\\\">\\n            <span class=\\\"reset-title\\\">Original Language</span>\\n            <span class=\\\"reset-subtitle\\\">Reset translation</span>\\n        </div>\\n    </div>\\n\\n    <!-- Language List -->\\n    <div class=\\\"language-list\\\">\\n        {{languageOptions}}\\n        <div class=\\\"no-results\\\" style=\\\"display: none;\\\">\\n            <svg class=\\\"no-results-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                    d=\\\"M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\\\"></path>\\n            </svg>\\n            <span>No languages found</span>\\n        </div>\\n    </div>\\n</div>\"","import styles from './translation-widget.css?inline'\nimport { TranslationWidget } from './widget'\nimport type { TranslationConfig } from './types'\n\ndeclare global {\n    interface Window {\n        TranslationWidget: (\n            publicKey: string,\n            options: {\n                pageLanguage: string;\n                position: string;\n                autoDetectLanguage: boolean;\n            },\n            config?: TranslationConfig\n        ) => TranslationWidget\n    }\n}\n\nlet widgetInstance: TranslationWidget | undefined;\n\n\n\nconst initializeTranslationWidget = (\n    publicKey: string,\n    config?: TranslationConfig\n): TranslationWidget => {\n    if (typeof window === 'undefined') {\n        throw new Error(\n            'Translation widget can only be used in browser environment'\n        )\n    }\n\n    const initWidget = () => {\n        if (!widgetInstance) {\n            // Ensure styles are injected\n            if (!document.querySelector('style[data-translation-widget]')) {\n                const style = document.createElement('style')\n                style.setAttribute('data-translation-widget', '')\n                style.textContent = styles\n                document.head.appendChild(style)\n            }\n            widgetInstance = new TranslationWidget(publicKey, config)\n        }\n        return widgetInstance;\n    }\n\n    if (document.readyState === 'loading') {\n        window.addEventListener('DOMContentLoaded', initWidget)\n        return undefined as any; // Widget will be created after DOMContentLoaded\n    } else {\n        return initWidget()\n    }\n}\n\nexport default initializeTranslationWidget\n"],"names":["TranslationService","constructor","publicKey","__publicField","this","hits","misses","getCacheMetrics","cacheMetrics","translateBatchText","texts","targetLang","maxRetries","retryDelay","attempt","response","fetch","apiUrl","method","headers","body","JSON","stringify","text","target_language","ok","error","Error","statusText","status","result","json","Array","isArray","translated_text","console","Promise","res","setTimeout","languages","code","name","native","region","rtl","generateHashForContent","nodes","key","seed","remainder","length","bytes","h1","c1","c2","i","k1","charCodeAt","h1b","murmurhash3_32_gc","map","node","nodeType","Node","TEXT_NODE","parent","parentElement","hasAttribute","_a","getAttribute","replace","trim","_b","textContent","toLocaleLowerCase","join","toLowerCase","toString","removeEmojis","DocumentNavigator","findTranslatableContent","validator","acceptNode","NodeFilter","FILTER_REJECT","container","closest","classList","contains","FILTER_ACCEPT","navigator","document","createTreeWalker","SHOW_TEXT","results","currentNode","nextNode","textWithoutEmojis","push","divideIntoGroups","items","groupSize","groups","slice","containsTranslatableContent","tagName","getContainer","DEFAULT_CONFIG","primaryColor","pageLanguage","autoDetectLanguage","position","LZString","f","String","fromCharCode","keyStrBase64","keyStrUriSafe","baseReverseDic","getBaseValue","alphabet","character","charAt","compressToBase64","input","_compress","a","decompressFromBase64","_decompress","index","compressToUTF16","decompressFromUTF16","compressed","compressToUint8Array","uncompressed","compress","buf","Uint8Array","TotalLen","current_value","decompressFromUint8Array","decompress","forEach","c","compressToEncodedURIComponent","decompressFromEncodedURIComponent","bitsPerChar","getCharFromInt","value","ii","context_dictionary","context_dictionaryToCreate","context_c","context_wc","context_w","context_enlargeIn","context_dictSize","context_numBits","context_data","context_data_val","context_data_position","Object","prototype","hasOwnProperty","call","Math","pow","resetValue","getNextValue","w","bits","resb","maxpower","power","dictionary","enlargeIn","dictSize","numBits","entry","data","val","module","exports","angular","factory","LocalStorageWrapper","prefix","getKey","hash","url","encodeURIComponent","shouldCompress","COMPRESSION_THRESHOLD","getItem","prefixedKey","item","localStorage","decompressed","startsWith","COMPRESSION_MARKER","parse","e","setItem","stringified","storeValue","finalValue","requestIdleCallback","removeItem","clear","_TranslationWidget","config","scheduleTranslation","safeConfig","includes","warn","translationService","currentLanguage","userLanguage","userLanguages","window","find","lang","getUserLanguage","widget","createElement","elements","trigger","dropdown","searchInput","clearSearch","languageItems","loadingIndicator","initialize","instance","validateConfig","urlLang","getUrlParameter","initialLang","prefLang","createWidget","triggerIcon","querySelector","langObj","langName","toUpperCase","innerHTML","setupEventListeners","setupURLObserver","setupContentObserver","URLSearchParams","location","search","get","observer","MutationObserver","mutations","mutation","target","type","from","addedNodes","some","isTranslating","observeBody","observe","childList","subtree","attributes","characterData","original","history","state","title","dispatchEvent","Event","addEventListener","onUrlChange","currentLanguageLabel","getCurrentLanguageLabel","className","appendChild","createWidgetHTML","querySelectorAll","triggerSpan","add","language","languageOptions","createLanguageOptions","languageCount","currentLang","otherLanguages","filter","sort","b","localeCompare","createLanguageItem","isSelected","updateTriggerText","newText","offsetHeight","remove","resolve","getTextToTranslate","textToTranslate","setAttribute","originalText","computedStyle","getComputedStyle","fontSize","calculateFontSize","originalFontSize","maxFontSize","parseInt","textLength","max","min","log","translatePage","disconnect","batches","cache","allBatchNodes","allBatchTexts","batch","textsToTranslate","batchNodes","translatedLang","nonEmptyBatchNodes","nonEmptyBatchTexts","href","cachedTranslations","fullTranslations","idx","newFontSize","style","isTranslated","updateResetButtonVisibility","allTranslatedTexts","all","every","translations","batchIndex","originalTexts","translation","nodeIdx","batchIdx","findIndex","textIdx","indexOf","translatedText","resetButton","display","resetTranslations","element","textNodes","childNodes","removeAttribute","lastTranslated","adjustDropdownPosition","triggerRect","getBoundingClientRect","dropdownRect","viewportWidth","innerWidth","viewportHeight","innerHeight","top","bottom","left","right","transform","spaceBelow","spaceAbove","spaceRight","spaceLeft","height","marginBottom","marginTop","width","finalRect","toggle","getLanguageSVG","triggerContent","isOpen","focus","searchTerm","hasValue","noResults","visibleCount","_d","_c","_f","_e","_h","_g","matches","async","langCode","triggerLoading","alert","translationScheduled","currentUrl","scheduleTimeout","clearTimeout","then","catch","finally","translateTo","supportedLang","getInstance","widgetInstance","TranslationWidget","translate","initWidget","head","readyState"],"mappings":"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","x_google_ignoreList":[5]}