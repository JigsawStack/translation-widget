{"version":3,"file":"index.min.js","sources":["../src/lib/translation/index.ts","../src/constants/index.ts","../src/lib/storage/index.ts","../src/lib/dom/index.ts","../src/constants/languages.ts","../src/widget/index.ts","../src/templates/html/widget.html?raw","../src/index.ts"],"sourcesContent":["import { TranslationCache } from '../storage'\n\ninterface TranslationResponse {\n    translated_text: string | string[]\n    source_language?: string\n    detected_language?: string\n    confidence?: number\n}\n\ninterface TranslationError extends Error {\n    status?: number\n    response?: Response\n}\n\nexport class TranslationService {\n    private readonly publicKey: string\n    private readonly cache: TranslationCache\n    private readonly apiUrl = 'https://api.jigsawstack.com/v1/ai/translate'\n\n    constructor(publicKey: string, cache: TranslationCache) {\n        this.publicKey = publicKey\n        this.cache = cache\n    }\n\n    async translateBatchText(\n        texts: string[],\n        targetLang: string\n    ): Promise<string[]> {\n        try {\n            // Check cache first\n            const cachedTranslations = texts.map(text =>\n                this.cache.get(text, targetLang)\n            )\n\n            if (!cachedTranslations.includes(undefined)) {\n                return cachedTranslations as string[]\n            }\n\n            const response = await fetch(this.apiUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'x-api-key': this.publicKey,\n                },\n                body: JSON.stringify({\n                    text: texts,\n                    target_language: targetLang,\n                }),\n            })\n\n            if (!response.ok) {\n                const error: TranslationError = new Error(\n                    `Error translating text: ${response.statusText}`\n                )\n                error.status = response.status\n                error.response = response\n                throw error\n            }\n\n            const result = (await response.json()) as TranslationResponse\n            const translations = Array.isArray(result.translated_text)\n                ? result.translated_text\n                : [result.translated_text]\n\n            // Store in cache\n            texts.forEach((text, index) => {\n                if (translations[index]) {\n                    this.cache.set(text, targetLang, translations[index])\n                }\n            })\n\n            return translations\n        } catch (error) {\n            console.error('Translation error:', error)\n\n            // Log additional error details if available\n            if (error instanceof Error) {\n                const translationError = error as TranslationError\n                if (translationError.status) {\n                    console.error(`HTTP Status: ${translationError.status}`)\n                }\n            }\n\n            return texts // Return original texts on error\n        }\n    }\n}\n","export const MAX_CACHE_SIZE = 1000\nexport const BATCH_SIZE = 10\n\nexport const DEFAULT_CONFIG = {\n    primaryColor: '#2563eb',\n    pageLanguage: 'en',\n}\n","import { MAX_CACHE_SIZE } from '../../constants'\n\nexport class TranslationCache {\n    cache: Map<any, any>\n    maxSize: number\n\n    constructor(maxSize = MAX_CACHE_SIZE) {\n        this.cache = new Map()\n        this.maxSize = maxSize\n    }\n\n    getKey(text: string, targetLang: string) {\n        return `${targetLang}:${text}`\n    }\n\n    get(text: string, targetLang: string) {\n        return this.cache.get(this.getKey(text, targetLang))\n    }\n\n    set(text: string, targetLang: string, translation: string) {\n        if (this.cache.size >= this.maxSize) {\n            const firstKey = this.cache.keys().next().value\n            this.cache.delete(firstKey)\n        }\n        this.cache.set(this.getKey(text, targetLang), translation)\n    }\n}\n","// type TreeWalkerFilter = (node: Node) => number\n\ninterface NodeFilterCallback {\n    acceptNode(node: Node): number\n}\n\nexport class DOMUtils {\n    /**\n     * Gets all translatable text nodes from the document body\n     * @returns Array of Text nodes that can be translated\n     */\n    static getTranslatableNodes(): Text[] {\n        const filter: NodeFilterCallback = {\n            acceptNode(node: Node): number {\n                if (node.nodeType !== Node.TEXT_NODE) {\n                    return NodeFilter.FILTER_REJECT\n                }\n\n                const parent = (node as Text).parentElement\n                if (!parent) {\n                    return NodeFilter.FILTER_REJECT\n                }\n\n                const isExcluded =\n                    parent.tagName === 'SCRIPT' ||\n                    parent.tagName === 'STYLE' ||\n                    parent.tagName === 'CODE' ||\n                    parent.closest('.translate-widget') !== null ||\n                    parent.closest('.notranslate') !== null ||\n                    !node.textContent?.trim()\n\n                return isExcluded\n                    ? NodeFilter.FILTER_REJECT\n                    : NodeFilter.FILTER_ACCEPT\n            },\n        }\n\n        const walker = document.createTreeWalker(\n            document.body,\n            NodeFilter.SHOW_TEXT,\n            filter\n        )\n\n        const nodes: Text[] = []\n        let node: Node | null\n\n        while ((node = walker.nextNode())) {\n            if (node.nodeType === Node.TEXT_NODE) {\n                nodes.push(node as Text)\n            }\n        }\n\n        return nodes\n    }\n\n    /**\n     * Creates batches of nodes for processing\n     * @param nodes Array of nodes to batch\n     * @param batchSize Size of each batch\n     * @returns Array of node batches\n     */\n    static createBatches<T>(nodes: T[], batchSize: number): T[][] {\n        const batches: T[][] = []\n\n        for (let i = 0; i < nodes.length; i += batchSize) {\n            batches.push(nodes.slice(i, i + batchSize))\n        }\n\n        return batches\n    }\n\n    /**\n     * Checks if a node is a text node that can be translated\n     * @param node Node to check\n     * @returns Whether the node is translatable\n     */\n    static isTranslatableNode(node: Node): node is Text {\n        if (node.nodeType !== Node.TEXT_NODE) {\n            return false\n        }\n\n        const parent = node.parentElement\n        if (!parent) {\n            return false\n        }\n\n        return !(\n            parent.tagName === 'SCRIPT' ||\n            parent.tagName === 'STYLE' ||\n            parent.tagName === 'CODE' ||\n            parent.closest('.translate-widget') ||\n            parent.closest('.notranslate') ||\n            !node.textContent?.trim()\n        )\n    }\n\n    /**\n     * Gets the parent element of a node, with type checking\n     * @param node Node to get parent of\n     * @returns Parent element or null if none exists\n     */\n    static getParentElement(node: Node): HTMLElement | null {\n        return node.parentElement\n    }\n}\n","import { Language } from \"../types\"\nexport const languages: Language[] = [\n    {\n        code: 'af',\n        name: 'Afrikaans',\n        native: 'Afrikaans',\n        region: 'South Africa'\n    },\n    {\n        code: 'am',\n        name: 'Amharic',\n        native: 'አማርኛ',\n        region: 'Ethiopia'\n    },\n    {\n        code: 'ar',\n        name: 'Arabic',\n        native: 'العربية',\n        rtl: 1,\n        region: 'Saudi Arabia'\n    },\n    {\n        code: 'as',\n        name: 'Assamese',\n        native: 'অসমীয়া',\n        region: 'India'\n    },\n    {\n        code: 'az',\n        name: 'Azerbaijani',\n        native: 'Azərbaycanca / آذربايجان',\n        region: 'Azerbaijan'\n    },\n    {\n        code: 'ba',\n        name: 'Bashkir',\n        native: 'Башҡорт',\n        region: 'Russia'\n    },\n    {\n        code: 'be',\n        name: 'Belarusian',\n        native: 'Беларуская',\n        region: 'Belarus'\n    },\n    {\n        code: 'bg',\n        name: 'Bulgarian',\n        native: 'Български',\n        region: 'Bulgaria'\n    },\n    {\n        code: 'bn',\n        name: 'Bengali',\n        native: 'বাংলা',\n        region: 'Bangladesh'\n    },\n    {\n        code: 'bo',\n        name: 'Tibetan',\n        native: 'བོད་ཡིག / Bod skad',\n        region: 'Tibet'\n    },\n    {\n        code: 'br',\n        name: 'Breton',\n        native: 'Brezhoneg',\n        region: 'France'\n    },\n    {\n        code: 'bs',\n        name: 'Bosnian',\n        native: 'Bosanski',\n        region: 'Bosnia'\n    },\n    {\n        code: 'ca',\n        name: 'Catalan',\n        native: 'Català',\n        region: 'Spain'\n    },\n    {\n        code: 'ch',\n        name: 'Chamorro',\n        native: 'Chamoru',\n        region: 'Guam'\n    },\n    {\n        code: 'co',\n        name: 'Corsican',\n        native: 'Corsu',\n        region: 'France'\n    },\n    {\n        code: 'cs',\n        name: 'Czech',\n        native: 'Česky',\n        region: 'Czech Republic'\n    },\n    {\n        code: 'cy',\n        name: 'Welsh',\n        native: 'Cymraeg',\n        region: 'Wales'\n    },\n    {\n        code: 'da',\n        name: 'Danish',\n        native: 'Dansk',\n        region: 'Denmark'\n    },\n    {\n        code: 'de',\n        name: 'German',\n        native: 'Deutsch',\n        region: 'Germany'\n    },\n    {\n        code: 'dv',\n        name: 'Divehi',\n        native: 'ދިވެހިބަސް',\n        rtl: 1,\n        region: 'Maldives'\n    },\n    {\n        code: 'dz',\n        name: 'Dzongkha',\n        native: 'ཇོང་ཁ',\n        region: 'Bhutan'\n    },\n    {\n        code: 'el',\n        name: 'Greek',\n        native: 'Ελληνικά',\n        region: 'Greece'\n    },\n    {\n        code: 'en',\n        name: 'English',\n        native: 'English',\n        region: 'United Kingdom'\n    },\n    {\n        code: 'eo',\n        name: 'Esperanto',\n        native: 'Esperanto',\n        region: 'International'\n    },\n    {\n        code: 'es',\n        name: 'Spanish',\n        native: 'Español',\n        region: 'Spain'\n    },\n    {\n        code: 'et',\n        name: 'Estonian',\n        native: 'Eesti',\n        region: 'Estonia'\n    },\n    {\n        code: 'eu',\n        name: 'Basque',\n        native: 'Euskara',\n        region: 'Spain'\n    },\n    {\n        code: 'fa',\n        name: 'Persian',\n        native: 'فارسی',\n        rtl: 1,\n        region: 'Iran'\n    },\n    {\n        code: 'ff',\n        name: 'Peul',\n        native: 'Fulfulde',\n        region: 'Nigeria'\n    },\n    {\n        code: 'fi',\n        name: 'Finnish',\n        native: 'Suomi',\n        region: 'Finland'\n    },\n    {\n        code: 'fj',\n        name: 'Fijian',\n        native: 'Na Vosa Vakaviti',\n        region: 'Fiji'\n    },\n    {\n        code: 'fo',\n        name: 'Faroese',\n        native: 'Føroyskt',\n        region: 'Faroe Islands'\n    },\n    {\n        code: 'fr',\n        name: 'French',\n        native: 'Français',\n        region: 'France'\n    },\n    {\n        code: 'fy',\n        name: 'West Frisian',\n        native: 'Frysk',\n        region: 'Netherlands'\n    },\n    {\n        code: 'ga',\n        name: 'Irish',\n        native: 'Gaeilge',\n        region: 'Ireland'\n    },\n    {\n        code: 'gd',\n        name: 'Scottish Gaelic',\n        native: 'Gàidhlig',\n        region: 'Scotland'\n    },\n    {\n        code: 'gl',\n        name: 'Galician',\n        native: 'Galego',\n        region: 'Spain'\n    },\n    {\n        code: 'gn',\n        name: 'Guarani',\n        native: \"Avañe'ẽ\",\n        region: 'Paraguay'\n    },\n    {\n        code: 'gu',\n        name: 'Gujarati',\n        native: 'ગુજરાતી',\n        region: 'India'\n    },\n    {\n        code: 'gv',\n        name: 'Manx',\n        native: 'Gaelg',\n        region: 'Isle of Man'\n    },\n    {\n        code: 'ha',\n        name: 'Hausa',\n        native: 'هَوُسَ',\n        rtl: 1,\n        region: 'Nigeria'\n    },\n    {\n        code: 'he',\n        name: 'Hebrew',\n        native: 'עברית',\n        rtl: 1,\n        region: 'Israel'\n    },\n    {\n        code: 'hi',\n        name: 'Hindi',\n        native: 'हिन्दी',\n        region: 'India'\n    },\n    {\n        code: 'hr',\n        name: 'Croatian',\n        native: 'Hrvatski',\n        region: 'Croatia'\n    },\n    {\n        code: 'ht',\n        name: 'Haitian',\n        native: 'Krèyol ayisyen',\n        region: 'Haiti'\n    },\n    {\n        code: 'hu',\n        name: 'Hungarian',\n        native: 'Magyar',\n        region: 'Hungary'\n    },\n    {\n        code: 'hy',\n        name: 'Armenian',\n        native: 'Հայերեն',\n        region: 'Armenia'\n    },\n    {\n        code: 'id',\n        name: 'Indonesian',\n        native: 'Bahasa Indonesia',\n        region: 'Indonesia'\n    },\n    {\n        code: 'ig',\n        name: 'Igbo',\n        native: 'Igbo',\n        region: 'Nigeria'\n    },\n    {\n        code: 'is',\n        name: 'Icelandic',\n        native: 'Íslenska',\n        region: 'Iceland'\n    },\n    {\n        code: 'it',\n        name: 'Italian',\n        native: 'Italiano',\n        region: 'Italy'\n    },\n    {\n        code: 'iu',\n        name: 'Inuktitut',\n        native: 'ᐃᓄᒃᑎᑐᑦ',\n        region: 'Canada'\n    },\n    {\n        code: 'ja',\n        name: 'Japanese',\n        native: '日本語',\n        region: 'Japan'\n    },\n    {\n        code: 'jv',\n        name: 'Javanese',\n        native: 'Basa Jawa',\n        region: 'Indonesia'\n    },\n    {\n        code: 'ka',\n        name: 'Georgian',\n        native: 'ქართული',\n        region: 'Georgia'\n    },\n    {\n        code: 'kg',\n        name: 'Kongo',\n        native: 'KiKongo',\n        region: 'Congo'\n    },\n    {\n        code: 'ki',\n        name: 'Kikuyu',\n        native: 'Gĩkũyũ',\n        region: 'Kenya'\n    },\n    {\n        code: 'kj',\n        name: 'Kuanyama',\n        native: 'Kuanyama',\n        region: 'Namibia'\n    },\n    {\n        code: 'kk',\n        name: 'Kazakh',\n        native: 'Қазақша',\n        region: 'Kazakhstan'\n    },\n    {\n        code: 'kl',\n        name: 'Greenlandic',\n        native: 'Kalaallisut',\n        region: 'Greenland'\n    },\n    {\n        code: 'km',\n        name: 'Cambodian',\n        native: 'ភាសាខ្មែរ',\n        region: 'Cambodia'\n    },\n    {\n        code: 'kn',\n        name: 'Kannada',\n        native: 'ಕನ್ನಡ',\n        region: 'India'\n    },\n    {\n        code: 'ko',\n        name: 'Korean',\n        native: '한국어',\n        region: 'South Korea'\n    },\n    {\n        code: 'kr',\n        name: 'Kanuri',\n        native: 'Kanuri',\n        region: 'Nigeria'\n    },\n    {\n        code: 'ks',\n        name: 'Kashmiri',\n        native: 'कश्मीरी / كشميري',\n        rtl: 1,\n        region: 'India'\n    },\n    {\n        code: 'ku',\n        name: 'Kurdish',\n        native: 'Kurdî / كوردی',\n        rtl: 1,\n        region: 'Iraq'\n    },\n    {\n        code: 'kv',\n        name: 'Komi',\n        native: 'Коми',\n        region: 'Russia'\n    },\n    {\n        code: 'kw',\n        name: 'Cornish',\n        native: 'Kernewek',\n        region: 'United Kingdom'\n    },\n    {\n        code: 'ky',\n        name: 'Kirghiz',\n        native: 'Kırgızca / Кыргызча',\n        region: 'Kyrgyzstan'\n    },\n    {\n        code: 'la',\n        name: 'Latin',\n        native: 'Latina',\n        region: 'Vatican'\n    },\n    {\n        code: 'lb',\n        name: 'Luxembourgish',\n        native: 'Lëtzebuergesch',\n        region: 'Luxembourg'\n    },\n    {\n        code: 'lg',\n        name: 'Ganda',\n        native: 'Luganda',\n        region: 'Uganda'\n    },\n    {\n        code: 'li',\n        name: 'Limburgian',\n        native: 'Limburgs',\n        region: 'Netherlands'\n    },\n    {\n        code: 'ln',\n        name: 'Lingala',\n        native: 'Lingála',\n        region: 'Congo'\n    },\n    {\n        code: 'lo',\n        name: 'Laotian',\n        native: 'ລາວ / Pha xa lao',\n        region: 'Laos'\n    },\n    {\n        code: 'lt',\n        name: 'Lithuanian',\n        native: 'Lietuvių',\n        region: 'Lithuania'\n    },\n    {\n        code: 'lu',\n        name: 'Luba-Katanga',\n        native: 'Tshiluba',\n        region: 'Congo'\n    },\n    {\n        code: 'lv',\n        name: 'Latvian',\n        native: 'Latviešu',\n        region: 'Latvia'\n    },\n    {\n        code: 'mg',\n        name: 'Malagasy',\n        native: 'Malagasy',\n        region: 'Madagascar'\n    },\n    {\n        code: 'mh',\n        name: 'Marshallese',\n        native: 'Kajin Majel / Ebon',\n        region: 'Marshall Islands'\n    },\n    {\n        code: 'mi',\n        name: 'Maori',\n        native: 'Māori',\n        region: 'New Zealand'\n    },\n    {\n        code: 'mk',\n        name: 'Macedonian',\n        native: 'Македонски',\n        region: 'North Macedonia'\n    },\n    {\n        code: 'ml',\n        name: 'Malayalam',\n        native: 'മലയാളം',\n        region: 'India'\n    },\n    {\n        code: 'mn',\n        name: 'Mongolian',\n        native: 'Монгол',\n        region: 'Mongolia'\n    },\n    {\n        code: 'mo',\n        name: 'Moldovan',\n        native: 'Moldovenească',\n        region: 'Moldova'\n    },\n    {\n        code: 'mr',\n        name: 'Marathi',\n        native: 'मराठी',\n        region: 'India'\n    },\n    {\n        code: 'ms',\n        name: 'Malay',\n        native: 'Bahasa Melayu',\n        region: 'Malaysia'\n    },\n    {\n        code: 'mt',\n        name: 'Maltese',\n        native: 'bil-Malti',\n        region: 'Malta'\n    },\n    {\n        code: 'sv',\n        name: 'Swedish',\n        native: 'Svenska',\n        region: 'Sweden'\n    },\n    {\n        code: 'sw',\n        name: 'Swahili',\n        native: 'Kiswahili',\n        region: 'Tanzania'\n    },\n    {\n        code: 'ta',\n        name: 'Tamil',\n        native: 'தமிழ்',\n        region: 'India'\n    },\n    {\n        code: 'te',\n        name: 'Telugu',\n        native: 'తెలుగు',\n        region: 'India'\n    },\n    {\n        code: 'tg',\n        name: 'Tajik',\n        native: 'Тоҷикӣ',\n        region: 'Tajikistan'\n    },\n    {\n        code: 'th',\n        name: 'Thai',\n        native: 'ไทย / Phasa Thai',\n        region: 'Thailand'\n    },\n    {\n        code: 'ti',\n        name: 'Tigrinya',\n        native: 'ትግርኛ',\n        region: 'Eritrea'\n    },\n    {\n        code: 'tk',\n        name: 'Turkmen',\n        native: 'Туркмен / تركمن',\n        region: 'Turkmenistan'\n    },\n    {\n        code: 'tl',\n        name: 'Tagalog',\n        native: 'Tagalog',\n        region: 'Philippines'\n    },\n    {\n        code: 'tn',\n        name: 'Tswana',\n        native: 'Setswana',\n        region: 'Botswana'\n    },\n    {\n        code: 'to',\n        name: 'Tonga',\n        native: 'Lea Faka-Tonga',\n        region: 'Tonga'\n    },\n    {\n        code: 'tr',\n        name: 'Turkish',\n        native: 'Türkçe',\n        region: 'Turkey'\n    },\n    {\n        code: 'ts',\n        name: 'Tsonga',\n        native: 'Xitsonga',\n        region: 'South Africa'\n    },\n    {\n        code: 'tt',\n        name: 'Tatar',\n        native: 'Tatarça',\n        region: 'Russia'\n    },\n    {\n        code: 'tw',\n        name: 'Twi',\n        native: 'Twi',\n        region: 'Ghana'\n    },\n    {\n        code: 'ty',\n        name: 'Tahitian',\n        native: 'Reo Mā`ohi',\n        region: 'French Polynesia'\n    },\n    {\n        code: 'ug',\n        name: 'Uyghur',\n        native: 'Uyƣurqə / ئۇيغۇرچە',\n        region: 'China'\n    },\n    {\n        code: 'uk',\n        name: 'Ukrainian',\n        native: 'Українська',\n        region: 'Ukraine'\n    },\n    {\n        code: 'ur',\n        name: 'Urdu',\n        native: 'اردو',\n        rtl: 1,\n        region: 'Pakistan'\n    },\n    {\n        code: 'uz',\n        name: 'Uzbek',\n        native: 'Ўзбек',\n        region: 'Uzbekistan'\n    },\n    {\n        code: 've',\n        name: 'Venda',\n        native: 'Tshivenḓa',\n        region: 'South Africa'\n    },\n    {\n        code: 'vi',\n        name: 'Vietnamese',\n        native: 'Tiếng Việt',\n        region: 'Vietnam'\n    },\n    {\n        code: 'vo',\n        name: 'Volapük',\n        native: 'Volapük',\n        region: 'International'\n    },\n    {\n        code: 'wo',\n        name: 'Wolof',\n        native: 'Wollof',\n        region: 'Senegal'\n    },\n    {\n        code: 'xh',\n        name: 'Xhosa',\n        native: 'isiXhosa',\n        region: 'South Africa'\n    },\n    {\n        code: 'yi',\n        name: 'Yiddish',\n        native: 'ייִדיש',\n        rtl: 1,\n        region: 'Israel'\n    },\n    {\n        code: 'yo',\n        name: 'Yoruba',\n        native: 'Yorùbá',\n        region: 'Nigeria'\n    },\n    {\n        code: 'zh',\n        name: 'Chinese',\n        native: '中文',\n        region: 'China'\n    },\n    {\n        code: 'zu',\n        name: 'Zulu',\n        native: 'isiZulu',\n        region: 'South Africa'\n    }\n]","import { TranslationService } from '../lib/translation/index'\nimport { TranslationCache } from '../lib/storage/index'\nimport { DOMUtils } from '../lib/dom'\nimport { languages } from '../constants/languages'\nimport { DEFAULT_CONFIG, BATCH_SIZE } from '../constants'\nimport type { Language, TranslationConfig } from '../types'\nimport widgetTemplate from '../templates/html/widget.html?raw'\n\ninterface WidgetElements {\n    trigger: HTMLDivElement | null\n    dropdown: HTMLDivElement | null\n    searchInput: HTMLInputElement | null\n    clearSearch: HTMLDivElement | null\n    languageItems: NodeListOf<HTMLDivElement> | null\n    loadingIndicator: HTMLDivElement | null\n}\n\nexport class TranslationWidget {\n    private config: Required<TranslationConfig>\n    private translationService: TranslationService\n    private currentLanguage: string\n    private widget: HTMLDivElement\n    private elements: WidgetElements\n\n    constructor(publicKey: string, config: Partial<TranslationConfig> = {}) {\n        this.config = { ...DEFAULT_CONFIG, ...config }\n        this.translationService = new TranslationService(\n            publicKey,\n            new TranslationCache()\n        )\n        this.currentLanguage = this.config.pageLanguage\n        this.widget = document.createElement('div')\n        this.elements = {\n            trigger: null,\n            dropdown: null,\n            searchInput: null,\n            clearSearch: null,\n            languageItems: null,\n            loadingIndicator: null\n        }\n        this.initialize()\n    }\n\n    private initialize(): void {\n        if (!this.validateConfig()) return\n        this.createWidget()\n        this.setupEventListeners()\n    }\n\n    private validateConfig(): boolean {\n        if (!this.translationService) {\n            console.error(\n                'Translation service is required to initialize the translation widget'\n            )\n            return false\n        }\n        return true\n    }\n\n    private createWidget(): void {\n        const currentLanguageLabel = this.getCurrentLanguageLabel()\n        this.widget.className = 'translate-widget'\n        this.widget.innerHTML = this.createWidgetHTML(currentLanguageLabel)\n        document.body.appendChild(this.widget)\n\n        // Cache element references\n        this.elements = {\n            trigger: this.widget.querySelector<HTMLDivElement>('.widget-trigger'),\n            dropdown: this.widget.querySelector<HTMLDivElement>('.widget-dropdown'),\n            searchInput: this.widget.querySelector<HTMLInputElement>('.search-input'),\n            clearSearch: this.widget.querySelector<HTMLDivElement>('.clear-search'),\n            languageItems: this.widget.querySelectorAll<HTMLDivElement>('.language-item'),\n            loadingIndicator: this.widget.querySelector<HTMLDivElement>('.loading-spinner')\n        }\n\n        // Initialize trigger text with fade-in class\n        const triggerSpan = this.elements.trigger?.querySelector('span')\n        if (triggerSpan) {\n            triggerSpan.classList.add('fade-in')\n        }\n    }\n\n    private getCurrentLanguageLabel(): string {\n        return (\n            languages.find(\n                (language: Language) => language.code === this.currentLanguage\n            )?.native || 'English'\n        )\n    }\n\n    private createWidgetHTML(currentLanguageLabel: string): string {\n        const languageOptions = this.createLanguageOptions()\n        const languageCount = languages.length\n        return widgetTemplate\n            .replace('{{languageOptions}}', languageOptions)\n            .replace('{{currentLanguageLabel}}', currentLanguageLabel)\n            .replace('{{languageCount}}', languageCount.toString())\n    }\n\n    private createLanguageOptions(): string {\n        const currentLang = this.currentLanguage\n        const currentLanguage = languages.find(\n            (lang: Language) => lang.code === currentLang\n        )\n        const otherLanguages = languages\n            .filter((lang: Language) => lang.code !== currentLang)\n            .sort((a: Language, b: Language) =>\n                a.native.localeCompare(b.native)\n            )\n\n        if (!currentLanguage) return ''\n\n        const createLanguageItem = (lang: Language, isSelected: boolean = false) => `\n            <div class=\"language-item ${isSelected ? 'selected' : ''}\" tabindex=\"0\" role=\"option\" aria-selected=\"${isSelected}\" data-language-code=\"${lang.code}\">\n                <div class=\"language-info\">\n                    <div class=\"language-main\">\n                        <span class=\"language-name\">${lang.name}</span>\n                        <div class=\"language-code\">${lang.code}</div>\n                    </div>\n                    <div class=\"language-details\">\n                        <span class=\"language-native\">${lang.native}</span>\n                        <span class=\"language-separator\">•</span>\n                        <span class=\"language-region\">${lang.region}</span>\n                    </div>\n                </div>\n                <svg class=\"check-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\"></path>\n                </svg>\n            </div>\n        `\n\n        return `\n            ${createLanguageItem(currentLanguage, true)}\n            ${otherLanguages.map(lang => createLanguageItem(lang)).join('')}\n        `\n    }\n\n    private async updateTriggerText(newText: string): Promise<void> {\n        const triggerSpan = this.elements.trigger?.querySelector('span')\n        if (!triggerSpan) return\n\n        // Force a reflow to ensure the animation plays\n        triggerSpan.offsetHeight\n\n        // Start fade out\n        triggerSpan.classList.remove('fade-in')\n        triggerSpan.classList.add('fade-out')\n\n        // Wait for fade out\n        await new Promise(resolve => setTimeout(resolve, 300))\n\n        // Update text\n        triggerSpan.textContent = newText\n\n        // Force a reflow\n        triggerSpan.offsetHeight\n\n        // Start fade in\n        triggerSpan.classList.remove('fade-out')\n        triggerSpan.classList.add('fade-in')\n    }\n\n    private setupEventListeners(): void {\n        const {\n            trigger,\n            dropdown,\n            searchInput,\n            clearSearch,\n            languageItems,\n        } = this.elements\n\n        if (!trigger || !dropdown || !searchInput || !clearSearch || !languageItems) {\n            console.error('Failed to find required elements')\n            return\n        }\n\n        // Toggle dropdown\n        trigger.addEventListener('click', () => {\n            dropdown.classList.toggle('open')\n            const isOpen = dropdown.classList.contains('open')\n            trigger.setAttribute('aria-expanded', isOpen.toString())\n            if (isOpen) {\n                searchInput.focus()\n            }\n        })\n\n        // Close dropdown when clicking outside\n        document.addEventListener('click', (e: MouseEvent) => {\n            if (!(e.target as Element).closest('.translation-widget')) {\n                if (dropdown.classList.contains('open')) {\n                    dropdown.classList.add('closing')\n                    setTimeout(() => {\n                        dropdown.classList.remove('open', 'closing')\n                        trigger.setAttribute('aria-expanded', 'false')\n                    }, 300)\n                }\n            }\n        })\n\n        // Search functionality\n        searchInput.addEventListener('input', () => {\n            const searchTerm = searchInput.value.toLowerCase()\n            const hasValue = searchTerm.length > 0\n            clearSearch.classList.toggle('visible', hasValue)\n\n            // Filter language items\n            const items = this.widget.querySelectorAll<HTMLElement>('.language-item')\n            const noResults = this.widget.querySelector<HTMLElement>('.no-results')\n            let visibleCount = 0\n\n            /**\n             * Feature - User can actually search for languages by name, native, code, and region.\n             */\n            items.forEach(item => {\n                const name = item.querySelector('.language-name')?.textContent?.toLowerCase() || ''\n                const native = item.querySelector('.language-native')?.textContent?.toLowerCase() || ''\n                const code = item.querySelector('.language-code')?.textContent?.toLowerCase() || ''\n                const region = item.querySelector('.language-region')?.textContent?.toLowerCase() || ''\n\n                const matches = name.includes(searchTerm) || \n                              native.includes(searchTerm) || \n                              code.includes(searchTerm) || \n                              region.includes(searchTerm)\n\n                item.style.display = matches ? '' : 'none'\n                if (matches) visibleCount++\n            })\n\n            // Show/hide no results message\n            if (noResults) {\n                noResults.style.display = visibleCount === 0 ? 'flex' : 'none'\n            }\n        })\n\n        clearSearch.addEventListener('click', () => {\n            searchInput.value = ''\n            clearSearch.classList.remove('visible')\n            searchInput.focus()\n            \n            // Show all language items and hide no results\n            const items = this.widget.querySelectorAll<HTMLElement>('.language-item')\n            const noResults = this.widget.querySelector<HTMLElement>('.no-results')\n            \n            items.forEach(item => {\n                item.style.display = ''\n            })\n            \n            if (noResults) {\n                noResults.style.display = 'none'\n            }\n        })\n\n        // Language selection\n        languageItems.forEach(item => {\n            item.addEventListener('click', async () => {\n                // Remove selected class from all items\n                languageItems.forEach(i => {\n                    i.classList.remove('selected')\n                    i.setAttribute('aria-selected', 'false')\n                })\n\n                // Add selected class to clicked item\n                item.classList.add('selected')\n                item.setAttribute('aria-selected', 'true')\n\n                // Update trigger text\n                const langName = item.querySelector('.language-name')?.textContent\n                const langCode = item.getAttribute('data-language-code')\n\n                if (langName) {\n                    await this.updateTriggerText(langName)\n                }\n\n                // Close dropdown\n                dropdown.classList.remove('open')\n                trigger.setAttribute('aria-expanded', 'false')\n\n                // Handle translation\n                if (langCode && langCode !== this.currentLanguage) {\n                    // Show loading state\n                    const triggerContent = trigger.querySelector<HTMLDivElement>('.trigger-content')\n                    const triggerLoading = trigger.querySelector<HTMLDivElement>('.trigger-loading')\n                    \n                    if (triggerContent && triggerLoading) {\n                        triggerContent.style.display = 'none'\n                        triggerLoading.style.display = 'flex'\n                    }\n\n                    try {\n                        await this.translatePage(langCode)\n                        this.currentLanguage = langCode\n                    } catch (error) {\n                        console.error('Translation error:', error)\n                        alert('An error occurred during translation. Please try again.')\n                    } finally {\n                        // Hide loading state\n                        if (triggerContent && triggerLoading) {\n                            triggerLoading.style.display = 'none'\n                            triggerContent.style.display = 'flex'\n                        }\n                    }\n                }\n            })\n        })\n\n        // Keyboard navigation\n        document.addEventListener('keydown', (e: KeyboardEvent) => {\n            if (!dropdown.classList.contains('open')) return\n\n            if (e.key === 'Escape') {\n                dropdown.classList.remove('open')\n                trigger.setAttribute('aria-expanded', 'false')\n                trigger.focus()\n            }\n        })\n    }\n\n    private async translatePage(targetLang: string): Promise<void> {\n        const nodes = DOMUtils.getTranslatableNodes()\n        const batches = DOMUtils.createBatches(nodes, BATCH_SIZE)\n\n        await Promise.all(\n            batches.map(batch => this.processBatch(batch, targetLang))\n        )\n    }\n\n    private async processBatch(\n        batch: Node[],\n        targetLang: string\n    ): Promise<void> {\n        const textsToTranslate: string[] = []\n        const batchNodes: Node[] = []\n\n        batch.forEach((node: Node) => {\n            if (node.nodeType !== Node.TEXT_NODE) return\n\n            const parent = node.parentElement\n            if (!parent) return\n\n            const textToTranslate = this.getTextToTranslate(\n                node as Text,\n                parent,\n                targetLang\n            )\n            if (textToTranslate) {\n                textsToTranslate.push(textToTranslate)\n                batchNodes.push(node)\n            }\n        })\n\n       /**\n        * Adds incremental change state - \n        * \n        * TODO: Remove this once we have a way to load all at once.\n        * \n        * Review 1 by yoeven - it may be better to load this all at once rather than \n        * incrementally, because it may be a bit jarring for the user.\n        * \n        */\n        if (textsToTranslate.length > 0) {\n            const translatedTexts =\n                await this.translationService.translateBatchText(\n                    textsToTranslate,\n                    targetLang\n                )\n            translatedTexts.forEach((translatedText: string, index: number) => {\n                if (batchNodes[index].nodeType === Node.TEXT_NODE) {\n                    batchNodes[index].textContent = translatedText\n                }\n            })\n        }\n    }\n\n    private getTextToTranslate(\n        node: Text,\n        parent: HTMLElement,\n        targetLang: string\n    ): string | null {\n        if (!parent.hasAttribute('data-original-text')) {\n            const originalText = node.textContent?.trim()\n            if (originalText) {\n                parent.setAttribute('data-original-text', originalText)\n                return originalText\n            }\n        } else {\n            const textToTranslate = node.textContent?.trim()\n            if (this.currentLanguage !== 'en' && targetLang !== 'en') {\n                return parent.getAttribute('data-original-text')\n            }\n            return textToTranslate || null\n        }\n        return null\n    }\n}\n","export default \"<div class=\\\"translation-widget\\\">\\n    <!-- Widget Trigger Button -->\\n    <div class=\\\"widget-trigger\\\" tabindex=\\\"0\\\" role=\\\"button\\\" aria-label=\\\"Open translation menu\\\" aria-expanded=\\\"false\\\">\\n        <!-- Normal State -->\\n        <div class=\\\"trigger-content\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"12\\\" height=\\\"12\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" class=\\\"lucide lucide-globe-icon lucide-globe\\\"><circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"10\\\"/><path d=\\\"M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20\\\"/><path d=\\\"M2 12h20\\\"/></svg>\\n            <span>Translate</span>\\n        </div>\\n        \\n        <!-- Loading State (hidden by default) -->\\n        <div class=\\\"trigger-loading\\\" style=\\\"display: none;\\\">\\n            <div class=\\\"loading-spinner\\\"></div>\\n            <span>Translating...</span>\\n        </div>\\n    </div>\\n\\n    <!-- Dropdown Menu -->\\n    <div class=\\\"widget-dropdown\\\">\\n        <!-- Header -->\\n        <div class=\\\"dropdown-header\\\">\\n            <div class=\\\"dropdown-title\\\">\\n                <div class=\\\"title-left\\\">\\n                    <svg class=\\\"languages-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129\\\"></path>\\n                    </svg>\\n                    <span class=\\\"title-text\\\">Select Language</span>\\n                </div>\\n                <div class=\\\"language-count\\\">{{languageCount}} languages</div>\\n            </div>\\n            \\n            <!-- Search Input -->\\n            <div class=\\\"search-container\\\">\\n                <svg class=\\\"search-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\\\"></path>\\n                </svg>\\n                <input type=\\\"text\\\" class=\\\"search-input\\\" placeholder=\\\"Search languages...\\\" aria-label=\\\"Search languages\\\">\\n                <svg class=\\\"clear-search\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M6 18L18 6M6 6l12 12\\\"></path>\\n                </svg>\\n            </div>\\n        </div>\\n\\n        <!-- Reset Option -->\\n        <div class=\\\"reset-option\\\" tabindex=\\\"0\\\" role=\\\"button\\\" aria-label=\\\"Reset to original language\\\">\\n            <svg class=\\\"reset-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6\\\"></path>\\n            </svg>\\n            <div class=\\\"reset-text\\\">\\n                <span class=\\\"reset-title\\\">Original Language</span>\\n                <span class=\\\"reset-subtitle\\\">Reset translation</span>\\n            </div>\\n        </div>\\n\\n        <!-- Language List -->\\n        <div class=\\\"language-list\\\">\\n            {{languageOptions}}\\n            <div class=\\\"no-results\\\" style=\\\"display: none;\\\">\\n                <svg class=\\\"no-results-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\\\"></path>\\n                </svg>\\n                <span>No languages found</span>\\n            </div>\\n        </div>\\n    </div>\\n</div>\"","import { TranslationWidget } from './widget'\nimport type { TranslationConfig } from './types'\n\ndeclare global {\n    interface Window {\n        TranslationWidget: (\n            publicKey: string,\n            config?: TranslationConfig\n        ) => TranslationWidget\n    }\n}\n\nconst initializeTranslationWidget = (\n    publicKey: string,\n    config?: TranslationConfig\n): TranslationWidget => {\n    if (typeof window === 'undefined') {\n        throw new Error(\n            'Translation widget can only be used in browser environment'\n        )\n    }\n    return new TranslationWidget(publicKey, config)\n}\n\nexport default initializeTranslationWidget\n"],"names":["TranslationService","constructor","publicKey","cache","__publicField","this","translateBatchText","texts","targetLang","cachedTranslations","map","text","get","includes","response","fetch","apiUrl","method","headers","body","JSON","stringify","target_language","ok","error","Error","statusText","status","result","json","translations","Array","isArray","translated_text","forEach","index","set","console","translationError","DEFAULT_CONFIG","primaryColor","pageLanguage","TranslationCache","maxSize","Map","getKey","translation","size","firstKey","keys","next","value","delete","DOMUtils","getTranslatableNodes","filter","acceptNode","node","nodeType","Node","TEXT_NODE","NodeFilter","FILTER_REJECT","parent","parentElement","tagName","closest","node2","textContent","_a","trim","FILTER_ACCEPT","walker","document","createTreeWalker","SHOW_TEXT","nodes","nextNode","push","createBatches","batchSize","batches","i","length","slice","isTranslatableNode","getParentElement","languages","code","name","native","region","rtl","TranslationWidget","config","translationService","currentLanguage","widget","createElement","elements","trigger","dropdown","searchInput","clearSearch","languageItems","loadingIndicator","initialize","validateConfig","createWidget","setupEventListeners","currentLanguageLabel","getCurrentLanguageLabel","className","innerHTML","createWidgetHTML","appendChild","querySelector","querySelectorAll","triggerSpan","classList","add","find","language","languageOptions","createLanguageOptions","languageCount","replace","toString","currentLang","lang","otherLanguages","sort","a","b","localeCompare","createLanguageItem","isSelected","join","updateTriggerText","newText","offsetHeight","remove","Promise","resolve","setTimeout","addEventListener","toggle","isOpen","contains","setAttribute","focus","e","target","searchTerm","toLowerCase","hasValue","items","noResults","visibleCount","item","_b","_d","_c","_f","_e","_h","_g","matches","style","display","async","langName","langCode","getAttribute","triggerContent","triggerLoading","translatePage","alert","key","all","batch","processBatch","textsToTranslate","batchNodes","textToTranslate","getTextToTranslate","translatedText","hasAttribute","originalText","window"],"mappings":"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"}