{"version":3,"file":"index.min.js","sources":["../src/constants/index.ts","../src/lib/storage/cache.ts","../src/lib/translation/index.ts","../src/lib/dom/index.ts","../src/utils/utils.ts","../src/constants/languages.ts","../src/widget/index.ts","../src/templates/html/widget.html?raw","../src/index.ts"],"sourcesContent":["export const MAX_CACHE_SIZE = 1000\nexport const BATCH_SIZE = 10\n\nexport const DEFAULT_CONFIG = {\n    primaryColor: '#2563eb',\n    pageLanguage: 'en',\n    autoDetectLanguage: false\n}\n","import { MAX_CACHE_SIZE } from \"../../constants\";\nexport class Cache{\n    cache: Map<any, any>\n    maxSize: number\n\n    constructor() {\n        this.cache = new Map()\n        this.maxSize = MAX_CACHE_SIZE\n    }\n\n    getKey(text: string, targetLang: string): string {\n        return `${text}-${targetLang}`\n    }\n\n    set(text: string, targetLang: string, translation: string) {\n        const key = this.getKey(text, targetLang)\n        this.cache.set(key, translation)\n    }\n\n    get(text: string, targetLang: string): string | undefined {\n        const key = this.getKey(text, targetLang)\n        return this.cache.get(key)\n    }\n\n    clear() {\n        this.cache.clear()\n    }\n}","import { Cache } from \"../storage/cache\"\n\ninterface TranslationResponse {\n    translated_text: string | string[]\n    source_language?: string\n    detected_language?: string\n    confidence?: number\n}\n\ninterface TranslationError extends Error {\n    status?: number\n    response?: Response\n}\n\ninterface CacheMetrics {\n    hits: number\n    misses: number\n}\n\nexport class TranslationService {\n    private readonly publicKey: string\n    private readonly cache: Cache\n    private cacheMetrics: CacheMetrics = { hits: 0, misses: 0 }\n    // Todo: convert this to use sdk instead of api\n    private readonly apiUrl = 'https://api.jigsawstack.com/v1/ai/translate'\n\n    constructor(publicKey: string) {\n        this.publicKey = publicKey\n        this.cache = new Cache()\n    }\n\n    getCacheMetrics(): CacheMetrics {\n        return { ...this.cacheMetrics }\n    }\n\n    resetTranslations(): void {\n        const elements = document.querySelectorAll<HTMLElement>('[data-original-text]')\n        elements.forEach(element => {\n            const textNodes = Array.from(element.childNodes).filter(\n                (node): node is Text => node.nodeType === Node.TEXT_NODE\n            )\n            if (textNodes.length > 0) {\n                const originalText = element.getAttribute('data-original-text')\n                if (originalText) {\n                    textNodes[0].textContent = originalText\n                }\n            }\n        })\n    }\n\n    async translateBatchText(\n        texts: string[],\n        targetLang: string\n    ): Promise<string[]> {\n        try {\n            const cached_translations = texts.map(text => this.cache.get(text, targetLang))\n            \n            // Track cache hits and misses\n            cached_translations.forEach(translation => {\n                if (translation === undefined) {\n                    this.cacheMetrics.misses++\n                } else {\n                    this.cacheMetrics.hits++\n                }\n            })\n           \n            if (!cached_translations.includes(undefined)) {\n                console.log(`Cache metrics - Hits: ${this.cacheMetrics.hits}, Misses: ${this.cacheMetrics.misses}`)\n                return cached_translations as string[]\n            }\n\n            const response = await fetch(this.apiUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'x-api-key': this.publicKey,\n                },\n                body: JSON.stringify({\n                    text: texts,\n                    target_language: targetLang,\n                }),\n            })\n\n            if (!response.ok) {\n                const error: TranslationError = new Error(\n                    `Error translating text: ${response.statusText}`\n                )\n                error.status = response.status\n                error.response = response\n                throw error\n            }\n\n            const result = (await response.json()) as TranslationResponse\n            const translations = Array.isArray(result.translated_text)\n                ? result.translated_text\n                : [result.translated_text]\n\n            texts.forEach((text, index) => {\n                if(translations[index]) {\n                    this.cache.set(text, targetLang, translations[index])\n                }\n            })\n\n            console.log(`Cache metrics - Hits: ${this.cacheMetrics.hits}, Misses: ${this.cacheMetrics.misses}`)\n            return translations\n        } catch (error) {\n            console.error('Translation error:', error)\n\n            // Log additional error details if available\n            if (error instanceof Error) {\n                const translationError = error as TranslationError\n                if (translationError.status) {\n                    console.error(`HTTP Status: ${translationError.status}`)\n                }\n            }\n\n            return texts // Return original texts on error\n        }\n    }\n\n}\n","// type TreeWalkerFilter = (node: Node) => number\n\nimport { generateHashForContent } from \"../../utils/utils\"\n\ninterface NodeProcessor {\n    acceptNode(node: Node): number\n}\n\nexport class DocumentNavigator {\n    /**\n     * Retrieves text nodes eligible for translation from the document\n     * @returns Collection of text nodes ready for translation\n     */\n    static findTranslatableContent(): Text[] {\n        const validator: NodeProcessor = {\n            acceptNode(node: Node): number {\n                if (node.nodeType !== Node.TEXT_NODE) {\n                    return NodeFilter.FILTER_REJECT\n                }\n\n                const container = (node as Text).parentElement\n                if (!container) {\n                    return NodeFilter.FILTER_REJECT\n                }\n\n                const shouldSkip =\n                    container.tagName === 'SCRIPT' ||\n                    container.tagName === 'STYLE' ||\n                    container.tagName === 'CODE' ||\n                    container.closest('.translate-widget') !== null ||\n                    container.closest('.notranslate') !== null ||\n                    !node.textContent?.trim()\n\n                return shouldSkip\n                    ? NodeFilter.FILTER_REJECT\n                    : NodeFilter.FILTER_ACCEPT\n            }\n        }\n\n        const navigator = document.createTreeWalker(\n            document.body,\n            NodeFilter.SHOW_TEXT,\n            validator\n        )\n\n        const results: Text[] = []\n        let currentNode: Node | null\n\n        while ((currentNode = navigator.nextNode())) {\n            if (currentNode.nodeType === Node.TEXT_NODE) {\n                results.push(currentNode as Text)\n            }\n        }\n\n        // generate the hash for the content\n        const hash = generateHashForContent(results.join(''))\n        console.log(hash)\n        return results\n    }\n\n    /**\n     * Divides a collection into smaller groups\n     * @param items Collection to divide\n     * @param groupSize Maximum size of each group\n     * @returns Array of item groups\n     */\n    static divideIntoGroups<T>(items: T[], groupSize: number): T[][] {\n        const groups: T[][] = []\n\n        for (let i = 0; i < items.length; i += groupSize) {\n            groups.push(items.slice(i, i + groupSize))\n        }\n\n        return groups\n    }\n\n    /**\n     * Determines if a node contains translatable text\n     * @param node Node to evaluate\n     * @returns Whether the node contains translatable content\n     */\n    static containsTranslatableContent(node: Node): node is Text {\n        if (node.nodeType !== Node.TEXT_NODE) {\n            return false\n        }\n\n        const container = node.parentElement\n        if (!container) {\n            return false\n        }\n\n        return !(\n            container.tagName === 'SCRIPT' ||\n            container.tagName === 'STYLE' ||\n            container.tagName === 'CODE' ||\n            container.closest('.translate-widget') ||\n            container.closest('.notranslate') ||\n            !node.textContent?.trim()\n        )\n    }\n\n    /**\n     * Retrieves the containing element of a node\n     * @param node Node to find container for\n     * @returns Containing element or null if none exists\n     */\n    static getContainer(node: Node): HTMLElement | null {\n        return node.parentElement\n    }\n}\n","function generateHashForContent(content: string): string {\n    return murmurhash3_32_gc(content, 42).toString(16)\n}\n\nfunction murmurhash3_32_gc(key: string, seed: number) {\n    let remainder = key.length & 3, bytes = key.length - remainder;\n    let h1 = seed, c1 = 0xcc9e2d51, c2 = 0x1b873593;\n    let i = 0;\n\n    while (i < bytes) {\n        let k1 =\n            (key.charCodeAt(i) & 0xff) |\n            ((key.charCodeAt(++i) & 0xff) << 8) |\n            ((key.charCodeAt(++i) & 0xff) << 16) |\n            ((key.charCodeAt(++i) & 0xff) << 24);\n        ++i;\n\n        k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;\n        k1 = (k1 << 15) | (k1 >>> 17);\n        k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;\n\n        h1 ^= k1;\n        h1 = (h1 << 13) | (h1 >>> 19);\n        const h1b = (((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16)) & 0xffffffff;\n        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));\n    }\n\n    let k1 = 0;\n\n    switch (remainder) {\n        //@ts-expect-error - this is a valid case\n        case 3: k1 ^= key.charCodeAt(i + 2) << 16;\n        //@ts-expect-error - this is a valid case\n        case 2: k1 ^= key.charCodeAt(i + 1) << 8;\n        case 1:\n            k1 ^= key.charCodeAt(i);\n            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;\n            k1 = (k1 << 15) | (k1 >>> 17);\n            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;\n            h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n    h1 ^= h1 >>> 16;\n    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;\n    h1 ^= h1 >>> 13;\n    h1 = (((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16)) & 0xffffffff;\n    h1 ^= h1 >>> 16;\n\n    return h1 >>> 0;\n}\n\nexport { generateHashForContent }","import { Language } from \"../types\"\nexport const languages: Language[] = [\n    {\n        code: 'af',\n        name: 'Afrikaans',\n        native: 'Afrikaans',\n        region: 'South Africa'\n    },\n    {\n        code: 'am',\n        name: 'Amharic',\n        native: 'አማርኛ',\n        region: 'Ethiopia'\n    },\n    {\n        code: 'ar',\n        name: 'Arabic',\n        native: 'العربية',\n        rtl: 1,\n        region: 'Saudi Arabia'\n    },\n    {\n        code: 'as',\n        name: 'Assamese',\n        native: 'অসমীয়া',\n        region: 'India'\n    },\n    {\n        code: 'az',\n        name: 'Azerbaijani',\n        native: 'Azərbaycanca / آذربايجان',\n        region: 'Azerbaijan'\n    },\n    {\n        code: 'ba',\n        name: 'Bashkir',\n        native: 'Башҡорт',\n        region: 'Russia'\n    },\n    {\n        code: 'be',\n        name: 'Belarusian',\n        native: 'Беларуская',\n        region: 'Belarus'\n    },\n    {\n        code: 'bg',\n        name: 'Bulgarian',\n        native: 'Български',\n        region: 'Bulgaria'\n    },\n    {\n        code: 'bn',\n        name: 'Bengali',\n        native: 'বাংলা',\n        region: 'Bangladesh'\n    },\n    {\n        code: 'bo',\n        name: 'Tibetan',\n        native: 'བོད་ཡིག / Bod skad',\n        region: 'Tibet'\n    },\n    {\n        code: 'br',\n        name: 'Breton',\n        native: 'Brezhoneg',\n        region: 'France'\n    },\n    {\n        code: 'bs',\n        name: 'Bosnian',\n        native: 'Bosanski',\n        region: 'Bosnia'\n    },\n    {\n        code: 'ca',\n        name: 'Catalan',\n        native: 'Català',\n        region: 'Spain'\n    },\n    {\n        code: 'ch',\n        name: 'Chamorro',\n        native: 'Chamoru',\n        region: 'Guam'\n    },\n    {\n        code: 'co',\n        name: 'Corsican',\n        native: 'Corsu',\n        region: 'France'\n    },\n    {\n        code: 'cs',\n        name: 'Czech',\n        native: 'Česky',\n        region: 'Czech Republic'\n    },\n    {\n        code: 'cy',\n        name: 'Welsh',\n        native: 'Cymraeg',\n        region: 'Wales'\n    },\n    {\n        code: 'da',\n        name: 'Danish',\n        native: 'Dansk',\n        region: 'Denmark'\n    },\n    {\n        code: 'de',\n        name: 'German',\n        native: 'Deutsch',\n        region: 'Germany'\n    },\n    {\n        code: 'dv',\n        name: 'Divehi',\n        native: 'ދިވެހިބަސް',\n        rtl: 1,\n        region: 'Maldives'\n    },\n    {\n        code: 'dz',\n        name: 'Dzongkha',\n        native: 'ཇོང་ཁ',\n        region: 'Bhutan'\n    },\n    {\n        code: 'el',\n        name: 'Greek',\n        native: 'Ελληνικά',\n        region: 'Greece'\n    },\n    {\n        code: 'en',\n        name: 'English',\n        native: 'English',\n        region: 'United Kingdom'\n    },\n    {\n        code: 'eo',\n        name: 'Esperanto',\n        native: 'Esperanto',\n        region: 'International'\n    },\n    {\n        code: 'es',\n        name: 'Spanish',\n        native: 'Español',\n        region: 'Spain'\n    },\n    {\n        code: 'et',\n        name: 'Estonian',\n        native: 'Eesti',\n        region: 'Estonia'\n    },\n    {\n        code: 'eu',\n        name: 'Basque',\n        native: 'Euskara',\n        region: 'Spain'\n    },\n    {\n        code: 'fa',\n        name: 'Persian',\n        native: 'فارسی',\n        rtl: 1,\n        region: 'Iran'\n    },\n    {\n        code: 'ff',\n        name: 'Peul',\n        native: 'Fulfulde',\n        region: 'Nigeria'\n    },\n    {\n        code: 'fi',\n        name: 'Finnish',\n        native: 'Suomi',\n        region: 'Finland'\n    },\n    {\n        code: 'fj',\n        name: 'Fijian',\n        native: 'Na Vosa Vakaviti',\n        region: 'Fiji'\n    },\n    {\n        code: 'fo',\n        name: 'Faroese',\n        native: 'Føroyskt',\n        region: 'Faroe Islands'\n    },\n    {\n        code: 'fr',\n        name: 'French',\n        native: 'Français',\n        region: 'France'\n    },\n    {\n        code: 'fy',\n        name: 'West Frisian',\n        native: 'Frysk',\n        region: 'Netherlands'\n    },\n    {\n        code: 'ga',\n        name: 'Irish',\n        native: 'Gaeilge',\n        region: 'Ireland'\n    },\n    {\n        code: 'gd',\n        name: 'Scottish Gaelic',\n        native: 'Gàidhlig',\n        region: 'Scotland'\n    },\n    {\n        code: 'gl',\n        name: 'Galician',\n        native: 'Galego',\n        region: 'Spain'\n    },\n    {\n        code: 'gn',\n        name: 'Guarani',\n        native: \"Avañe'ẽ\",\n        region: 'Paraguay'\n    },\n    {\n        code: 'gu',\n        name: 'Gujarati',\n        native: 'ગુજરાતી',\n        region: 'India'\n    },\n    {\n        code: 'gv',\n        name: 'Manx',\n        native: 'Gaelg',\n        region: 'Isle of Man'\n    },\n    {\n        code: 'ha',\n        name: 'Hausa',\n        native: 'هَوُسَ',\n        rtl: 1,\n        region: 'Nigeria'\n    },\n    {\n        code: 'he',\n        name: 'Hebrew',\n        native: 'עברית',\n        rtl: 1,\n        region: 'Israel'\n    },\n    {\n        code: 'hi',\n        name: 'Hindi',\n        native: 'हिन्दी',\n        region: 'India'\n    },\n    {\n        code: 'hr',\n        name: 'Croatian',\n        native: 'Hrvatski',\n        region: 'Croatia'\n    },\n    {\n        code: 'ht',\n        name: 'Haitian',\n        native: 'Krèyol ayisyen',\n        region: 'Haiti'\n    },\n    {\n        code: 'hu',\n        name: 'Hungarian',\n        native: 'Magyar',\n        region: 'Hungary'\n    },\n    {\n        code: 'hy',\n        name: 'Armenian',\n        native: 'Հայերեն',\n        region: 'Armenia'\n    },\n    {\n        code: 'id',\n        name: 'Indonesian',\n        native: 'Bahasa Indonesia',\n        region: 'Indonesia'\n    },\n    {\n        code: 'ig',\n        name: 'Igbo',\n        native: 'Igbo',\n        region: 'Nigeria'\n    },\n    {\n        code: 'is',\n        name: 'Icelandic',\n        native: 'Íslenska',\n        region: 'Iceland'\n    },\n    {\n        code: 'it',\n        name: 'Italian',\n        native: 'Italiano',\n        region: 'Italy'\n    },\n    {\n        code: 'iu',\n        name: 'Inuktitut',\n        native: 'ᐃᓄᒃᑎᑐᑦ',\n        region: 'Canada'\n    },\n    {\n        code: 'ja',\n        name: 'Japanese',\n        native: '日本語',\n        region: 'Japan'\n    },\n    {\n        code: 'jv',\n        name: 'Javanese',\n        native: 'Basa Jawa',\n        region: 'Indonesia'\n    },\n    {\n        code: 'ka',\n        name: 'Georgian',\n        native: 'ქართული',\n        region: 'Georgia'\n    },\n    {\n        code: 'kg',\n        name: 'Kongo',\n        native: 'KiKongo',\n        region: 'Congo'\n    },\n    {\n        code: 'ki',\n        name: 'Kikuyu',\n        native: 'Gĩkũyũ',\n        region: 'Kenya'\n    },\n    {\n        code: 'kj',\n        name: 'Kuanyama',\n        native: 'Kuanyama',\n        region: 'Namibia'\n    },\n    {\n        code: 'kk',\n        name: 'Kazakh',\n        native: 'Қазақша',\n        region: 'Kazakhstan'\n    },\n    {\n        code: 'kl',\n        name: 'Greenlandic',\n        native: 'Kalaallisut',\n        region: 'Greenland'\n    },\n    {\n        code: 'km',\n        name: 'Cambodian',\n        native: 'ភាសាខ្មែរ',\n        region: 'Cambodia'\n    },\n    {\n        code: 'kn',\n        name: 'Kannada',\n        native: 'ಕನ್ನಡ',\n        region: 'India'\n    },\n    {\n        code: 'ko',\n        name: 'Korean',\n        native: '한국어',\n        region: 'South Korea'\n    },\n    {\n        code: 'kr',\n        name: 'Kanuri',\n        native: 'Kanuri',\n        region: 'Nigeria'\n    },\n    {\n        code: 'ks',\n        name: 'Kashmiri',\n        native: 'कश्मीरी / كشميري',\n        rtl: 1,\n        region: 'India'\n    },\n    {\n        code: 'ku',\n        name: 'Kurdish',\n        native: 'Kurdî / كوردی',\n        rtl: 1,\n        region: 'Iraq'\n    },\n    {\n        code: 'kv',\n        name: 'Komi',\n        native: 'Коми',\n        region: 'Russia'\n    },\n    {\n        code: 'kw',\n        name: 'Cornish',\n        native: 'Kernewek',\n        region: 'United Kingdom'\n    },\n    {\n        code: 'ky',\n        name: 'Kirghiz',\n        native: 'Kırgızca / Кыргызча',\n        region: 'Kyrgyzstan'\n    },\n    {\n        code: 'la',\n        name: 'Latin',\n        native: 'Latina',\n        region: 'Vatican'\n    },\n    {\n        code: 'lb',\n        name: 'Luxembourgish',\n        native: 'Lëtzebuergesch',\n        region: 'Luxembourg'\n    },\n    {\n        code: 'lg',\n        name: 'Ganda',\n        native: 'Luganda',\n        region: 'Uganda'\n    },\n    {\n        code: 'li',\n        name: 'Limburgian',\n        native: 'Limburgs',\n        region: 'Netherlands'\n    },\n    {\n        code: 'ln',\n        name: 'Lingala',\n        native: 'Lingála',\n        region: 'Congo'\n    },\n    {\n        code: 'lo',\n        name: 'Laotian',\n        native: 'ລາວ / Pha xa lao',\n        region: 'Laos'\n    },\n    {\n        code: 'lt',\n        name: 'Lithuanian',\n        native: 'Lietuvių',\n        region: 'Lithuania'\n    },\n    {\n        code: 'lu',\n        name: 'Luba-Katanga',\n        native: 'Tshiluba',\n        region: 'Congo'\n    },\n    {\n        code: 'lv',\n        name: 'Latvian',\n        native: 'Latviešu',\n        region: 'Latvia'\n    },\n    {\n        code: 'mg',\n        name: 'Malagasy',\n        native: 'Malagasy',\n        region: 'Madagascar'\n    },\n    {\n        code: 'mh',\n        name: 'Marshallese',\n        native: 'Kajin Majel / Ebon',\n        region: 'Marshall Islands'\n    },\n    {\n        code: 'mi',\n        name: 'Maori',\n        native: 'Māori',\n        region: 'New Zealand'\n    },\n    {\n        code: 'mk',\n        name: 'Macedonian',\n        native: 'Македонски',\n        region: 'North Macedonia'\n    },\n    {\n        code: 'ml',\n        name: 'Malayalam',\n        native: 'മലയാളം',\n        region: 'India'\n    },\n    {\n        code: 'mn',\n        name: 'Mongolian',\n        native: 'Монгол',\n        region: 'Mongolia'\n    },\n    {\n        code: 'mo',\n        name: 'Moldovan',\n        native: 'Moldovenească',\n        region: 'Moldova'\n    },\n    {\n        code: 'mr',\n        name: 'Marathi',\n        native: 'मराठी',\n        region: 'India'\n    },\n    {\n        code: 'ms',\n        name: 'Malay',\n        native: 'Bahasa Melayu',\n        region: 'Malaysia'\n    },\n    {\n        code: 'mt',\n        name: 'Maltese',\n        native: 'bil-Malti',\n        region: 'Malta'\n    },\n    {\n        code: 'sv',\n        name: 'Swedish',\n        native: 'Svenska',\n        region: 'Sweden'\n    },\n    {\n        code: 'sw',\n        name: 'Swahili',\n        native: 'Kiswahili',\n        region: 'Tanzania'\n    },\n    {\n        code: 'ta',\n        name: 'Tamil',\n        native: 'தமிழ்',\n        region: 'India'\n    },\n    {\n        code: 'te',\n        name: 'Telugu',\n        native: 'తెలుగు',\n        region: 'India'\n    },\n    {\n        code: 'tg',\n        name: 'Tajik',\n        native: 'Тоҷикӣ',\n        region: 'Tajikistan'\n    },\n    {\n        code: 'th',\n        name: 'Thai',\n        native: 'ไทย / Phasa Thai',\n        region: 'Thailand'\n    },\n    {\n        code: 'ti',\n        name: 'Tigrinya',\n        native: 'ትግርኛ',\n        region: 'Eritrea'\n    },\n    {\n        code: 'tk',\n        name: 'Turkmen',\n        native: 'Туркмен / تركمن',\n        region: 'Turkmenistan'\n    },\n    {\n        code: 'tl',\n        name: 'Tagalog',\n        native: 'Tagalog',\n        region: 'Philippines'\n    },\n    {\n        code: 'tn',\n        name: 'Tswana',\n        native: 'Setswana',\n        region: 'Botswana'\n    },\n    {\n        code: 'to',\n        name: 'Tonga',\n        native: 'Lea Faka-Tonga',\n        region: 'Tonga'\n    },\n    {\n        code: 'tr',\n        name: 'Turkish',\n        native: 'Türkçe',\n        region: 'Turkey'\n    },\n    {\n        code: 'ts',\n        name: 'Tsonga',\n        native: 'Xitsonga',\n        region: 'South Africa'\n    },\n    {\n        code: 'tt',\n        name: 'Tatar',\n        native: 'Tatarça',\n        region: 'Russia'\n    },\n    {\n        code: 'tw',\n        name: 'Twi',\n        native: 'Twi',\n        region: 'Ghana'\n    },\n    {\n        code: 'ty',\n        name: 'Tahitian',\n        native: 'Reo Mā`ohi',\n        region: 'French Polynesia'\n    },\n    {\n        code: 'ug',\n        name: 'Uyghur',\n        native: 'Uyƣurqə / ئۇيغۇرچە',\n        region: 'China'\n    },\n    {\n        code: 'uk',\n        name: 'Ukrainian',\n        native: 'Українська',\n        region: 'Ukraine'\n    },\n    {\n        code: 'ur',\n        name: 'Urdu',\n        native: 'اردو',\n        rtl: 1,\n        region: 'Pakistan'\n    },\n    {\n        code: 'uz',\n        name: 'Uzbek',\n        native: 'Ўзбек',\n        region: 'Uzbekistan'\n    },\n    {\n        code: 've',\n        name: 'Venda',\n        native: 'Tshivenḓa',\n        region: 'South Africa'\n    },\n    {\n        code: 'vi',\n        name: 'Vietnamese',\n        native: 'Tiếng Việt',\n        region: 'Vietnam'\n    },\n    {\n        code: 'vo',\n        name: 'Volapük',\n        native: 'Volapük',\n        region: 'International'\n    },\n    {\n        code: 'wo',\n        name: 'Wolof',\n        native: 'Wollof',\n        region: 'Senegal'\n    },\n    {\n        code: 'xh',\n        name: 'Xhosa',\n        native: 'isiXhosa',\n        region: 'South Africa'\n    },\n    {\n        code: 'yi',\n        name: 'Yiddish',\n        native: 'ייִדיש',\n        rtl: 1,\n        region: 'Israel'\n    },\n    {\n        code: 'yo',\n        name: 'Yoruba',\n        native: 'Yorùbá',\n        region: 'Nigeria'\n    },\n    {\n        code: 'zh',\n        name: 'Chinese',\n        native: '中文',\n        region: 'China'\n    },\n    {\n        code: 'zu',\n        name: 'Zulu',\n        native: 'isiZulu',\n        region: 'South Africa'\n    }\n]","import { TranslationService } from '../lib/translation/index'\nimport { DocumentNavigator } from '../lib/dom'\nimport { languages } from '../constants/languages'\nimport { BATCH_SIZE, DEFAULT_CONFIG } from '../constants'\nimport type { Language, TranslationConfig } from '../types'\nimport widgetTemplate from '../templates/html/widget.html?raw'\n\ninterface WidgetElements {\n    trigger: HTMLDivElement | null\n    dropdown: HTMLDivElement | null\n    searchInput: HTMLInputElement | null\n    clearSearch: HTMLDivElement | null\n    languageItems: NodeListOf<HTMLDivElement> | null\n    loadingIndicator: HTMLDivElement | null\n}\n\nexport class TranslationWidget {\n    private config: Required<TranslationConfig>\n    private translationService: TranslationService\n    private currentLanguage: string\n    private widget: HTMLDivElement\n    private elements: WidgetElements\n    private autoDetectLanguage: boolean\n    private isTranslated: boolean = false\n    private isTranslating: boolean = false\n    \n    constructor(publicKey: string, config: Partial<TranslationConfig> = {}) {\n        this.config = { ...DEFAULT_CONFIG, ...config }\n        this.translationService = new TranslationService(\n            publicKey,\n        )\n        this.autoDetectLanguage = this.config.autoDetectLanguage || false\n        this.currentLanguage = this.config.pageLanguage\n        this.widget = document.createElement('div')\n        this.elements = {\n            trigger: null,\n            dropdown: null,\n            searchInput: null,\n            clearSearch: null,\n            languageItems: null,\n            loadingIndicator: null\n        }\n        this.initialize()\n    }\n\n    private initialize(): void {\n        if (!this.validateConfig()) return\n        if (this.autoDetectLanguage) {\n        }\n        this.createWidget()\n        this.setupEventListeners()\n    }\n\n\n\n    private validateConfig(): boolean {\n        if (!this.translationService) {\n            console.error(\n                'Translation service is required to initialize the translation widget'\n            )\n            return false\n        }\n        return true\n    }\n\n    private createWidget(): void {\n        const currentLanguageLabel = this.getCurrentLanguageLabel()\n        this.widget.className = 'translate-widget'\n        this.widget.innerHTML = this.createWidgetHTML(currentLanguageLabel)\n        document.body.appendChild(this.widget)\n\n        // Cache element references\n        this.elements = {\n            trigger: this.widget.querySelector<HTMLDivElement>('.widget-trigger'),\n            dropdown: this.widget.querySelector<HTMLDivElement>('.widget-dropdown'),\n            searchInput: this.widget.querySelector<HTMLInputElement>('.search-input'),\n            clearSearch: this.widget.querySelector<HTMLDivElement>('.clear-search'),\n            languageItems: this.widget.querySelectorAll<HTMLDivElement>('.language-item'),\n            loadingIndicator: this.widget.querySelector<HTMLDivElement>('.loading-spinner')\n        }\n\n        // Initialize trigger text with fade-in class\n        const triggerSpan = this.elements.trigger?.querySelector('span')\n        if (triggerSpan) {\n            triggerSpan.classList.add('fade-in')\n        }\n    }\n\n    private getCurrentLanguageLabel(): string {\n        return (\n            languages.find(\n                (language: Language) => language.code === this.currentLanguage\n            )?.native || 'English'\n        )\n    }\n\n    private createWidgetHTML(currentLanguageLabel: string): string {\n        const languageOptions = this.createLanguageOptions()\n        const languageCount = languages.length\n        return widgetTemplate\n            .replace('{{languageOptions}}', languageOptions)\n            .replace('{{currentLanguageLabel}}', currentLanguageLabel)\n            .replace('{{languageCount}}', languageCount.toString())\n    }\n\n    private createLanguageOptions(): string {\n        const currentLang = this.currentLanguage\n        const currentLanguage = languages.find(\n            (lang: Language) => lang.code === currentLang\n        )\n        const otherLanguages = languages\n            .filter((lang: Language) => lang.code !== currentLang)\n            .sort((a: Language, b: Language) =>\n                a.native.localeCompare(b.native)\n            )\n\n        if (!currentLanguage) return ''\n\n        const createLanguageItem = (lang: Language, isSelected: boolean = false) => `\n            <div class=\"language-item ${isSelected ? 'selected' : ''}\" tabindex=\"0\" role=\"option\" aria-selected=\"${isSelected}\" data-language-code=\"${lang.code}\">\n                <div class=\"language-info\">\n                    <div class=\"language-main\">\n                        <span class=\"language-name\">${lang.name}</span>\n                        <div class=\"language-code\">${lang.code}</div>\n                    </div>\n                    <div class=\"language-details\">\n                        <span class=\"language-native\">${lang.native}</span>\n                        <span class=\"language-separator\">•</span>\n                        <span class=\"language-region\">${lang.region}</span>\n                    </div>\n                </div>\n                <svg class=\"check-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\"></path>\n                </svg>\n            </div>\n        `\n\n        return `\n            ${createLanguageItem(currentLanguage, true)}\n            ${otherLanguages.map(lang => createLanguageItem(lang)).join('')}\n        `\n    }\n\n    private async updateTriggerText(newText: string): Promise<void> {\n        const triggerSpan = this.elements.trigger?.querySelector('span')\n        if (!triggerSpan) return\n\n        // Force a reflow to ensure the animation plays\n        triggerSpan.offsetHeight\n\n        // Start fade out\n        triggerSpan.classList.remove('fade-in')\n        triggerSpan.classList.add('fade-out')\n\n        // Wait for fade out\n        await new Promise(resolve => setTimeout(resolve, 300))\n\n        // Update text\n        triggerSpan.textContent = newText\n\n        // Force a reflow\n        triggerSpan.offsetHeight\n\n        // Start fade in\n        triggerSpan.classList.remove('fade-out')\n        triggerSpan.classList.add('fade-in')\n    }\n\n    private setTranslatingState(isTranslating: boolean): void {\n        this.isTranslating = isTranslating\n        const trigger = this.elements.trigger\n        const dropdown = this.elements.dropdown\n        const languageItems = this.widget.querySelectorAll<HTMLElement>('.language-item')\n        const resetButton = this.widget.querySelector<HTMLElement>('.reset-option')\n        const searchInput = this.elements.searchInput\n\n        if (trigger) {\n            trigger.style.pointerEvents = isTranslating ? 'none' : 'auto'\n            trigger.style.opacity = isTranslating ? '0.7' : '1'\n        }\n\n        if (dropdown) {\n            dropdown.style.pointerEvents = isTranslating ? 'none' : 'auto'\n        }\n\n        if (searchInput) {\n            searchInput.disabled = isTranslating\n        }\n\n        languageItems.forEach(item => {\n            item.style.pointerEvents = isTranslating ? 'none' : 'auto'\n            item.style.opacity = isTranslating ? '0.7' : '1'\n        })\n\n        if (resetButton) {\n            resetButton.style.pointerEvents = isTranslating ? 'none' : 'auto'\n            resetButton.style.opacity = isTranslating ? '0.7' : '1'\n        }\n    }\n\n    private async translatePage(targetLang: string): Promise<void> {\n        this.setTranslatingState(true);\n        try {\n            const nodes = DocumentNavigator.findTranslatableContent();\n            const batches = DocumentNavigator.divideIntoGroups(nodes, BATCH_SIZE);\n    \n            // Store all nodes and their corresponding texts for each batch\n            const allBatchNodes: Node[][] = [];\n            const allBatchTexts: string[][] = [];\n    \n            // Prepare batches\n            batches.forEach(batch => {\n                const textsToTranslate: string[] = [];\n                const batchNodes: Node[] = [];\n                batch.forEach((node: Node) => {\n                    if (node.nodeType !== Node.TEXT_NODE) return;\n                    const parent = node.parentElement;\n                    if (!parent) return;\n                    const textToTranslate = this.getTextToTranslate(\n                        node as Text,\n                        parent,\n                        targetLang\n                    );\n                    if (textToTranslate) {\n                        textsToTranslate.push(textToTranslate);\n                        batchNodes.push(node);\n                    }\n                });\n                allBatchNodes.push(batchNodes);\n                allBatchTexts.push(textsToTranslate);\n            });\n    \n            // Send all batch requests in parallel\n            const allTranslatedTexts = await Promise.all(\n                allBatchTexts.map(texts =>\n                    this.translationService.translateBatchText(texts, targetLang)\n                )\n            );\n    \n            // Update the DOM after all translations are done\n            allTranslatedTexts.forEach((translatedTexts, batchIndex) => {\n                translatedTexts.forEach((translatedText: string, index: number) => {\n                    const node = allBatchNodes[batchIndex][index];\n                    if (node.nodeType === Node.TEXT_NODE) {\n                        node.textContent = translatedText;\n                    }\n                });\n            });\n    \n            this.isTranslated = true;\n            this.updateResetButtonVisibility();\n        } finally {\n            this.setTranslatingState(false);\n        }\n    }\n\n    private getTextToTranslate(\n        node: Text,\n        parent: HTMLElement,\n        targetLang: string\n    ): string | null {\n        if (!parent.hasAttribute('data-original-text')) {\n            const originalText = node.textContent?.trim()\n            if (originalText) {\n                parent.setAttribute('data-original-text', originalText)\n                return originalText\n            }\n        } else {\n            const textToTranslate = node.textContent?.trim()\n            if (this.currentLanguage !== 'en' && targetLang !== 'en') {\n                return parent.getAttribute('data-original-text')\n            }\n            return textToTranslate || null\n        }\n        return null\n    }\n\n    private updateResetButtonVisibility(): void {\n        const resetButton = this.widget.querySelector<HTMLElement>('.reset-option')\n        if (resetButton) {\n            resetButton.style.display = this.isTranslated ? 'flex' : 'none'\n        }\n    }\n\n    private setupEventListeners(): void {\n        const {\n            trigger,\n            dropdown,\n            searchInput,\n            clearSearch,\n            languageItems,\n        } = this.elements\n\n        if (!trigger || !dropdown || !searchInput || !clearSearch || !languageItems) {\n            console.error('Failed to find required elements')\n            return\n        }\n\n        // Reset button functionality\n        const resetButton = this.widget.querySelector<HTMLElement>('.reset-option')\n        if (resetButton) {\n            resetButton.addEventListener('click', () => {\n                if (this.isTranslating) return\n                this.translationService.resetTranslations()\n                resetButton.classList.remove('active')\n                this.isTranslated = false\n                this.updateResetButtonVisibility()\n                // Reset language selector to page language\n                const languageItems = this.widget.querySelectorAll<HTMLElement>('.language-item')\n                languageItems.forEach(item => {\n                    const isSelected = item.getAttribute('data-language-code') === this.config.pageLanguage\n                    item.classList.toggle('selected', isSelected)\n                    item.setAttribute('aria-selected', isSelected.toString())\n                })\n                // Update trigger text\n                const currentLanguage = languages.find(lang => lang.code === this.config.pageLanguage)\n                if (currentLanguage) {\n                    this.updateTriggerText(currentLanguage.name)\n                }\n                // Close dropdown\n                dropdown.classList.remove('open')\n                trigger.setAttribute('aria-expanded', 'false')\n            })\n        }\n\n        // Initialize reset button visibility\n        this.updateResetButtonVisibility()\n\n        // Toggle dropdown\n        trigger.addEventListener('click', () => {\n            if (this.isTranslating) return\n            dropdown.classList.toggle('open')\n            const isOpen = dropdown.classList.contains('open')\n            trigger.setAttribute('aria-expanded', isOpen.toString())\n            if (isOpen) {\n                searchInput.focus()\n            }\n        })\n\n        // Close dropdown when clicking outside\n        document.addEventListener('click', (e: MouseEvent) => {\n            if (!(e.target as Element).closest('.translation-widget')) {\n                if (dropdown.classList.contains('open')) {\n                    dropdown.classList.add('closing')\n                    setTimeout(() => {\n                        dropdown.classList.remove('open', 'closing')\n                        trigger.setAttribute('aria-expanded', 'false')\n                    }, 300)\n                }\n            }\n        })\n\n        // Search functionality\n        searchInput.addEventListener('input', () => {\n            const searchTerm = searchInput.value.toLowerCase()\n            const hasValue = searchTerm.length > 0\n            clearSearch.classList.toggle('visible', hasValue)\n\n            // Filter language items\n            const items = this.widget.querySelectorAll<HTMLElement>('.language-item')\n            const noResults = this.widget.querySelector<HTMLElement>('.no-results')\n            let visibleCount = 0\n\n            /**\n             * Feature - User can actually search for languages by name, native, code, and region.\n             */\n            items.forEach(item => {\n                const name = item.querySelector('.language-name')?.textContent?.toLowerCase() || ''\n                const native = item.querySelector('.language-native')?.textContent?.toLowerCase() || ''\n                const code = item.querySelector('.language-code')?.textContent?.toLowerCase() || ''\n                const region = item.querySelector('.language-region')?.textContent?.toLowerCase() || ''\n\n                const matches = name.includes(searchTerm) || \n                              native.includes(searchTerm) || \n                              code.includes(searchTerm) || \n                              region.includes(searchTerm)\n\n                item.style.display = matches ? '' : 'none'\n                if (matches) visibleCount++\n            })\n\n            // Show/hide no results message\n            if (noResults) {\n                noResults.style.display = visibleCount === 0 ? 'flex' : 'none'\n            }\n        })\n\n        clearSearch.addEventListener('click', () => {\n            searchInput.value = ''\n            clearSearch.classList.remove('visible')\n            searchInput.focus()\n            \n            // Show all language items and hide no results\n            const items = this.widget.querySelectorAll<HTMLElement>('.language-item')\n            const noResults = this.widget.querySelector<HTMLElement>('.no-results')\n            \n            items.forEach(item => {\n                item.style.display = ''\n            })\n            \n            if (noResults) {\n                noResults.style.display = 'none'\n            }\n        })\n\n        // Language selection\n        languageItems.forEach(item => {\n            item.addEventListener('click', async () => {\n                if (this.isTranslating) return\n                // Remove selected class from all items\n                languageItems.forEach(i => {\n                    i.classList.remove('selected')\n                    i.setAttribute('aria-selected', 'false')\n                })\n\n                // Add selected class to clicked item\n                item.classList.add('selected')\n                item.setAttribute('aria-selected', 'true')\n\n                // Update trigger text\n                const langName = item.querySelector('.language-name')?.textContent\n                const langCode = item.getAttribute('data-language-code')\n\n                if (langName) {\n                    await this.updateTriggerText(langName)\n                }\n\n                // Close dropdown\n                dropdown.classList.remove('open')\n                trigger.setAttribute('aria-expanded', 'false')\n\n                // Handle translation\n                if (langCode && langCode !== this.currentLanguage) {\n                    // Show loading state\n                    const triggerContent = trigger.querySelector<HTMLDivElement>('.trigger-content')\n                    const triggerLoading = trigger.querySelector<HTMLDivElement>('.trigger-loading')\n                    \n                    if (triggerContent && triggerLoading) {\n                        triggerContent.style.display = 'none'\n                        triggerLoading.style.display = 'flex'\n                    }\n\n                    try {\n                        await this.translatePage(langCode)\n                        this.currentLanguage = langCode\n                    } catch (error) {\n                        console.error('Translation error:', error)\n                        alert('An error occurred during translation. Please try again.')\n                    } finally {\n                        // Hide loading state\n                        if (triggerContent && triggerLoading) {\n                            triggerLoading.style.display = 'none'\n                            triggerContent.style.display = 'flex'\n                        }\n                    }\n                }\n            })\n        })\n\n        // Keyboard navigation\n        document.addEventListener('keydown', (e: KeyboardEvent) => {\n            if (!dropdown.classList.contains('open')) return\n\n            if (e.key === 'Escape') {\n                dropdown.classList.remove('open')\n                trigger.setAttribute('aria-expanded', 'false')\n                trigger.focus()\n            }\n        })\n    }\n}\n","export default \"<div class=\\\"translation-widget\\\">\\n    <!-- Widget Trigger Button -->\\n    <div class=\\\"widget-trigger\\\" tabindex=\\\"0\\\" role=\\\"button\\\" aria-label=\\\"Open translation menu\\\" aria-expanded=\\\"false\\\">\\n        <!-- Normal State -->\\n        <div class=\\\"trigger-content\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"12\\\" height=\\\"12\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" class=\\\"lucide lucide-globe-icon lucide-globe\\\"><circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"10\\\"/><path d=\\\"M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20\\\"/><path d=\\\"M2 12h20\\\"/></svg>\\n            <span>Translate</span>\\n        </div>\\n        \\n        <!-- Loading State (hidden by default) -->\\n        <div class=\\\"trigger-loading\\\" style=\\\"display: none;\\\">\\n            <div class=\\\"loading-spinner\\\"></div>\\n            <span>Translating...</span>\\n        </div>\\n    </div>\\n\\n    <!-- Dropdown Menu -->\\n    <div class=\\\"widget-dropdown\\\">\\n        <!-- Header -->\\n        <div class=\\\"dropdown-header\\\">\\n            <div class=\\\"dropdown-title\\\">\\n                <div class=\\\"title-left\\\">\\n                    <svg class=\\\"languages-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129\\\"></path>\\n                    </svg>\\n                    <span class=\\\"title-text\\\">Select Language</span>\\n                </div>\\n                <div class=\\\"language-count\\\">{{languageCount}} languages</div>\\n            </div>\\n            \\n            <!-- Search Input -->\\n            <div class=\\\"search-container\\\">\\n                <svg class=\\\"search-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\\\"></path>\\n                </svg>\\n                <input type=\\\"text\\\" class=\\\"search-input\\\" placeholder=\\\"Search languages...\\\" aria-label=\\\"Search languages\\\">\\n                <svg class=\\\"clear-search\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M6 18L18 6M6 6l12 12\\\"></path>\\n                </svg>\\n            </div>\\n        </div>\\n\\n        <!-- Reset Option -->\\n        <div class=\\\"reset-option\\\" tabindex=\\\"0\\\" role=\\\"button\\\" aria-label=\\\"Reset to original language\\\">\\n            <svg class=\\\"reset-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6\\\"></path>\\n            </svg>\\n            <div class=\\\"reset-text\\\">\\n                <span class=\\\"reset-title\\\">Original Language</span>\\n                <span class=\\\"reset-subtitle\\\">Reset translation</span>\\n            </div>\\n        </div>\\n\\n        <!-- Language List -->\\n        <div class=\\\"language-list\\\">\\n            {{languageOptions}}\\n            <div class=\\\"no-results\\\" style=\\\"display: none;\\\">\\n                <svg class=\\\"no-results-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\\\"></path>\\n                </svg>\\n                <span>No languages found</span>\\n            </div>\\n        </div>\\n    </div>\\n</div>\"","import { TranslationWidget } from './widget'\nimport type { TranslationConfig } from './types'\n\ndeclare global {\n    interface Window {\n        TranslationWidget: (\n            publicKey: string,\n            config?: TranslationConfig\n        ) => TranslationWidget\n    }\n}\n\nconst initializeTranslationWidget = (\n    publicKey: string,\n    config?: TranslationConfig\n): TranslationWidget => {\n    if (typeof window === 'undefined') {\n        throw new Error(\n            'Translation widget can only be used in browser environment'\n        )\n    }\n    return new TranslationWidget(publicKey, config)\n}\n\nexport default initializeTranslationWidget\n"],"names":["DEFAULT_CONFIG","primaryColor","pageLanguage","autoDetectLanguage","Cache","constructor","__publicField","this","cache","Map","maxSize","getKey","text","targetLang","set","translation","key","get","clear","TranslationService","publicKey","hits","misses","getCacheMetrics","cacheMetrics","resetTranslations","document","querySelectorAll","forEach","element","textNodes","Array","from","childNodes","filter","node","nodeType","Node","TEXT_NODE","length","originalText","getAttribute","textContent","translateBatchText","texts","cached_translations","map","includes","console","log","response","fetch","apiUrl","method","headers","body","JSON","stringify","target_language","ok","error","Error","statusText","status","result","json","translations","isArray","translated_text","index","translationError","DocumentNavigator","findTranslatableContent","validator","acceptNode","NodeFilter","FILTER_REJECT","container","parentElement","tagName","closest","_a","trim","FILTER_ACCEPT","navigator","createTreeWalker","SHOW_TEXT","results","currentNode","nextNode","push","hash","seed","remainder","bytes","h1","c1","c2","i","k1","charCodeAt","h1b","murmurhash3_32_gc","join","toString","divideIntoGroups","items","groupSize","groups","slice","containsTranslatableContent","getContainer","languages","code","name","native","region","rtl","TranslationWidget","config","translationService","currentLanguage","widget","createElement","elements","trigger","dropdown","searchInput","clearSearch","languageItems","loadingIndicator","initialize","validateConfig","createWidget","setupEventListeners","currentLanguageLabel","getCurrentLanguageLabel","className","innerHTML","createWidgetHTML","appendChild","querySelector","triggerSpan","classList","add","find","language","languageOptions","createLanguageOptions","languageCount","replace","currentLang","lang","otherLanguages","sort","a","b","localeCompare","createLanguageItem","isSelected","updateTriggerText","newText","offsetHeight","remove","Promise","resolve","setTimeout","setTranslatingState","isTranslating","resetButton","style","pointerEvents","opacity","disabled","item","translatePage","nodes","batches","allBatchNodes","allBatchTexts","batch","textsToTranslate","batchNodes","parent","textToTranslate","getTextToTranslate","all","translatedTexts","batchIndex","translatedText","isTranslated","updateResetButtonVisibility","hasAttribute","_b","setAttribute","display","addEventListener","toggle","isOpen","contains","focus","e","target","searchTerm","value","toLowerCase","hasValue","noResults","visibleCount","_d","_c","_f","_e","_h","_g","matches","async","langName","langCode","triggerContent","triggerLoading","alert","window"],"mappings":"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"}