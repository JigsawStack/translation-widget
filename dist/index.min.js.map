{"version":3,"file":"index.min.js","sources":["../src/lib/translation/index.ts","../src/constants/languages.ts","../src/utils/utils.ts","../src/lib/dom/index.ts","../src/constants/index.ts","../node_modules/lz-string/libs/lz-string.js","../src/lib/storage/localstorage.ts","../src/widget/index.ts","../src/templates/html/widget.html?raw","../src/index.ts"],"sourcesContent":["interface TranslationResponse {\n    translated_text: string | string[]\n    source_language?: string\n    detected_language?: string\n    confidence?: number\n}\n\ninterface TranslationError extends Error {\n    status?: number\n    response?: Response\n}\n\ninterface CacheMetrics {\n    hits: number\n    misses: number\n}\n\nexport class TranslationService {\n    private readonly publicKey: string\n    private cacheMetrics: CacheMetrics = { hits: 0, misses: 0 }\n    // Todo: convert this to use sdk instead of api\n    private readonly apiUrl = 'https://api.jigsawstack.com/v1/ai/translate'\n\n    constructor(publicKey: string) {\n        this.publicKey = publicKey\n    }\n\n    getCacheMetrics(): CacheMetrics {\n        return { ...this.cacheMetrics }\n    }\n\n    async translateBatchText(\n        texts: string[],\n        targetLang: string,\n        maxRetries = 2,\n        retryDelay = 100\n    ): Promise<string[]> {\n        let attempt = 0;\n        while (attempt < maxRetries) {\n            try {\n                const response = await fetch(this.apiUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'x-api-key': this.publicKey,\n                    },\n                    body: JSON.stringify({\n                        text: texts,\n                        target_language: targetLang,\n                    }),\n                });\n\n                if (!response.ok) {\n                    const error: TranslationError = new Error(\n                        `Error translating text: ${response.statusText}`\n                    );\n                    error.status = response.status;\n                    error.response = response;\n                    throw error;\n                }\n\n                const result = (await response.json()) as TranslationResponse;\n                const translations = Array.isArray(result.translated_text)\n                    ? result.translated_text\n                    : [result.translated_text];\n\n                return translations;\n            } catch (error) {\n                attempt++;\n                if (attempt >= maxRetries) {\n                    console.error('Translation error after retries:', error);\n                    return texts; // Return original texts on error\n                }\n                // Wait before retrying\n                await new Promise(res => setTimeout(res, retryDelay));\n            }\n        }\n        return texts; // Fallback, should not reach here\n    }\n}\n","import { Language } from \"../types\"\nexport const languages: Language[] = [\n    {\n        code: 'af',\n        name: 'Afrikaans',\n        native: 'Afrikaans',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'am',\n        name: 'Amharic',\n        native: 'አማርኛ',\n        writing_system: 'Ethiopic'\n    },\n    {\n        code: 'ar',\n        name: 'Arabic',\n        native: 'العربية',\n        rtl: 1,\n        writing_system: 'Arabic'\n    },\n    {\n        code: 'as',\n        name: 'Assamese',\n        native: 'অসমীয়া',\n        writing_system: 'Bengali'\n    },\n    {\n        code: 'az',\n        name: 'Azerbaijani',\n        native: 'Azərbaycanca / آذربايجان',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'ba',\n        name: 'Bashkir',\n        native: 'Башҡорт',\n        writing_system: 'Cyrillic'\n    },\n    {\n        code: 'be',\n        name: 'Belarusian',\n        native: 'Беларуская',\n        writing_system: 'Cyrillic'\n    },\n    {\n        code: 'bg',\n        name: 'Bulgarian',\n        native: 'Български',\n        writing_system: 'Cyrillic'\n    },\n    {\n        code: 'bn',\n        name: 'Bengali',\n        native: 'বাংলা',\n        writing_system: 'Bengali'\n    },\n    {\n        code: 'bo',\n        name: 'Tibetan',\n        native: 'བོད་ཡིག / Bod skad',\n        writing_system: 'Tibetan'\n    },\n    {\n        code: 'br',\n        name: 'Breton',\n        native: 'Brezhoneg',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'bs',\n        name: 'Bosnian',\n        native: 'Bosanski',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'ca',\n        name: 'Catalan',\n        native: 'Català',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'ch',\n        name: 'Chamorro',\n        native: 'Chamoru',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'co',\n        name: 'Corsican',\n        native: 'Corsu',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'cs',\n        name: 'Czech',\n        native: 'Česky',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'cy',\n        name: 'Welsh',\n        native: 'Cymraeg',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'da',\n        name: 'Danish',\n        native: 'Dansk',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'de',\n        name: 'German',\n        native: 'Deutsch',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'dv',\n        name: 'Divehi',\n        native: 'ދިވެހިބަސް',\n        rtl: 1,\n        writing_system: 'Thaana'\n    },\n    {\n        code: 'dz',\n        name: 'Dzongkha',\n        native: 'ཇོང་ཁ',\n        writing_system: 'Tibetan'\n    },\n    {\n        code: 'el',\n        name: 'Greek',\n        native: 'Ελληνικά',\n        writing_system: 'Greek'\n    },\n    {\n        code: 'en',\n        name: 'English',\n        native: 'English',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'eo',\n        name: 'Esperanto',\n        native: 'Esperanto',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'es',\n        name: 'Spanish',\n        native: 'Español',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'et',\n        name: 'Estonian',\n        native: 'Eesti',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'eu',\n        name: 'Basque',\n        native: 'Euskara',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'fa',\n        name: 'Persian',\n        native: 'فارسی',\n        rtl: 1,\n        writing_system: 'Arabic'\n    },\n    {\n        code: 'ff',\n        name: 'Peul',\n        native: 'Fulfulde',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'fi',\n        name: 'Finnish',\n        native: 'Suomi',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'fj',\n        name: 'Fijian',\n        native: 'Na Vosa Vakaviti',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'fo',\n        name: 'Faroese',\n        native: 'Føroyskt',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'fr',\n        name: 'French',\n        native: 'Français',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'fy',\n        name: 'West Frisian',\n        native: 'Frysk',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'ga',\n        name: 'Irish',\n        native: 'Gaeilge',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'gd',\n        name: 'Scottish Gaelic',\n        native: 'Gàidhlig',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'gl',\n        name: 'Galician',\n        native: 'Galego',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'gn',\n        name: 'Guarani',\n        native: \"Avañe'ẽ\",\n        writing_system: 'Latin'\n    },\n    {\n        code: 'gu',\n        name: 'Gujarati',\n        native: 'ગુજરાતી',\n        writing_system: 'Gujarati'\n    },\n    {\n        code: 'gv',\n        name: 'Manx',\n        native: 'Gaelg',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'ha',\n        name: 'Hausa',\n        native: 'هَوُسَ',\n        rtl: 1,\n        writing_system: 'Latin'\n    },\n    {\n        code: 'he',\n        name: 'Hebrew',\n        native: 'עברית',\n        rtl: 1,\n        writing_system: 'Hebrew'\n    },\n    {\n        code: 'hi',\n        name: 'Hindi',\n        native: 'हिन्दी',\n        writing_system: 'Devanagari'\n    },\n    {\n        code: 'hr',\n        name: 'Croatian',\n        native: 'Hrvatski',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'ht',\n        name: 'Haitian',\n        native: 'Krèyol ayisyen',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'hu',\n        name: 'Hungarian',\n        native: 'Magyar',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'hy',\n        name: 'Armenian',\n        native: 'Հայերեն',\n        writing_system: 'Armenian'\n    },\n    {\n        code: 'id',\n        name: 'Indonesian',\n        native: 'Bahasa Indonesia',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'ig',\n        name: 'Igbo',\n        native: 'Igbo',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'is',\n        name: 'Icelandic',\n        native: 'Íslenska',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'it',\n        name: 'Italian',\n        native: 'Italiano',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'iu',\n        name: 'Inuktitut',\n        native: 'ᐃᓄᒃᑎᑐᑦ',\n        writing_system: 'Unified Canadian Aboriginal Syllabics'\n    },\n    {\n        code: 'ja',\n        name: 'Japanese',\n        native: '日本語',\n        writing_system: 'Japanese'\n    },\n    {\n        code: 'jv',\n        name: 'Javanese',\n        native: 'Basa Jawa',\n        writing_system: 'Javanese'\n    },\n    {\n        code: 'ka',\n        name: 'Georgian',\n        native: 'ქართული',\n        writing_system: 'Georgian'\n    },\n    {\n        code: 'kg',\n        name: 'Kongo',\n        native: 'KiKongo',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'ki',\n        name: 'Kikuyu',\n        native: 'Gĩkũyũ',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'kj',\n        name: 'Kuanyama',\n        native: 'Kuanyama',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'kk',\n        name: 'Kazakh',\n        native: 'Қазақша',\n        writing_system: 'Cyrillic'\n    },\n    {\n        code: 'kl',\n        name: 'Greenlandic',\n        native: 'Kalaallisut',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'km',\n        name: 'Cambodian',\n        native: 'ភាសាខ្មែរ',\n        writing_system: 'Khmer'\n    },\n    {\n        code: 'kn',\n        name: 'Kannada',\n        native: 'ಕನ್ನಡ',\n        writing_system: 'Kannada'\n    },\n    {\n        code: 'ko',\n        name: 'Korean',\n        native: '한국어',\n        writing_system: 'Korean'\n    },\n    {\n        code: 'kr',\n        name: 'Kanuri',\n        native: 'Kanuri',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'ks',\n        name: 'Kashmiri',\n        native: 'कश्मीरी / كشميري',\n        rtl: 1,\n        writing_system: 'Arabic'\n    },\n    {\n        code: 'ku',\n        name: 'Kurdish',\n        native: 'Kurdî / كوردی',\n        rtl: 1,\n        writing_system: 'Arabic'\n    },\n    {\n        code: 'kv',\n        name: 'Komi',\n        native: 'Коми',\n        writing_system: 'Cyrillic'\n    },\n    {\n        code: 'kw',\n        name: 'Cornish',\n        native: 'Kernewek',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'ky',\n        name: 'Kirghiz',\n        native: 'Kırgızca / Кыргызча',\n        writing_system: 'Cyrillic'\n    },\n    {\n        code: 'la',\n        name: 'Latin',\n        native: 'Latina',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'lb',\n        name: 'Luxembourgish',\n        native: 'Lëtzebuergesch',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'lg',\n        name: 'Ganda',\n        native: 'Luganda',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'li',\n        name: 'Limburgian',\n        native: 'Limburgs',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'ln',\n        name: 'Lingala',\n        native: 'Lingála',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'lo',\n        name: 'Laotian',\n        native: 'ລາວ / Pha xa lao',\n        writing_system: 'Lao'\n    },\n    {\n        code: 'lt',\n        name: 'Lithuanian',\n        native: 'Lietuvių',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'lu',\n        name: 'Luba-Katanga',\n        native: 'Tshiluba',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'lv',\n        name: 'Latvian',\n        native: 'Latviešu',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'mg',\n        name: 'Malagasy',\n        native: 'Malagasy',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'mh',\n        name: 'Marshallese',\n        native: 'Kajin Majel / Ebon',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'mi',\n        name: 'Maori',\n        native: 'Māori',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'mk',\n        name: 'Macedonian',\n        native: 'Македонски',\n        writing_system: 'Cyrillic'\n    },\n    {\n        code: 'ml',\n        name: 'Malayalam',\n        native: 'മലയാളം',\n        writing_system: 'Malayalam'\n    },\n    {\n        code: 'mn',\n        name: 'Mongolian',\n        native: 'Монгол',\n        writing_system: 'Mongolian'\n    },\n    {\n        code: 'mo',\n        name: 'Moldovan',\n        native: 'Moldovenească',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'mr',\n        name: 'Marathi',\n        native: 'मराठी',\n        writing_system: 'Devanagari'\n    },\n    {\n        code: 'ms',\n        name: 'Malay',\n        native: 'Bahasa Melayu',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'mt',\n        name: 'Maltese',\n        native: 'bil-Malti',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'my',\n        name: 'Burmese',\n        native: 'မြန်မာစာ',\n        writing_system: 'Myanmar'\n    },\n    {\n        code: 'na',\n        name: 'Nauruan',\n        native: 'Dorerin Naoero',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'nb',\n        name: 'Norwegian Bokmål',\n        native: 'Norsk bokmål',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'nd',\n        name: 'North Ndebele',\n        native: 'Sindebele',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'ne',\n        name: 'Nepali',\n        native: 'नेपाली',\n        writing_system: 'Devanagari'\n    },\n    {\n        code: 'ng',\n        name: 'Ndonga',\n        native: 'Oshiwambo',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'nl',\n        name: 'Dutch',\n        native: 'Nederlands',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'nn',\n        name: 'Norwegian Nynorsk',\n        native: 'Norsk nynorsk',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'no',\n        name: 'Norwegian',\n        native: 'Norsk',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'nr',\n        name: 'South Ndebele',\n        native: 'isiNdebele',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'nv',\n        name: 'Navajo',\n        native: 'Diné bizaad',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'ny',\n        name: 'Chichewa',\n        native: 'Chi-Chewa',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'oc',\n        name: 'Occitan',\n        native: 'Occitan',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'oj',\n        name: 'Ojibwa',\n        native: 'ᐊᓂᔑᓈᐯᒧᐎᓐ / Anishinaabemowin',\n        writing_system: 'Unified Canadian Aboriginal Syllabics'\n    },\n    {\n        code: 'om',\n        name: 'Oromo',\n        native: 'Oromoo',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'or',\n        name: 'Oriya',\n        native: 'ଓଡ଼ିଆ',\n        writing_system: 'Odia'\n    },\n    {\n        code: 'os',\n        name: 'Ossetian / Ossetic',\n        native: 'Иронау',\n        writing_system: 'Cyrillic'\n    },\n    {\n        code: 'pa',\n        name: 'Panjabi / Punjabi',\n        native: 'ਪੰਜਾਬੀ / पंजाबी / پنجابي',\n        writing_system: 'Gurmukhi'\n    },\n    {\n        code: 'pi',\n        name: 'Pali',\n        native: 'Pāli / पाऴि',\n        writing_system: 'Devanagari'\n    },\n    {\n        code: 'pl',\n        name: 'Polish',\n        native: 'Polski',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'ps',\n        name: 'Pashto',\n        native: 'پښتو',\n        rtl: 1,\n        writing_system: 'Arabic'\n    },\n    {\n        code: 'pt',\n        name: 'Portuguese',\n        native: 'Português',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'qu',\n        name: 'Quechua',\n        native: 'Runa Simi',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'rm',\n        name: 'Raeto Romance',\n        native: 'Rumantsch',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'rn',\n        name: 'Kirundi',\n        native: 'Kirundi',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'ro',\n        name: 'Romanian',\n        native: 'Română',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'ru',\n        name: 'Russian',\n        native: 'Русский',\n        writing_system: 'Cyrillic'\n    },\n    {\n        code: 'rw',\n        name: 'Rwandi',\n        native: 'Kinyarwandi',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'sa',\n        name: 'Sanskrit',\n        native: 'संस्कृतम्',\n        writing_system: 'Devanagari'\n    },\n    {\n        code: 'sc',\n        name: 'Sardinian',\n        native: 'Sardu',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'sd',\n        name: 'Sindhi',\n        native: 'सिनधि',\n        writing_system: 'Arabic'\n    },\n    {\n        code: 'se',\n        name: 'Northern Sami',\n        native: 'Sámegiella',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'sg',\n        name: 'Sango',\n        native: 'Sängö',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'sh',\n        name: 'Serbo-Croatian',\n        native: 'Srpskohrvatski / Српскохрватски',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'si',\n        name: 'Sinhalese',\n        native: 'සිංහල',\n        writing_system: 'Sinhala'\n    },\n    {\n        code: 'sk',\n        name: 'Slovak',\n        native: 'Slovenčina',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'sl',\n        name: 'Slovenian',\n        native: 'Slovenščina',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'sm',\n        name: 'Samoan',\n        native: 'Gagana Samoa',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'sn',\n        name: 'Shona',\n        native: 'chiShona',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'so',\n        name: 'Somalia',\n        native: 'Soomaaliga',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'sq',\n        name: 'Albanian',\n        native: 'Shqip',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'sr',\n        name: 'Serbian',\n        native: 'Српски',\n        writing_system: 'Cyrillic'\n    },\n    {\n        code: 'ss',\n        name: 'Swati',\n        native: 'SiSwati',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'st',\n        name: 'Southern Sotho',\n        native: 'Sesotho',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'su',\n        name: 'Sundanese',\n        native: 'Basa Sunda',\n        writing_system: 'Sundanese'\n    },\n    {\n        code: 'sv',\n        name: 'Swedish',\n        native: 'Svenska',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'sw',\n        name: 'Swahili',\n        native: 'Kiswahili',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'ta',\n        name: 'Tamil',\n        native: 'தமிழ்',\n        writing_system: 'Tamil'\n    },\n    {\n        code: 'te',\n        name: 'Telugu',\n        native: 'తెలుగు',\n        writing_system: 'Telugu'\n    },\n    {\n        code: 'tg',\n        name: 'Tajik',\n        native: 'Тоҷикӣ',\n        writing_system: 'Cyrillic'\n    },\n    {\n        code: 'th',\n        name: 'Thai',\n        native: 'ไทย / Phasa Thai',\n        writing_system: 'Thai'\n    },\n    {\n        code: 'ti',\n        name: 'Tigrinya',\n        native: 'ትግርኛ',\n        writing_system: 'Ethiopic'\n    },\n    {\n        code: 'tk',\n        name: 'Turkmen',\n        native: 'Туркмен / تركمن',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'tl',\n        name: 'Tagalog / Filipino',\n        native: 'Tagalog',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'tn',\n        name: 'Tswana',\n        native: 'Setswana',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'to',\n        name: 'Tonga',\n        native: 'Lea Faka-Tonga',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'tr',\n        name: 'Turkish',\n        native: 'Türkçe',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'ts',\n        name: 'Tsonga',\n        native: 'Xitsonga',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'tt',\n        name: 'Tatar',\n        native: 'Tatarça',\n        writing_system: 'Cyrillic'\n    },\n    {\n        code: 'tw',\n        name: 'Twi',\n        native: 'Twi',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'ty',\n        name: 'Tahitian',\n        native: 'Reo Mā`ohi',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'ug',\n        name: 'Uyghur',\n        native: 'Uyƣurqə / ئۇيغۇرچە',\n        writing_system: 'Arabic'\n    },\n    {\n        code: 'uk',\n        name: 'Ukrainian',\n        native: 'Українська',\n        writing_system: 'Cyrillic'\n    },\n    {\n        code: 'ur',\n        name: 'Urdu',\n        native: 'اردو',\n        rtl: 1,\n        writing_system: 'Arabic'\n    },\n    {\n        code: 'uz',\n        name: 'Uzbek',\n        native: 'Ўзбек',\n        writing_system: 'Latin'\n    },\n    {\n        code: 've',\n        name: 'Venda',\n        native: 'Tshivenḓa',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'vi',\n        name: 'Vietnamese',\n        native: 'Tiếng Việt',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'vo',\n        name: 'Volapük',\n        native: 'Volapük',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'wo',\n        name: 'Wolof',\n        native: 'Wollof',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'xh',\n        name: 'Xhosa',\n        native: 'isiXhosa',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'yi',\n        name: 'Yiddish',\n        native: 'ייִדיש',\n        rtl: 1,\n        writing_system: 'Hebrew'\n    },\n    {\n        code: 'yo',\n        name: 'Yoruba',\n        native: 'Yorùbá',\n        writing_system: 'Latin'\n    },\n    {\n        code: 'zh',\n        name: 'Chinese (Simplified)',\n        native: '简体中文',\n        writing_system: 'Simplied Han'\n    },\n    {\n        code: 'zh-TW',\n        name: 'Chinese (Traditional)',\n        native: '繁體中文',\n        writing_system: 'Traditional Han'\n    },\n    {\n        code: 'zu',\n        name: 'Zulu',\n        native: 'isiZulu',\n        writing_system: 'Latin'\n    }\n]","import { languages } from \"../constants/languages\";\nfunction generateHashForContent(nodes: Node[]): string {\n    const content = nodes.map(node => {\n        if (node.nodeType === Node.TEXT_NODE) {\n            const parent = node.parentElement as HTMLElement | null;\n            // Use original text if available, else current text\n            if (parent && parent.hasAttribute('data-original-text')) {\n                return parent.getAttribute('data-original-text')?.replace(/\\s+/g, ' ').trim();\n            }\n            return node.textContent?.replace(/\\s+/g, ' ').trim().toLocaleLowerCase();\n        }\n    }).join(' ').trim();\n\n    const hash = murmurhash3_32_gc(content.toLowerCase(), 42).toString(16);\n    return hash;\n}\n\nfunction murmurhash3_32_gc(key: string, seed: number) {\n    let remainder = key.length & 3, bytes = key.length - remainder;\n    let h1 = seed, c1 = 0xcc9e2d51, c2 = 0x1b873593;\n    let i = 0;\n\n    while (i < bytes) {\n        let k1 =\n            (key.charCodeAt(i) & 0xff) |\n            ((key.charCodeAt(++i) & 0xff) << 8) |\n            ((key.charCodeAt(++i) & 0xff) << 16) |\n            ((key.charCodeAt(++i) & 0xff) << 24);\n        ++i;\n\n        k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;\n        k1 = (k1 << 15) | (k1 >>> 17);\n        k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;\n\n        h1 ^= k1;\n        h1 = (h1 << 13) | (h1 >>> 19);\n        const h1b = (((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16)) & 0xffffffff;\n        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));\n    }\n\n    let k1 = 0;\n\n    switch (remainder) {\n        //@ts-expect-error - this is a valid case\n        case 3: k1 ^= key.charCodeAt(i + 2) << 16;\n        //@ts-expect-error - this is a valid case\n        case 2: k1 ^= key.charCodeAt(i + 1) << 8;\n        case 1:\n            k1 ^= key.charCodeAt(i);\n            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;\n            k1 = (k1 << 15) | (k1 >>> 17);\n            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;\n            h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n    h1 ^= h1 >>> 16;\n    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;\n    h1 ^= h1 >>> 13;\n    h1 = (((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16)) & 0xffffffff;\n    h1 ^= h1 >>> 16;\n\n    return h1 >>> 0;\n}\n\nfunction getVisibleTextContent(element: HTMLElement): string {\n    // Get all child text nodes that are not inside .sr-only or [aria-hidden=\"true\"]\n    let text = '';\n    element.childNodes.forEach(node => {\n        if (\n            node.nodeType === Node.TEXT_NODE &&\n            !(element.classList.contains('sr-only') || element.getAttribute('aria-hidden') === 'true')\n        ) {\n            text += node.textContent;\n        }\n        if (\n            node.nodeType === Node.ELEMENT_NODE &&\n            !(node as HTMLElement).classList.contains('sr-only') &&\n            (node as HTMLElement).getAttribute('aria-hidden') !== 'true'\n        ) {\n            text += getVisibleTextContent(node as HTMLElement);\n        }\n    });\n    return text.trim();\n}\n\nconst removeEmojis = (text: string) => text.replace(/[\\p{Emoji_Presentation}\\p{Extended_Pictographic}]/gu, '');\n\nconst getUserLanguage = () => {\n    const userLanguages = window.navigator.languages\n    const userLanguage = languages.find(lang => userLanguages.includes(lang.code))\n    return userLanguage?.code || 'en';\n}\n\nexport { generateHashForContent, getVisibleTextContent, removeEmojis, getUserLanguage }","// type TreeWalkerFilter = (node: Node) => number\n\ninterface NodeProcessor {\n    acceptNode(node: Node): number\n}\n\nimport { removeEmojis } from '../../utils/utils'\n\nexport class DocumentNavigator {\n    /**\n     * Retrieves text nodes eligible for translation from the document\n     * @returns Collection of text nodes ready for translation\n     */\n    static findTranslatableContent(): Text[] {\n        const validator: NodeProcessor = {\n            acceptNode(node: Node): number {\n                if (node.nodeType !== Node.TEXT_NODE) {\n                    // Log non-text nodes\n                    return NodeFilter.FILTER_REJECT\n                }\n\n                const container = (node as Text).parentElement\n                if (!container) {\n                    return NodeFilter.FILTER_REJECT\n                }\n\n                // Skip if any ancestor has aria-hidden=\"true\"\n                if (container.closest('[aria-hidden=\"true\"]')) {\n                    return NodeFilter.FILTER_REJECT\n                }\n\n                // // check if the classname is sr-only\n                if (container.classList.contains('sr-only')) {\n                    return NodeFilter.FILTER_REJECT\n                }\n\n\n                const shouldSkip =\n                    container.closest('script, style, code') !== null ||\n                    container.closest('next-route-announcer') !== null ||\n                    container.closest('.jigts-translation-widget') !== null ||\n                    container.closest('.jigts-widget-trigger') !== null ||\n                    container.closest('.jigts-widget-dropdown') !== null ||\n                    container.closest('.notranslate') !== null ||\n                    !node.textContent?.trim()\n                return shouldSkip\n                    ? NodeFilter.FILTER_REJECT\n                    : NodeFilter.FILTER_ACCEPT\n            }\n        }\n\n        const navigator = document.createTreeWalker(\n            document.body,\n            NodeFilter.SHOW_TEXT,\n            validator\n        )\n\n        const results: Text[] = []\n        let currentNode: Node | null\n\n        while ((currentNode = navigator.nextNode())) {\n            if (currentNode.nodeType === Node.TEXT_NODE) {\n                const text = currentNode.textContent?.trim() || ''\n                /**\n                 * Skip the content if \n                 * 1. the content if empty \n                 * 2. the content is only one character in length \n                 * 3. the content is only an emoji\n                 */\n                const textWithoutEmojis = removeEmojis(text)\n                if (\n                    text.length === 0 ||\n                    text.length === 1 ||\n                    textWithoutEmojis.length === 0\n                ) {\n                    continue\n                }\n                results.push(currentNode as Text)\n            }\n        }\n\n        return results\n    }\n\n    /**\n     * Divides a collection into smaller groups\n     * @param items Collection to divide\n     * @param groupSize Maximum size of each group\n     * @returns Array of item groups\n     */\n    static divideIntoGroups<T>(items: T[], groupSize: number): T[][] {\n        const groups: T[][] = []\n\n        for (let i = 0; i < items.length; i += groupSize) {\n            groups.push(items.slice(i, i + groupSize))\n        }\n\n        return groups\n    }\n\n    /**\n     * Determines if a node contains translatable text\n     * @param node Node to evaluate\n     * @returns Whether the node contains translatable content\n     */\n    static containsTranslatableContent(node: Node): node is Text {\n        if (node.nodeType !== Node.TEXT_NODE) {\n            return false\n        }\n\n        const container = node.parentElement\n        if (!container) {\n            return false\n        }\n        return !(\n            container.tagName === 'SCRIPT' ||\n            container.tagName === 'STYLE' ||\n            container.tagName === 'CODE' ||\n            container.tagName === 'next-route-announcer' ||\n            container.closest('.translate-widget') ||\n            container.closest('.notranslate') ||\n            !node.textContent?.trim()\n        )\n    }\n\n    /**\n     * Retrieves the containing element of a node\n     * @param node Node to find container for\n     * @returns Containing element or null if none exists\n     */\n    static getContainer(node: Node): HTMLElement | null {\n        return node.parentElement\n    }\n}\n","export const MAX_CACHE_SIZE = 1000\nexport const BATCH_SIZE = 10\nexport const CACHE_PREFIX = 'jss-'\n\nexport const DEFAULT_CONFIG = {\n    primaryColor: '#2563eb',\n    pageLanguage: 'en',\n    autoDetectLanguage: false,\n    position: 'top-right' as const\n}\n","// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\n// This work is free. You can redistribute it and/or modify it\n// under the terms of the WTFPL, Version 2\n// For more information see LICENSE.txt or http://www.wtfpl.net/\n//\n// For more information, the home page:\n// http://pieroxy.net/blog/pages/lz-string/testing.html\n//\n// LZ-based compression algorithm, version 1.4.5\nvar LZString = (function() {\n\n// private property\nvar f = String.fromCharCode;\nvar keyStrBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar keyStrUriSafe = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\nvar baseReverseDic = {};\n\nfunction getBaseValue(alphabet, character) {\n  if (!baseReverseDic[alphabet]) {\n    baseReverseDic[alphabet] = {};\n    for (var i=0 ; i<alphabet.length ; i++) {\n      baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n    }\n  }\n  return baseReverseDic[alphabet][character];\n}\n\nvar LZString = {\n  compressToBase64 : function (input) {\n    if (input == null) return \"\";\n    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});\n    switch (res.length % 4) { // To produce valid Base64\n    default: // When could this happen ?\n    case 0 : return res;\n    case 1 : return res+\"===\";\n    case 2 : return res+\"==\";\n    case 3 : return res+\"=\";\n    }\n  },\n\n  decompressFromBase64 : function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });\n  },\n\n  compressToUTF16 : function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 15, function(a){return f(a+32);}) + \" \";\n  },\n\n  decompressFromUTF16: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });\n  },\n\n  //compress into uint8array (UCS-2 big endian format)\n  compressToUint8Array: function (uncompressed) {\n    var compressed = LZString.compress(uncompressed);\n    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character\n\n    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {\n      var current_value = compressed.charCodeAt(i);\n      buf[i*2] = current_value >>> 8;\n      buf[i*2+1] = current_value % 256;\n    }\n    return buf;\n  },\n\n  //decompress from uint8array (UCS-2 big endian format)\n  decompressFromUint8Array:function (compressed) {\n    if (compressed===null || compressed===undefined){\n        return LZString.decompress(compressed);\n    } else {\n        var buf=new Array(compressed.length/2); // 2 bytes per character\n        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {\n          buf[i]=compressed[i*2]*256+compressed[i*2+1];\n        }\n\n        var result = [];\n        buf.forEach(function (c) {\n          result.push(f(c));\n        });\n        return LZString.decompress(result.join(''));\n\n    }\n\n  },\n\n\n  //compress into a string that is already URI encoded\n  compressToEncodedURIComponent: function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});\n  },\n\n  //decompress from an output of compressToEncodedURIComponent\n  decompressFromEncodedURIComponent:function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    input = input.replace(/ /g, \"+\");\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });\n  },\n\n  compress: function (uncompressed) {\n    return LZString._compress(uncompressed, 16, function(a){return f(a);});\n  },\n  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {\n    if (uncompressed == null) return \"\";\n    var i, value,\n        context_dictionary= {},\n        context_dictionaryToCreate= {},\n        context_c=\"\",\n        context_wc=\"\",\n        context_w=\"\",\n        context_enlargeIn= 2, // Compensate for the first entry which should not count\n        context_dictSize= 3,\n        context_numBits= 2,\n        context_data=[],\n        context_data_val=0,\n        context_data_position=0,\n        ii;\n\n    for (ii = 0; ii < uncompressed.length; ii += 1) {\n      context_c = uncompressed.charAt(ii);\n      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {\n        context_dictionary[context_c] = context_dictSize++;\n        context_dictionaryToCreate[context_c] = true;\n      }\n\n      context_wc = context_w + context_c;\n      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {\n        context_w = context_wc;\n      } else {\n        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n          if (context_w.charCodeAt(0)<256) {\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<8 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          } else {\n            value = 1;\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1) | value;\n              if (context_data_position ==bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = 0;\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<16 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          }\n          context_enlargeIn--;\n          if (context_enlargeIn == 0) {\n            context_enlargeIn = Math.pow(2, context_numBits);\n            context_numBits++;\n          }\n          delete context_dictionaryToCreate[context_w];\n        } else {\n          value = context_dictionary[context_w];\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n\n\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        // Add wc to the dictionary.\n        context_dictionary[context_wc] = context_dictSize++;\n        context_w = String(context_c);\n      }\n    }\n\n    // Output the code for w.\n    if (context_w !== \"\") {\n      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n        if (context_w.charCodeAt(0)<256) {\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<8 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        } else {\n          value = 1;\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | value;\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = 0;\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<16 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        delete context_dictionaryToCreate[context_w];\n      } else {\n        value = context_dictionary[context_w];\n        for (i=0 ; i<context_numBits ; i++) {\n          context_data_val = (context_data_val << 1) | (value&1);\n          if (context_data_position == bitsPerChar-1) {\n            context_data_position = 0;\n            context_data.push(getCharFromInt(context_data_val));\n            context_data_val = 0;\n          } else {\n            context_data_position++;\n          }\n          value = value >> 1;\n        }\n\n\n      }\n      context_enlargeIn--;\n      if (context_enlargeIn == 0) {\n        context_enlargeIn = Math.pow(2, context_numBits);\n        context_numBits++;\n      }\n    }\n\n    // Mark the end of the stream\n    value = 2;\n    for (i=0 ; i<context_numBits ; i++) {\n      context_data_val = (context_data_val << 1) | (value&1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data_position = 0;\n        context_data.push(getCharFromInt(context_data_val));\n        context_data_val = 0;\n      } else {\n        context_data_position++;\n      }\n      value = value >> 1;\n    }\n\n    // Flush the last char\n    while (true) {\n      context_data_val = (context_data_val << 1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data.push(getCharFromInt(context_data_val));\n        break;\n      }\n      else context_data_position++;\n    }\n    return context_data.join('');\n  },\n\n  decompress: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });\n  },\n\n  _decompress: function (length, resetValue, getNextValue) {\n    var dictionary = [],\n        next,\n        enlargeIn = 4,\n        dictSize = 4,\n        numBits = 3,\n        entry = \"\",\n        result = [],\n        i,\n        w,\n        bits, resb, maxpower, power,\n        c,\n        data = {val:getNextValue(0), position:resetValue, index:1};\n\n    for (i = 0; i < 3; i += 1) {\n      dictionary[i] = i;\n    }\n\n    bits = 0;\n    maxpower = Math.pow(2,2);\n    power=1;\n    while (power!=maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n      bits |= (resb>0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n\n    switch (next = bits) {\n      case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 2:\n        return \"\";\n    }\n    dictionary[3] = c;\n    w = c;\n    result.push(c);\n    while (true) {\n      if (data.index > length) {\n        return \"\";\n      }\n\n      bits = 0;\n      maxpower = Math.pow(2,numBits);\n      power=1;\n      while (power!=maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n          data.position = resetValue;\n          data.val = getNextValue(data.index++);\n        }\n        bits |= (resb>0 ? 1 : 0) * power;\n        power <<= 1;\n      }\n\n      switch (c = bits) {\n        case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 2:\n          return result.join('');\n      }\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n      if (dictionary[c]) {\n        entry = dictionary[c];\n      } else {\n        if (c === dictSize) {\n          entry = w + w.charAt(0);\n        } else {\n          return null;\n        }\n      }\n      result.push(entry);\n\n      // Add w+entry[0] to the dictionary.\n      dictionary[dictSize++] = w + entry.charAt(0);\n      enlargeIn--;\n\n      w = entry;\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n    }\n  }\n};\n  return LZString;\n})();\n\nif (typeof define === 'function' && define.amd) {\n  define(function () { return LZString; });\n} else if( typeof module !== 'undefined' && module != null ) {\n  module.exports = LZString\n} else if( typeof angular !== 'undefined' && angular != null ) {\n  angular.module('LZString', [])\n  .factory('LZString', function () {\n    return LZString;\n  });\n}\n","import LZString from 'lz-string';\n\nexport class LocalStorageWrapper {\n    private prefix: string;\n    private readonly COMPRESSION_THRESHOLD = 10000;\n    private readonly COMPRESSION_MARKER = '__COMPRESSED__';\n\n    constructor(prefix = '') {\n      this.prefix = prefix;\n    }\n  \n    getKey(hash: string, url: string, targetLang: string): string {\n\n      // get rid of query params\n      const urlWithoutQuery = url.split('?')[0];\n      // Only encode the URL, not the whole key\n      return `${hash}-${encodeURIComponent(urlWithoutQuery)}-${targetLang}`;\n    }\n\n    private shouldCompress(value: string): boolean {\n        return value.length > this.COMPRESSION_THRESHOLD;\n    }\n\n    private compress(value: string): string {\n        try {\n            return LZString.compressToBase64(value);\n        } catch (error) {\n            console.error('Compression failed:', error);\n            return value;\n        }\n    }\n\n    private decompress(value: string): string {\n        try {\n            return LZString.decompressFromBase64(value) || value;\n        } catch (error) {\n            console.error('Decompression failed:', error);\n            return value;\n        }\n    }\n\n    getItem(key: string): any {\n      const prefixedKey = this.prefix + key;\n      const item = localStorage.getItem(prefixedKey);\n      if (!item) return null;\n\n      try {\n        // Check if the item is compressed\n        const decompressed = item.startsWith(this.COMPRESSION_MARKER) \n            ? this.decompress(item.slice(this.COMPRESSION_MARKER.length)) \n            : item;\n        return JSON.parse(decompressed);\n      } catch (e) {\n        console.error('Error parsing cached item:', e);\n        return null;\n      }\n    }\n  \n    setItem(key: string, value: any): void {\n      const prefixedKey = this.prefix + key;\n      const stringified = JSON.stringify(value);\n      \n      // Use requestIdleCallback to defer compression if available\n      const storeValue = () => {\n        try {\n          const finalValue = this.shouldCompress(stringified)\n              ? `${this.COMPRESSION_MARKER}${this.compress(stringified)}`\n              : stringified;\n          localStorage.setItem(prefixedKey, finalValue);\n        } catch (error) {\n          console.error('Error storing item:', error);\n          // Fallback to storing uncompressed value\n          localStorage.setItem(prefixedKey, stringified);\n        }\n      };\n\n      if (typeof requestIdleCallback !== 'undefined') {\n        requestIdleCallback(() => storeValue());\n      } else {\n        // Fallback to setTimeout if requestIdleCallback is not available\n        setTimeout(storeValue, 0);\n      }\n    }\n  \n    removeItem(key: string): void {\n      const prefixedKey = this.prefix + key;\n      localStorage.removeItem(prefixedKey);\n    }\n  \n    clear(): void {\n      if (this.prefix) {\n        for (let key in localStorage) {\n          if (key.startsWith(this.prefix)) {\n            localStorage.removeItem(key);\n          }\n        }\n      } else {\n        localStorage.clear();\n      }\n    }\n  \n    key(index: number): string | null {\n      return localStorage.key(index);\n    }\n  \n    get length(): number {\n      return localStorage.length;\n    }\n  }\n","import { TranslationService } from '../lib/translation/index'\nimport { DocumentNavigator } from '../lib/dom'\nimport { languages } from '../constants/languages'\nimport { BATCH_SIZE, DEFAULT_CONFIG } from '../constants'\nimport type { Language, TranslationConfig } from '../types'\nimport widgetTemplate from '../templates/html/widget.html?raw'\nimport { generateHashForContent, getUserLanguage, removeEmojis } from '../utils/utils'\nimport { CACHE_PREFIX } from '../constants'\nimport { LocalStorageWrapper } from '../lib/storage/localstorage'\n// import emojiRegex from 'emoji-regex'\ninterface WidgetElements {\n    trigger: HTMLDivElement | null\n    dropdown: HTMLDivElement | null\n    searchInput: HTMLInputElement | null\n    clearSearch: HTMLDivElement | null\n    languageItems: NodeListOf<HTMLDivElement> | null\n    loadingIndicator: HTMLDivElement | null\n}\n\nexport class TranslationWidget {\n    private config: Required<TranslationConfig>\n    private translationService: TranslationService\n    private currentLanguage: string\n    private widget: HTMLDivElement\n    private elements: WidgetElements\n    private autoDetectLanguage: boolean\n    private isTranslated: boolean = false\n    private userLanguage: string\n    private isTranslating: boolean = false\n    private observer: MutationObserver | null = null\n    private translationScheduled: boolean = false\n    private scheduleTimeout: number | null = null\n    private lastTranslated: { url: string, lang: string, hash: string } | null = null\n    private static instance: TranslationWidget | null = null\n    private currentTranslationPromise: Promise<void> | null = null\n    private lastRequestedLanguage: string | null = null\n    private translationRequestId: number = 0\n\n    constructor(publicKey: string, config: Partial<TranslationConfig> = {}) {\n        const allowedPositions = ['top-right', 'top-left', 'bottom-left', 'bottom-right'] as const;\n        let safeConfig = { ...DEFAULT_CONFIG, ...config };\n        if (safeConfig.position && !allowedPositions.includes(safeConfig.position)) {\n            console.warn(`Invalid position '${safeConfig.position}' passed to TranslationWidget. Falling back to 'top-right'.`);\n            safeConfig.position = 'top-right';\n        }\n        this.config = safeConfig as Required<TranslationConfig>;\n\n        if ( ! publicKey) {\n            throw new Error('Public key is required to initialize the translation widget')\n        }\n\n        if ( publicKey.startsWith('sk_')) {\n            throw new Error('Please use public api key for security reasons. You can get one from https://jigsawstack.com')\n        }\n\n        if( !publicKey.startsWith('pk_')) {\n            throw new Error('Please use proper api key. You can get one from https://jigsawstack.com')\n        }\n\n        this.translationService = new TranslationService(\n            publicKey,\n        )\n        this.autoDetectLanguage = this.config.autoDetectLanguage || false\n        this.currentLanguage = this.config.pageLanguage || 'en'\n        this.userLanguage = getUserLanguage()\n        this.widget = document.createElement('div')\n        this.elements = {\n            trigger: null,\n            dropdown: null,\n            searchInput: null,\n            clearSearch: null,\n            languageItems: null,\n            loadingIndicator: null\n        }\n        this.initialize()\n        TranslationWidget.instance = this\n    }\n\n    private initialize(): void {\n        if (!this.validateConfig()) return\n        \n        // Get language from URL parameter\n        const urlLang = this.getUrlParameter('lang')\n        let initialLang = this.config.pageLanguage;\n        if (urlLang) {\n            const supportedLang = languages.find(lang => lang.code === urlLang)\n            if (supportedLang) {\n                initialLang = urlLang\n            }\n        } else {\n            // Check localStorage for preferred language\n            const prefLang = localStorage.getItem('jss-pref');\n            if (prefLang && languages.find(lang => lang.code === prefLang)) {\n                initialLang = prefLang;\n            } else if (this.autoDetectLanguage) {\n                initialLang = this.userLanguage\n            }\n        }\n        this.currentLanguage = initialLang;\n        this.createWidget()\n        // Update icon if not default language\n        const triggerIcon = this.elements.trigger?.querySelector('.jigts-trigger-icon');\n        if (triggerIcon && this.currentLanguage !== this.config.pageLanguage) {\n            // Find the language name\n            const langObj = languages.find(lang => lang.code === this.currentLanguage);\n            const langName = langObj ? langObj.name : this.currentLanguage.toUpperCase();\n            triggerIcon.innerHTML = `<span class=\\\"jigts-lang-code\\\">${this.currentLanguage.toUpperCase()}</span><span class=\\\"jigts-lang-name\\\">${langName}</span>`;\n        }\n        this.setupEventListeners()\n        this.setupURLObserver()\n        this.setupContentObserver()\n\n        // Trigger translation immediately if language is different from page language\n        if (this.currentLanguage !== this.config.pageLanguage) {\n            this.translatePage(this.currentLanguage).catch(error => {\n                console.error('Initial translation error:', error);\n            });\n        }\n    }\n\n    private getUrlParameter(name: string): string | null {\n        const urlParams = new URLSearchParams(window.location.search)\n        return urlParams.get(name)\n    }\n\n    private setupContentObserver(): void {\n        this.observer = new MutationObserver((mutations) => {\n            mutations.forEach(mutation => {\n                if (this.widget.contains(mutation.target)) {\n                    return;\n                }\n                if (mutation.type === 'characterData' ||\n                    (mutation.type === 'childList' &&\n                        Array.from(mutation.addedNodes).some(node => node.nodeType === Node.TEXT_NODE))) {\n                }\n            });\n            if (this.isTranslating) return;\n            this.scheduleTranslation();\n        });\n        this.observeBody();\n    }\n\n    private observeBody() {\n        this.observer?.observe(document.body, {\n            childList: true,\n            subtree: true,\n            attributes: true,\n            characterData: true\n        });\n    }\n\n    private onUrlChange = () => {\n        this.scheduleTranslation();\n    }\n\n    private setupURLObserver(): void {\n        const historyMethods = ['pushState', 'replaceState'] as const;\n\n        historyMethods.forEach((method) => {\n            const original = history[method];\n            history[method] = function (\n                state: any,\n                title: string,\n                url?: string | URL | null\n            ) {\n                const result = original.call(this, state, title, url);\n                window.dispatchEvent(new Event(method));\n                return result;\n            };\n            window.addEventListener(method, this.onUrlChange);\n        });\n\n        // Also listen for popstate events (browser back/forward)\n        window.addEventListener('popstate', this.onUrlChange);\n    }\n\n    private validateConfig(): boolean {\n        if (!this.translationService) {\n            console.error(\n                'Translation service is required to initialize the translation widget'\n            )\n            return false\n        }\n        return true\n    }\n\n    private createWidget(): void {\n        const currentLanguageLabel = this.getCurrentLanguageLabel()\n        \n        // Create widget element\n        this.widget = document.createElement('div')\n        this.widget.className = `jigts-translation-widget jigts-position-${this.config.position || 'top-right'}`\n        \n        // Apply theme colors if provided\n        if (this.config.theme) {\n            if (this.config.theme.baseColor) {\n                this.widget.style.setProperty('--jigts-custom-base-color', this.config.theme.baseColor);\n            }\n            if (this.config.theme.textColor) {\n                this.widget.style.setProperty('--jigts-custom-text-color', this.config.theme.textColor);\n            }\n        }\n        \n        document.body.appendChild(this.widget)\n        \n        this.widget.innerHTML = this.createWidgetHTML(currentLanguageLabel)\n\n        // Cache element references\n        this.elements = {\n            trigger: this.widget.querySelector<HTMLDivElement>('.jigts-widget-trigger'),\n            dropdown: this.widget.querySelector<HTMLDivElement>('.jigts-widget-dropdown'),\n            searchInput: this.widget.querySelector<HTMLInputElement>('.jigts-search-input'),\n            clearSearch: this.widget.querySelector<HTMLDivElement>('.jigts-clear-search'),\n            languageItems: this.widget.querySelectorAll<HTMLDivElement>('.jigts-language-item'),\n            loadingIndicator: this.widget.querySelector<HTMLDivElement>('.jigts-loading-spinner')\n        }\n\n        // Initialize trigger text with fade-in class\n        const triggerSpan = this.elements.trigger?.querySelector('span')\n        if (triggerSpan) {\n            triggerSpan.classList.add('jigts-fade-in')\n        }\n    }\n\n    private getCurrentLanguageLabel(): string {\n        return (\n            languages.find(\n                (language: Language) => language.code === this.currentLanguage\n            )?.native || 'English'\n        )\n    }\n\n    private createWidgetHTML(currentLanguageLabel: string): string {\n        const languageOptions = this.createLanguageOptions()\n        const languageCount = languages.length\n        return widgetTemplate\n            .replace('{{languageOptions}}', languageOptions)\n            .replace('{{currentLanguageLabel}}', currentLanguageLabel)\n            .replace('{{languageCount}}', languageCount.toString())\n    }\n\n    private createLanguageOptions(): string {\n        const currentLang = this.currentLanguage\n        const currentLanguage = languages.find(\n            (lang: Language) => lang.code === currentLang\n        )\n        const otherLanguages = languages\n            .filter((lang: Language) => lang.code !== currentLang)\n            .sort((a: Language, b: Language) =>\n                a.native.localeCompare(b.native)\n            )\n\n        if (!currentLanguage) return ''\n\n        const createLanguageItem = (lang: Language, isSelected: boolean = false) => `\n            <div class=\"jigts-language-item ${isSelected ? 'jigts-selected' : ''}\" tabindex=\"0\" role=\"option\" aria-selected=\"${isSelected}\" data-language-code=\"${lang.code}\">\n                <div class=\"jigts-language-info\">\n                    <div class=\"jigts-language-main\">\n                        <span class=\"jigts-language-name\">${lang.name}</span>\n                        <div class=\"jigts-language-code\">${lang.code}</div>\n                    </div>\n                    <div class=\"jigts-language-details\">\n                        <span class=\"jigts-language-native\">${lang.native}</span>\n                    </div>\n                </div>\n                <svg class=\"jigts-check-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\"></path>\n                </svg>\n            </div>\n        `\n\n        return `\n            ${createLanguageItem(currentLanguage, true)}\n            ${otherLanguages.map(lang => createLanguageItem(lang)).join('')}\n        `\n    }\n\n    private async updateTriggerText(newText: string): Promise<void> {\n        const triggerSpan = this.elements.trigger?.querySelector('span')\n        if (!triggerSpan) return\n\n        // Force a reflow to ensure the animation plays\n        triggerSpan.offsetHeight\n\n        // Start fade out\n        triggerSpan.classList.remove('jigts-fade-in')\n        triggerSpan.classList.add('jigts-fade-out')\n\n        // Wait for fade out\n        await new Promise(resolve => setTimeout(resolve, 300))\n\n        // Update text\n        triggerSpan.textContent = newText\n\n        // Force a reflow\n        triggerSpan.offsetHeight\n\n        // Start fade in\n        triggerSpan.classList.remove('jigts-fade-out')\n        triggerSpan.classList.add('jigts-fade-in')\n    }\n\n\n    private getTextToTranslate(\n        node: Text,\n        parent: HTMLElement,\n        targetLang: string\n    ): string | null {\n        if (!parent.hasAttribute('data-original-text')) {\n            const originalText = node.textContent?.trim()\n            if (originalText) {\n                parent.setAttribute('data-translated-lang', targetLang)\n                parent.setAttribute('data-original-text', originalText)\n                // Store original font size if not already stored\n                if (!parent.hasAttribute('data-original-font-size')) {\n                    const computedStyle = window.getComputedStyle(parent)\n                    parent.setAttribute('data-original-font-size', computedStyle.fontSize)\n                }\n                return originalText\n            }\n        } else {\n            const textToTranslate = node.textContent?.trim()\n            if (this.currentLanguage !== 'en' && targetLang !== 'en') {\n                parent.setAttribute('data-translated-lang', targetLang)\n                return parent.getAttribute('data-original-text')\n            }\n            return textToTranslate || null\n        }\n        return null\n    }\n\n    private calculateFontSize(text: string, originalFontSize: string, originalText: string): string {\n        const baseFontSize = 12; // Minimum font size in pixels\n        const maxFontSize = parseInt(originalFontSize); // Maximum font size is the original size\n        const textLength = text.length;\n        const originalLength = originalText.length;\n        \n        // Only scale down if translated text is longer than original\n        if (textLength <= originalLength) {\n            return originalFontSize;\n        }\n        \n        // Calculate font size based on text length\n        // The longer the text, the smaller the font size\n        // We use a logarithmic scale to make the reduction more gradual\n        const fontSize = Math.max(\n            baseFontSize,\n            Math.min(\n                maxFontSize,\n                maxFontSize * (1 - Math.log(textLength) / 10)\n            )\n        );\n        \n        return `${fontSize}px`;\n    }\n\n    private updateLoadingState(isLoading: boolean): void {\n        const triggerContent = this.elements.trigger?.querySelector<HTMLDivElement>('.jigts-trigger-content')\n        const triggerLoading = this.elements.trigger?.querySelector<HTMLDivElement>('.jigts-trigger-loading')\n        if (triggerContent && triggerLoading) {\n            if (isLoading) {\n                triggerContent.style.display = 'none'\n                triggerLoading.style.display = 'flex'\n            } else {\n                triggerLoading.style.display = 'none'\n                triggerContent.style.display = 'flex'\n            }\n        }\n    }\n\n    private async translatePage(targetLang: string): Promise<void> {\n        // Increment the request ID for each new translation\n        const requestId = ++this.translationRequestId;\n        this.lastRequestedLanguage = targetLang;\n        this.updateLoadingState(true);\n        // If there's already a translation in progress, wait for it\n        if (this.currentTranslationPromise) {\n            await this.currentTranslationPromise;\n        }\n        // If target language is the default page language, restore original text\n        if (targetLang === this.config.pageLanguage) {\n            this.resetTranslations();\n            // Only hide loader if this is the latest request\n            if (requestId === this.translationRequestId) {\n                this.updateLoadingState(false);\n            }\n            return;\n        }\n        // Create a new promise for this translation\n        this.currentTranslationPromise = this._translatePage(targetLang);\n        try {\n            await this.currentTranslationPromise;\n        } catch (error) {\n            console.error('Translation failed:', error);\n            // If translation fails, reset to default language\n            this.resetToDefaultLanguage();\n        } finally {\n            // Only hide loader if this is the latest request\n            if (requestId === this.translationRequestId) {\n                this.currentTranslationPromise = null;\n                this.updateLoadingState(false);\n            }\n        }\n    }\n\n    private resetToDefaultLanguage(): void {\n        // Reset translations\n        this.resetTranslations();\n        \n        // Update language states\n        this.lastRequestedLanguage = this.config.pageLanguage;\n        this.currentLanguage = this.config.pageLanguage;\n        \n        // Update UI\n        const languageItems = this.widget.querySelectorAll<HTMLElement>('.jigts-language-item');\n        languageItems.forEach(item => {\n            const isSelected = item.getAttribute('data-language-code') === this.config.pageLanguage;\n            item.classList.toggle('jigts-selected', isSelected);\n            item.setAttribute('aria-selected', isSelected.toString());\n        });\n\n        // Update localStorage preference to original language\n        console.log('resetToDefaultLanguage', this.config.pageLanguage)\n        localStorage.setItem('jss-pref', this.config.pageLanguage);\n        \n        // Update trigger icon\n        const triggerIcon = this.elements.trigger?.querySelector('.jigts-trigger-icon');\n        if (triggerIcon) {\n            triggerIcon.innerHTML = this.getLanguageSVG();\n        }\n\n        // Update translation state\n        this.isTranslated = false;\n        this.updateResetButtonVisibility();\n    }\n\n    private async _translatePage(targetLang: string): Promise<void> {\n        this.isTranslating = true;\n        this.observer?.disconnect(); // Pause observing during translation\n        try {\n            const nodes = DocumentNavigator.findTranslatableContent();\n            const batches = DocumentNavigator.divideIntoGroups(nodes, BATCH_SIZE);\n\n            const cache = new LocalStorageWrapper(CACHE_PREFIX)\n            let hash = generateHashForContent(nodes)\n            // Store all nodes and their corresponding texts for each batch\n            const allBatchNodes: Node[][] = [];\n            const allBatchTexts: string[][] = [];\n\n            // Prepare batches\n            batches.forEach(batch => {\n                const textsToTranslate: string[] = [];\n                const batchNodes: Node[] = [];\n                batch.forEach((node: Node) => {\n                    if (node.nodeType !== Node.TEXT_NODE) return;\n                    const parent = node.parentElement;\n                    if (!parent) return;\n\n                    const translatedLang = parent.getAttribute('data-translated-lang')\n\n                    // Skip if parent already has data-original-text and we're not translating to English\n                    if (parent.hasAttribute('data-original-text') && targetLang === translatedLang) {\n                        return;\n                    }\n\n                    let textToTranslate = this.getTextToTranslate(\n                        node as Text,\n                        parent,\n                        targetLang\n                    );\n                    textToTranslate = removeEmojis(textToTranslate || '')\n                    if (textToTranslate.length === 0 || textToTranslate.length === 1) {\n                        return;\n                    }\n\n                    if (textToTranslate) {\n                        textsToTranslate.push(textToTranslate.trim());\n                        batchNodes.push(node);\n                    }\n                });\n                allBatchNodes.push(batchNodes);\n                allBatchTexts.push(textsToTranslate);\n            });\n\n            // Only keep non-empty batches\n            const nonEmptyBatchNodes: Node[][] = [];\n            const nonEmptyBatchTexts: string[][] = [];\n            allBatchTexts.forEach((texts, i) => {\n                if (texts.length > 0) {\n                    nonEmptyBatchTexts.push(texts);\n                    nonEmptyBatchNodes.push(allBatchNodes[i]);\n                }\n            });\n\n            const key = cache.getKey(hash, window.location.href, targetLang)\n            const cachedTranslations = cache.getItem(key)\n            if (cachedTranslations && cachedTranslations[0]) {\n                const fullTranslations = cachedTranslations[0];\n                // Only update DOM if this is still the most recently requested language\n                if (this.lastRequestedLanguage === targetLang) {\n                    nodes.forEach((node, idx) => {\n                        if (node.nodeType === Node.TEXT_NODE) {\n                            const parent = node.parentElement;\n                            if (parent) {\n                                const originalText = parent.getAttribute('data-original-text') || '';\n                                const originalFontSize = parent.getAttribute('data-original-font-size') || '16px';\n                                const newFontSize = this.calculateFontSize(fullTranslations[idx], originalFontSize, originalText);\n                                parent.style.fontSize = newFontSize;\n                            }\n                            node.textContent = fullTranslations[idx];\n                        }\n                    });\n                    this.isTranslated = true;\n                    this.updateResetButtonVisibility();\n                }\n                return;\n            }\n\n            // Send all batch requests in parallel\n            const allTranslatedTexts = await Promise.all(\n                nonEmptyBatchTexts.map(texts =>\n                    this.translationService.translateBatchText(texts, targetLang)\n                )\n            );\n\n            if (allTranslatedTexts.length === 0) {\n                if (this.lastRequestedLanguage === targetLang) {\n                    this.isTranslated = true;\n                    this.updateResetButtonVisibility();\n                }\n                return;\n            }\n\n            // Check if all batches failed (returned original texts)\n            const allBatchesFailed = allTranslatedTexts.every((translations, batchIndex) => {\n                const originalTexts = nonEmptyBatchTexts[batchIndex];\n                return translations.every((translation, index) => translation === originalTexts[index]);\n            });\n\n            if (allBatchesFailed) {\n                console.warn('All translations failed, not caching results');\n                throw new Error('All translation batches failed');\n            }\n\n            // Build a full translation array for all nodes\n            const fullTranslations: string[] = [];\n            nodes.forEach((node, nodeIdx) => {\n                const parent = node.parentElement as HTMLElement | null;\n                // Check if this node was included in the API call\n                const batchIdx = nonEmptyBatchNodes.findIndex(batch => batch.includes(node));\n                if (batchIdx !== -1) {\n                    // This node was translated in this batch\n                    const textIdx = nonEmptyBatchNodes[batchIdx].indexOf(node);\n                    const translatedText = allTranslatedTexts[batchIdx][textIdx];\n                    fullTranslations[nodeIdx] = translatedText;\n                    \n\n                    console.log(this.lastRequestedLanguage, targetLang)\n                    // Only update DOM if this is still the most recently requested language\n                    if (this.lastRequestedLanguage === targetLang) {\n                        // Apply font size adjustment\n                        if (parent) {\n                            const originalText = parent.getAttribute('data-original-text') || '';\n                            const originalFontSize = parent.getAttribute('data-original-font-size') || '16px';\n                            const newFontSize = this.calculateFontSize(translatedText, originalFontSize, originalText);\n                            parent.style.fontSize = newFontSize;\n                        }\n                            node.textContent = translatedText;\n                        }\n                } else if (parent && parent.getAttribute('data-translated-lang') === targetLang) {\n                    // Already translated, use current text\n                    fullTranslations[nodeIdx] = node.textContent || '';\n                } else {\n                    fullTranslations[nodeIdx] = node.textContent || '';\n                }\n            });\n\n            // Always cache the translations, even if they're not the most recent\n            cache.setItem(key, [fullTranslations]);\n\n            // Only update UI state if this is still the most recently requested language\n            if (this.lastRequestedLanguage === targetLang) {\n                this.isTranslated = true;\n                this.updateResetButtonVisibility();\n            }\n        } finally {\n            this.isTranslating = false;\n            this.observeBody(); // Resume observing after translation\n        }\n    }\n\n    private updateResetButtonVisibility(): void {\n        const resetButton = this.widget.querySelector<HTMLElement>('.jigts-reset-option')\n        if (resetButton) {\n            resetButton.style.display = this.isTranslated ? 'flex' : 'none'\n        }\n    }\n\n\n    resetTranslations(): void {\n        if (this.observer) {\n            this.observer.disconnect();\n        }\n        const elements = document.querySelectorAll<HTMLElement>('[data-original-text]')\n        elements.forEach(element => {\n            const textNodes = Array.from(element.childNodes).filter(\n                (node): node is Text => node.nodeType === Node.TEXT_NODE\n            )\n            if (textNodes.length > 0) {\n                const originalText = element.getAttribute('data-original-text')\n                if (originalText) {\n                    textNodes[0].textContent = originalText\n                }\n            }\n            // Restore original font size\n            const originalFontSize = element.getAttribute('data-original-font-size')\n            if (originalFontSize) {\n                element.style.fontSize = originalFontSize\n            }\n            element.removeAttribute('data-original-text')\n            element.removeAttribute('data-translated-lang')\n            element.removeAttribute('data-original-font-size')\n        })\n        this.isTranslated = false;\n\n        this.currentLanguage = this.config.pageLanguage;\n        // Update lastTranslated to reflect the reset state\n        const nodes = DocumentNavigator.findTranslatableContent();\n        const hash = generateHashForContent(nodes);\n        this.lastTranslated = {\n            url: window.location.href,\n            lang: this.config.pageLanguage,\n            hash\n        };\n\n        this.updateResetButtonVisibility();\n        this.observeBody(); // Reconnect observer\n    }\n\n    private adjustDropdownPosition(): void {\n        const { dropdown, trigger } = this.elements;\n        if (!dropdown || !trigger) return;\n\n        const triggerRect = trigger.getBoundingClientRect();\n        const dropdownRect = dropdown.getBoundingClientRect();\n        const viewportWidth = window.innerWidth;\n        const viewportHeight = window.innerHeight;\n\n        dropdown.style.top = '';\n        dropdown.style.bottom = '';\n        dropdown.style.left = '';\n        dropdown.style.right = '';\n        dropdown.style.transform = '';\n\n        const spaceBelow = viewportHeight - triggerRect.bottom;\n        const spaceAbove = triggerRect.top;\n        const spaceRight = viewportWidth - triggerRect.right;\n        const spaceLeft = triggerRect.left;\n\n        // Determine vertical position\n        if (spaceBelow < dropdownRect.height && spaceAbove > spaceBelow) {\n            dropdown.style.bottom = '100%';\n            dropdown.style.top = 'auto';\n            dropdown.style.marginBottom = '0.5rem';\n            dropdown.style.marginTop = '0';\n        } else {\n            dropdown.style.top = '100%';\n            dropdown.style.bottom = 'auto';\n            dropdown.style.marginTop = '0.5rem';\n            dropdown.style.marginBottom = '0';\n        }\n\n        // Determine horizontal position\n        if (spaceRight < dropdownRect.width && spaceLeft > spaceRight) {\n            dropdown.style.right = '0';\n            dropdown.style.left = 'auto';\n        } else {\n            dropdown.style.left = '0';\n            dropdown.style.right = 'auto';\n        }\n\n        const finalRect = dropdown.getBoundingClientRect();\n        \n        if (finalRect.right > viewportWidth) {\n            dropdown.style.right = '0';\n            dropdown.style.left = 'auto';\n        }\n        \n        if (finalRect.left < 0) {\n            dropdown.style.left = '0';\n            dropdown.style.right = 'auto';\n        }\n    }\n\n    private setupEventListeners(): void {\n        const {\n            trigger,\n            dropdown,\n            searchInput,\n            clearSearch,\n            languageItems,\n        } = this.elements\n\n        if (!trigger || !dropdown || !searchInput || !clearSearch || !languageItems) {\n            console.error('Failed to find required elements')\n            return\n        }\n\n        // Reset button functionality\n        const resetButton = this.widget.querySelector<HTMLElement>('.jigts-reset-option')\n        if (resetButton) {\n            resetButton.addEventListener('click', () => {\n                if (this.isTranslating) return\n                this.resetToDefaultLanguage()\n                resetButton.classList.remove('jigts-active')\n                this.isTranslated = false\n                this.updateResetButtonVisibility()\n                // Reset language selector to page language\n                const languageItems = this.widget.querySelectorAll<HTMLElement>('.jigts-language-item')\n                languageItems.forEach(item => {\n                    const isSelected = item.getAttribute('data-language-code') === this.config.pageLanguage\n                    item.classList.toggle('jigts-selected', isSelected)\n                    item.setAttribute('aria-selected', isSelected.toString())\n                })\n                // Restore SVG icon\n                const triggerIcon = this.elements.trigger?.querySelector('.jigts-trigger-icon');\n                if (triggerIcon) {\n                    triggerIcon.innerHTML = this.getLanguageSVG();\n                }\n                // Close dropdown\n                dropdown.classList.remove('jigts-open')\n                trigger.setAttribute('aria-expanded', 'false')\n                // Remove has-translation class\n                const triggerContent = trigger.querySelector<HTMLDivElement>('.jigts-trigger-content')\n                if (triggerContent) triggerContent.classList.remove('jigts-has-translation')\n            })\n        }\n\n        this.updateResetButtonVisibility()\n\n        trigger.addEventListener('click', () => {\n            dropdown.classList.toggle('jigts-open')\n            const isOpen = dropdown.classList.contains('jigts-open')\n            trigger.setAttribute('aria-expanded', isOpen.toString())\n            if (isOpen) {\n                this.adjustDropdownPosition()\n                searchInput.focus()\n            }\n        })\n\n        window.addEventListener('resize', () => {\n            if (dropdown.classList.contains('jigts-open')) {\n                this.adjustDropdownPosition()\n            }\n        })\n\n        document.addEventListener('click', (e: MouseEvent) => {\n            if (!(e.target as Element).closest('.jigts-translation-widget')) {\n                if (dropdown.classList.contains('jigts-open')) {\n                    dropdown.classList.add('jigts-closing')\n                    setTimeout(() => {\n                        dropdown.classList.remove('jigts-open', 'jigts-closing')\n                        trigger.setAttribute('aria-expanded', 'false')\n                    }, 300)\n                }\n            }\n        })\n\n        searchInput.addEventListener('input', () => {\n            const searchTerm = searchInput.value.toLowerCase()\n            const hasValue = searchTerm.length > 0\n            clearSearch.classList.toggle('jigts-visible', hasValue)\n\n            const items = this.widget.querySelectorAll<HTMLElement>('.jigts-language-item')\n            const noResults = this.widget.querySelector<HTMLElement>('.jigts-no-results')\n            let visibleCount = 0\n\n            items.forEach(item => {\n                const name = item.querySelector('.jigts-language-name')?.textContent?.toLowerCase() || ''\n                const native = item.querySelector('.jigts-language-native')?.textContent?.toLowerCase() || ''\n                const code = item.querySelector('.jigts-language-code')?.textContent?.toLowerCase() || ''\n                const region = item.querySelector('.jigts-language-region')?.textContent?.toLowerCase() || ''\n\n                const matches = name.includes(searchTerm) ||\n                    native.includes(searchTerm) ||\n                    code.includes(searchTerm) ||\n                    region.includes(searchTerm)\n\n                item.style.display = matches ? '' : 'none'\n                if (matches) visibleCount++\n            })\n\n            if (noResults) {\n                noResults.style.display = visibleCount === 0 ? 'flex' : 'none'\n            }\n        })\n\n        clearSearch.addEventListener('click', () => {\n            searchInput.value = ''\n            clearSearch.classList.remove('jigts-visible')\n            searchInput.focus()\n\n            const items = this.widget.querySelectorAll<HTMLElement>('.jigts-language-item')\n            const noResults = this.widget.querySelector<HTMLElement>('.jigts-no-results')\n\n            items.forEach(item => {\n                item.style.display = ''\n            })\n\n            if (noResults) {\n                noResults.style.display = 'none'\n            }\n        })\n\n        languageItems.forEach(item => {\n            item.addEventListener('click', async () => {\n                languageItems.forEach(i => {\n                    i.classList.remove('jigts-selected')\n                    i.setAttribute('aria-selected', 'false')\n                })\n\n                item.classList.add('jigts-selected')\n                item.setAttribute('aria-selected', 'true')\n\n                const langName = item.querySelector('.jigts-language-name')?.textContent\n                const langCode = item.getAttribute('data-language-code')\n\n                // Close dropdown immediately\n                dropdown.classList.remove('jigts-open')\n                trigger.setAttribute('aria-expanded', 'false')\n\n                if (langName) {\n                    await this.updateTriggerText(langName)\n                }\n\n                if (langCode) {\n                    localStorage.setItem('jss-pref', langCode);\n                }\n\n                const triggerIcon = this.elements.trigger?.querySelector('.jigts-trigger-icon');\n                if (triggerIcon && langCode && langName) {\n                    triggerIcon.innerHTML = `<span class=\\\"jigts-lang-code\\\">${langCode.toUpperCase()}</span><span class=\\\"jigts-lang-name\\\">${langName}</span>`;\n                }\n\n                const triggerContent = trigger.querySelector<HTMLDivElement>('.jigts-trigger-content')\n                if (langCode && langCode !== this.currentLanguage) {\n                    if (triggerContent) triggerContent.classList.add('jigts-has-translation')\n                    const triggerLoading = trigger.querySelector<HTMLDivElement>('.jigts-trigger-loading')\n                    if (triggerContent && triggerLoading) {\n                        triggerContent.style.display = 'none'\n                        triggerLoading.style.display = 'flex'\n                    }\n\n                    try {\n                        await this.translatePage(langCode)\n                        this.currentLanguage = langCode\n                    } catch (error) {\n                        console.error('Translation error:', error)\n                        alert('An error occurred during translation. Please try again.')\n                    } \n                } else if (triggerContent) {\n                    triggerContent.classList.remove('jigts-has-translation')\n                }\n            })\n        })\n\n        document.addEventListener('keydown', (e: KeyboardEvent) => {\n            if (!dropdown.classList.contains('jigts-open')) return\n\n            if (e.key === 'Escape') {\n                dropdown.classList.remove('jigts-open')\n                trigger.setAttribute('aria-expanded', 'false')\n                trigger.focus()\n            }\n        })\n    }\n\n    private scheduleTranslation() {\n        if (this.translationScheduled) return;\n        const currentUrl = window.location.href;\n        const currentLang = this.currentLanguage;\n        const nodes = DocumentNavigator.findTranslatableContent();\n        const hash = generateHashForContent(nodes);\n        if (this.lastTranslated && this.lastTranslated.url === currentUrl && this.lastTranslated.lang === currentLang && this.lastTranslated.hash === hash) {\n            return;\n        }\n        this.translationScheduled = true;\n        if (this.scheduleTimeout) clearTimeout(this.scheduleTimeout);\n        this.scheduleTimeout = window.setTimeout(() => {\n            this.translationScheduled = false;\n            if (this.currentLanguage !== this.config.pageLanguage) {\n                this.lastTranslated = { url: currentUrl, lang: currentLang, hash };\n                const triggerContent = this.elements.trigger?.querySelector<HTMLDivElement>('.jigts-trigger-content')\n                const triggerLoading = this.elements.trigger?.querySelector<HTMLDivElement>('.jigts-trigger-loading')\n                if (triggerContent && triggerLoading) {\n                    triggerContent.style.display = 'none'\n                    triggerLoading.style.display = 'flex'\n                }\n                this.translatePage(this.currentLanguage)\n                    .then(() => {\n                        const languageItems = this.widget.querySelectorAll<HTMLElement>('.jigts-language-item')\n                        languageItems.forEach(item => {\n                            const isSelected = item.getAttribute('data-language-code') === this.currentLanguage\n                            item.classList.toggle('jigts-selected', isSelected)\n                            item.setAttribute('aria-selected', isSelected.toString())\n                        })\n                    })\n                    .catch(error => {\n                        console.error('Auto-translation error:', error)\n                    })\n            }\n        }, 200);\n    }\n\n    /**\n     * Public method to translate the page to a specific language\n     * @param langCode The language code to translate to\n     * @returns Promise that resolves when translation is complete\n     */\n    public async translateTo(langCode: string): Promise<void> {\n        if (this.isTranslating) {\n            console.warn('Translation already in progress')\n            return\n        }\n\n        const supportedLang = languages.find(lang => lang.code === langCode)\n        if (!supportedLang) {\n            console.error(`Unsupported language code: ${langCode}`)\n            return\n        }\n\n        if (langCode === this.currentLanguage) {\n            console.log('Page is already in the requested language')\n            return\n        }\n\n        try {\n            await this.translatePage(langCode)\n            this.currentLanguage = langCode\n            \n            // Update UI to reflect the selected language\n            const languageItems = this.widget.querySelectorAll<HTMLElement>('.jigts-language-item')\n            languageItems.forEach(item => {\n                const isSelected = item.getAttribute('data-language-code') === langCode\n                item.classList.toggle('jigts-selected', isSelected)\n                item.setAttribute('aria-selected', isSelected.toString())\n            })\n\n            // Update trigger text\n            const triggerContent = this.elements.trigger?.querySelector<HTMLDivElement>('.jigts-trigger-content')\n            if (triggerContent) {\n                triggerContent.classList.add('jigts-has-translation')\n                const triggerSpan = triggerContent.querySelector('span')\n                if (triggerSpan) {\n                    this.updateTriggerText(supportedLang.name)\n                }\n            }\n        } catch (error) {\n            console.error('Translation error:', error)\n            throw error\n        }\n    }\n\n    /**\n     * Get the current instance of TranslationWidget\n     * @returns The current TranslationWidget instance or null if not initialized\n     */\n    public static getInstance(): TranslationWidget | null {\n        return TranslationWidget.instance\n    }\n\n    // Add this helper method to the class\n    private getLanguageSVG(): string {\n        return `\\n            <svg class=\\\"jigts-languages-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                    d=\\\"M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129\\\">\\n                </path>\\n            </svg>\\n        `;\n    }\n}\n\n// Expose the translate function globally\ndeclare global {\n    interface Window {\n        translate: (langCode: string) => Promise<void>\n    }\n}\n\n// Add the global translate function\nwindow.translate = async (langCode: string): Promise<void> => {\n    const instance = TranslationWidget.getInstance()\n    if (!instance) {\n        console.error('Translation widget not initialized')\n        return\n    }\n    await instance.translateTo(langCode)\n}\n","export default \"<!-- Widget Trigger Button -->\\n<div class=\\\"jigts-widget-trigger\\\" tabindex=\\\"0\\\" role=\\\"button\\\" aria-label=\\\"Open translation menu\\\" aria-expanded=\\\"false\\\">\\n    <!-- Normal State -->\\n    <div class=\\\"jigts-trigger-content\\\">\\n        <span class=\\\"jigts-trigger-icon\\\">\\n            <svg class=\\\"jigts-languages-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                    d=\\\"M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129\\\">\\n                </path>\\n            </svg>\\n        </span>\\n    </div>\\n\\n    <!-- Loading State (hidden by default) -->\\n    <div class=\\\"jigts-trigger-loading\\\" style=\\\"display: none;\\\">\\n        <div class=\\\"jigts-loading-spinner\\\"></div>\\n    </div>\\n</div>\\n\\n<!-- Dropdown Menu -->\\n<div class=\\\"jigts-widget-dropdown\\\">\\n    <!-- Header -->\\n    <div class=\\\"jigts-dropdown-header\\\">\\n        <div class=\\\"jigts-dropdown-title\\\">\\n            <div class=\\\"jigts-title-left\\\">\\n                <svg class=\\\"jigts-languages-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                        d=\\\"M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129\\\">\\n                    </path>\\n                </svg>\\n                <span class=\\\"jigts-title-text\\\">Select Language</span>\\n            </div>\\n            <div class=\\\"jigts-language-count\\\">{{languageCount}} languages</div>\\n        </div>\\n\\n        <!-- Search Input -->\\n        <div class=\\\"jigts-search-container\\\">\\n            <svg class=\\\"jigts-search-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                    d=\\\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\\\"></path>\\n            </svg>\\n            <input type=\\\"text\\\" class=\\\"jigts-search-input\\\" placeholder=\\\"Search languages...\\\" aria-label=\\\"Search languages\\\">\\n            <svg class=\\\"jigts-clear-search\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M6 18L18 6M6 6l12 12\\\">\\n                </path>\\n            </svg>\\n        </div>\\n    </div>\\n\\n    <!-- Reset Option -->\\n    <div class=\\\"jigts-reset-option\\\" tabindex=\\\"0\\\" role=\\\"button\\\" aria-label=\\\"Reset to original language\\\">\\n        <svg class=\\\"jigts-reset-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n            <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                d=\\\"M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6\\\"></path>\\n        </svg>\\n        <div class=\\\"jigts-reset-text\\\">\\n            <span class=\\\"jigts-reset-title\\\">Original Language</span>\\n            <span class=\\\"jigts-reset-subtitle\\\">Reset translation</span>\\n        </div>\\n    </div>\\n\\n    <!-- Language List -->\\n    <div class=\\\"jigts-language-list\\\">\\n        {{languageOptions}}\\n        <div class=\\\"jigts-no-results\\\" style=\\\"display: none;\\\">\\n            <svg class=\\\"jigts-no-results-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                    d=\\\"M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\\\"></path>\\n            </svg>\\n            <span>No languages found</span>\\n        </div>\\n    </div>\\n</div>\"","import styles from './translation-widget.css?inline'\nimport { TranslationWidget } from './widget'\nimport type { TranslationConfig } from './types'\n\ndeclare global {\n    interface Window {\n        TranslationWidget: (\n            publicKey: string,\n            options: {\n                pageLanguage: string;\n                position: string;\n                autoDetectLanguage: boolean;\n                theme?: {\n                    baseColor?: string;\n                    textColor?: string;\n                };\n            },\n            config?: TranslationConfig\n        ) => TranslationWidget\n    }\n}\n\nlet widgetInstance: TranslationWidget | undefined;\n\n\n\nconst initializeTranslationWidget = (\n    publicKey: string,\n    config?: TranslationConfig\n): TranslationWidget => {\n    if (typeof window === 'undefined') {\n        throw new Error(\n            'Translation widget can only be used in browser environment'\n        )\n    }\n\n    const initWidget = () => {\n        if (!widgetInstance) {\n            // Ensure styles are injected\n            if (!document.querySelector('style[data-translation-widget]')) {\n                const style = document.createElement('style')\n                style.setAttribute('data-translation-widget', '')\n                style.textContent = styles\n                document.head.appendChild(style)\n            }\n            widgetInstance = new TranslationWidget(publicKey, config)\n        }\n        return widgetInstance;\n    }\n\n    if (document.readyState === 'loading') {\n        window.addEventListener('DOMContentLoaded', initWidget)\n        return undefined as any; // Widget will be created after DOMContentLoaded\n    } else {\n        return initWidget()\n    }\n}\n\nexport default initializeTranslationWidget\n"],"names":["TranslationService","constructor","publicKey","__publicField","this","hits","misses","getCacheMetrics","cacheMetrics","translateBatchText","texts","targetLang","maxRetries","retryDelay","attempt","response","fetch","apiUrl","method","headers","body","JSON","stringify","text","target_language","ok","error","Error","statusText","status","result","json","Array","isArray","translated_text","console","Promise","res","setTimeout","languages","code","name","native","writing_system","rtl","generateHashForContent","nodes","key","seed","remainder","length","bytes","h1","c1","c2","i","k1","charCodeAt","h1b","murmurhash3_32_gc","map","node","nodeType","Node","TEXT_NODE","parent","parentElement","hasAttribute","_a","getAttribute","replace","trim","_b","textContent","toLocaleLowerCase","join","toLowerCase","toString","removeEmojis","DocumentNavigator","findTranslatableContent","validator","acceptNode","NodeFilter","FILTER_REJECT","container","closest","classList","contains","FILTER_ACCEPT","navigator","document","createTreeWalker","SHOW_TEXT","results","currentNode","nextNode","textWithoutEmojis","push","divideIntoGroups","items","groupSize","groups","slice","containsTranslatableContent","tagName","getContainer","DEFAULT_CONFIG","primaryColor","pageLanguage","autoDetectLanguage","position","LZString","f","String","fromCharCode","keyStrBase64","keyStrUriSafe","baseReverseDic","getBaseValue","alphabet","character","charAt","compressToBase64","input","_compress","a","decompressFromBase64","_decompress","index","compressToUTF16","decompressFromUTF16","compressed","compressToUint8Array","uncompressed","compress","buf","Uint8Array","TotalLen","current_value","decompressFromUint8Array","decompress","forEach","c","compressToEncodedURIComponent","decompressFromEncodedURIComponent","bitsPerChar","getCharFromInt","value","ii","context_dictionary","context_dictionaryToCreate","context_c","context_wc","context_w","context_enlargeIn","context_dictSize","context_numBits","context_data","context_data_val","context_data_position","Object","prototype","hasOwnProperty","call","Math","pow","resetValue","getNextValue","w","bits","resb","maxpower","power","dictionary","enlargeIn","dictSize","numBits","entry","data","val","module","exports","angular","factory","LocalStorageWrapper","prefix","getKey","hash","url","urlWithoutQuery","split","encodeURIComponent","shouldCompress","COMPRESSION_THRESHOLD","getItem","prefixedKey","item","localStorage","decompressed","startsWith","COMPRESSION_MARKER","parse","e","setItem","stringified","storeValue","finalValue","requestIdleCallback","removeItem","clear","_TranslationWidget","config","scheduleTranslation","safeConfig","includes","warn","translationService","currentLanguage","userLanguage","userLanguages","window","find","lang","getUserLanguage","widget","createElement","elements","trigger","dropdown","searchInput","clearSearch","languageItems","loadingIndicator","initialize","instance","validateConfig","urlLang","getUrlParameter","initialLang","prefLang","createWidget","triggerIcon","querySelector","langObj","langName","toUpperCase","innerHTML","setupEventListeners","setupURLObserver","setupContentObserver","translatePage","catch","URLSearchParams","location","search","get","observer","MutationObserver","mutations","mutation","target","type","from","addedNodes","some","isTranslating","observeBody","observe","childList","subtree","attributes","characterData","original","history","state","title","dispatchEvent","Event","addEventListener","onUrlChange","currentLanguageLabel","getCurrentLanguageLabel","className","theme","baseColor","style","setProperty","textColor","appendChild","createWidgetHTML","querySelectorAll","triggerSpan","add","language","languageOptions","createLanguageOptions","languageCount","currentLang","otherLanguages","filter","sort","b","localeCompare","createLanguageItem","isSelected","updateTriggerText","newText","offsetHeight","remove","resolve","getTextToTranslate","textToTranslate","setAttribute","originalText","computedStyle","getComputedStyle","fontSize","calculateFontSize","originalFontSize","maxFontSize","parseInt","textLength","max","min","log","updateLoadingState","isLoading","triggerContent","triggerLoading","display","requestId","translationRequestId","lastRequestedLanguage","currentTranslationPromise","resetTranslations","_translatePage","resetToDefaultLanguage","toggle","getLanguageSVG","isTranslated","updateResetButtonVisibility","disconnect","batches","cache","allBatchNodes","allBatchTexts","batch","textsToTranslate","batchNodes","translatedLang","nonEmptyBatchNodes","nonEmptyBatchTexts","href","cachedTranslations","fullTranslations","idx","newFontSize","allTranslatedTexts","all","every","translations","batchIndex","originalTexts","translation","nodeIdx","batchIdx","findIndex","textIdx","indexOf","translatedText","resetButton","element","textNodes","childNodes","removeAttribute","lastTranslated","adjustDropdownPosition","triggerRect","getBoundingClientRect","dropdownRect","viewportWidth","innerWidth","viewportHeight","innerHeight","top","bottom","left","right","transform","spaceBelow","spaceAbove","spaceRight","spaceLeft","height","marginBottom","marginTop","width","finalRect","isOpen","focus","searchTerm","hasValue","noResults","visibleCount","_d","_c","_f","_e","region","_h","_g","matches","async","langCode","alert","translationScheduled","currentUrl","scheduleTimeout","clearTimeout","then","translateTo","supportedLang","getInstance","widgetInstance","TranslationWidget","translate","initWidget","head","readyState"],"mappings":"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","x_google_ignoreList":[5]}