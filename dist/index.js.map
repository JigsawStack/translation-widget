{"version":3,"file":"index.js","sources":["../src/lib/translation/index.ts","../src/constants/languages.ts","../src/utils/utils.ts","../src/lib/dom/index.ts","../src/constants/index.ts","../src/templates/html/widget.html?raw","../node_modules/lz-string/libs/lz-string.js","../src/lib/storage/localstorage.ts","../src/widget/index.ts","../src/index.ts"],"sourcesContent":["interface TranslationResponse {\n  translated_text: string | string[];\n  source_language?: string;\n  detected_language?: string;\n  confidence?: number;\n}\n\ninterface TranslationError extends Error {\n  status?: number;\n  response?: Response;\n}\n\ninterface CacheMetrics {\n  hits: number;\n  misses: number;\n}\n\nexport class TranslationService {\n  private readonly publicKey: string;\n  private cacheMetrics: CacheMetrics = { hits: 0, misses: 0 };\n  // Todo: convert this to use sdk instead of api\n  private readonly apiUrl = \"https://api.jigsawstack.com/v1/ai/translate\";\n\n  constructor(publicKey: string) {\n    this.publicKey = publicKey;\n  }\n\n  getCacheMetrics(): CacheMetrics {\n    return { ...this.cacheMetrics };\n  }\n\n  async translateBatchText(texts: string[], targetLang: string, maxRetries = 2, retryDelay = 100): Promise<string[]> {\n    let attempt = 0;\n    while (attempt < maxRetries) {\n      try {\n        const response = await fetch(this.apiUrl, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-api-key\": this.publicKey,\n          },\n          body: JSON.stringify({\n            text: texts,\n            target_language: targetLang,\n          }),\n        });\n\n        if (!response.ok) {\n          const error: TranslationError = new Error(`Error translating text: ${response.statusText}`);\n          error.status = response.status;\n          error.response = response;\n          throw error;\n        }\n\n        const result = (await response.json()) as TranslationResponse;\n        const translations = Array.isArray(result.translated_text) ? result.translated_text : [result.translated_text];\n\n        return translations;\n      } catch (error) {\n        attempt++;\n        if (attempt >= maxRetries) {\n          console.error(\"Translation error after retries:\", error);\n          return texts; // Return original texts on error\n        }\n        // Wait before retrying\n        await new Promise((res) => setTimeout(res, retryDelay));\n      }\n    }\n    return texts; // Fallback, should not reach here\n  }\n}\n","import { Language } from \"../types\";\nexport const languages: Language[] = [\n  {\n    code: \"af\",\n    name: \"Afrikaans\",\n    native: \"Afrikaans\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"am\",\n    name: \"Amharic\",\n    native: \"አማርኛ\",\n    writing_system: \"Ethiopic\",\n  },\n  {\n    code: \"ar\",\n    name: \"Arabic\",\n    native: \"العربية\",\n    rtl: 1,\n    writing_system: \"Arabic\",\n  },\n  {\n    code: \"as\",\n    name: \"Assamese\",\n    native: \"অসমীয়া\",\n    writing_system: \"Bengali\",\n  },\n  {\n    code: \"az\",\n    name: \"Azerbaijani\",\n    native: \"Azərbaycanca / آذربايجان\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"ba\",\n    name: \"Bashkir\",\n    native: \"Башҡорт\",\n    writing_system: \"Cyrillic\",\n  },\n  {\n    code: \"be\",\n    name: \"Belarusian\",\n    native: \"Беларуская\",\n    writing_system: \"Cyrillic\",\n  },\n  {\n    code: \"bg\",\n    name: \"Bulgarian\",\n    native: \"Български\",\n    writing_system: \"Cyrillic\",\n  },\n  {\n    code: \"bn\",\n    name: \"Bengali\",\n    native: \"বাংলা\",\n    writing_system: \"Bengali\",\n  },\n  {\n    code: \"bo\",\n    name: \"Tibetan\",\n    native: \"བོད་ཡིག / Bod skad\",\n    writing_system: \"Tibetan\",\n  },\n  {\n    code: \"br\",\n    name: \"Breton\",\n    native: \"Brezhoneg\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"bs\",\n    name: \"Bosnian\",\n    native: \"Bosanski\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"ca\",\n    name: \"Catalan\",\n    native: \"Català\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"ch\",\n    name: \"Chamorro\",\n    native: \"Chamoru\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"co\",\n    name: \"Corsican\",\n    native: \"Corsu\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"cs\",\n    name: \"Czech\",\n    native: \"Česky\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"cy\",\n    name: \"Welsh\",\n    native: \"Cymraeg\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"da\",\n    name: \"Danish\",\n    native: \"Dansk\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"de\",\n    name: \"German\",\n    native: \"Deutsch\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"dv\",\n    name: \"Divehi\",\n    native: \"ދިވެހިބަސް\",\n    rtl: 1,\n    writing_system: \"Thaana\",\n  },\n  {\n    code: \"dz\",\n    name: \"Dzongkha\",\n    native: \"ཇོང་ཁ\",\n    writing_system: \"Tibetan\",\n  },\n  {\n    code: \"el\",\n    name: \"Greek\",\n    native: \"Ελληνικά\",\n    writing_system: \"Greek\",\n  },\n  {\n    code: \"en\",\n    name: \"English\",\n    native: \"English\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"eo\",\n    name: \"Esperanto\",\n    native: \"Esperanto\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"es\",\n    name: \"Spanish\",\n    native: \"Español\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"et\",\n    name: \"Estonian\",\n    native: \"Eesti\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"eu\",\n    name: \"Basque\",\n    native: \"Euskara\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"fa\",\n    name: \"Persian\",\n    native: \"فارسی\",\n    rtl: 1,\n    writing_system: \"Arabic\",\n  },\n  {\n    code: \"ff\",\n    name: \"Peul\",\n    native: \"Fulfulde\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"fi\",\n    name: \"Finnish\",\n    native: \"Suomi\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"fj\",\n    name: \"Fijian\",\n    native: \"Na Vosa Vakaviti\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"fo\",\n    name: \"Faroese\",\n    native: \"Føroyskt\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"fr\",\n    name: \"French\",\n    native: \"Français\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"fy\",\n    name: \"West Frisian\",\n    native: \"Frysk\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"ga\",\n    name: \"Irish\",\n    native: \"Gaeilge\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"gd\",\n    name: \"Scottish Gaelic\",\n    native: \"Gàidhlig\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"gl\",\n    name: \"Galician\",\n    native: \"Galego\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"gn\",\n    name: \"Guarani\",\n    native: \"Avañe'ẽ\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"gu\",\n    name: \"Gujarati\",\n    native: \"ગુજરાતી\",\n    writing_system: \"Gujarati\",\n  },\n  {\n    code: \"gv\",\n    name: \"Manx\",\n    native: \"Gaelg\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"ha\",\n    name: \"Hausa\",\n    native: \"هَوُسَ\",\n    rtl: 1,\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"he\",\n    name: \"Hebrew\",\n    native: \"עברית\",\n    rtl: 1,\n    writing_system: \"Hebrew\",\n  },\n  {\n    code: \"hi\",\n    name: \"Hindi\",\n    native: \"हिन्दी\",\n    writing_system: \"Devanagari\",\n  },\n  {\n    code: \"hr\",\n    name: \"Croatian\",\n    native: \"Hrvatski\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"ht\",\n    name: \"Haitian\",\n    native: \"Krèyol ayisyen\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"hu\",\n    name: \"Hungarian\",\n    native: \"Magyar\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"hy\",\n    name: \"Armenian\",\n    native: \"Հայերեն\",\n    writing_system: \"Armenian\",\n  },\n  {\n    code: \"id\",\n    name: \"Indonesian\",\n    native: \"Bahasa Indonesia\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"ig\",\n    name: \"Igbo\",\n    native: \"Igbo\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"is\",\n    name: \"Icelandic\",\n    native: \"Íslenska\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"it\",\n    name: \"Italian\",\n    native: \"Italiano\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"iu\",\n    name: \"Inuktitut\",\n    native: \"ᐃᓄᒃᑎᑐᑦ\",\n    writing_system: \"Unified Canadian Aboriginal Syllabics\",\n  },\n  {\n    code: \"ja\",\n    name: \"Japanese\",\n    native: \"日本語\",\n    writing_system: \"Japanese\",\n  },\n  {\n    code: \"jv\",\n    name: \"Javanese\",\n    native: \"Basa Jawa\",\n    writing_system: \"Javanese\",\n  },\n  {\n    code: \"ka\",\n    name: \"Georgian\",\n    native: \"ქართული\",\n    writing_system: \"Georgian\",\n  },\n  {\n    code: \"kg\",\n    name: \"Kongo\",\n    native: \"KiKongo\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"ki\",\n    name: \"Kikuyu\",\n    native: \"Gĩkũyũ\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"kj\",\n    name: \"Kuanyama\",\n    native: \"Kuanyama\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"kk\",\n    name: \"Kazakh\",\n    native: \"Қазақша\",\n    writing_system: \"Cyrillic\",\n  },\n  {\n    code: \"kl\",\n    name: \"Greenlandic\",\n    native: \"Kalaallisut\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"km\",\n    name: \"Cambodian\",\n    native: \"ភាសាខ្មែរ\",\n    writing_system: \"Khmer\",\n  },\n  {\n    code: \"kn\",\n    name: \"Kannada\",\n    native: \"ಕನ್ನಡ\",\n    writing_system: \"Kannada\",\n  },\n  {\n    code: \"ko\",\n    name: \"Korean\",\n    native: \"한국어\",\n    writing_system: \"Korean\",\n  },\n  {\n    code: \"kr\",\n    name: \"Kanuri\",\n    native: \"Kanuri\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"ks\",\n    name: \"Kashmiri\",\n    native: \"कश्मीरी / كشميري\",\n    rtl: 1,\n    writing_system: \"Arabic\",\n  },\n  {\n    code: \"ku\",\n    name: \"Kurdish\",\n    native: \"Kurdî / كوردی\",\n    rtl: 1,\n    writing_system: \"Arabic\",\n  },\n  {\n    code: \"kv\",\n    name: \"Komi\",\n    native: \"Коми\",\n    writing_system: \"Cyrillic\",\n  },\n  {\n    code: \"kw\",\n    name: \"Cornish\",\n    native: \"Kernewek\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"ky\",\n    name: \"Kirghiz\",\n    native: \"Kırgızca / Кыргызча\",\n    writing_system: \"Cyrillic\",\n  },\n  {\n    code: \"la\",\n    name: \"Latin\",\n    native: \"Latina\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"lb\",\n    name: \"Luxembourgish\",\n    native: \"Lëtzebuergesch\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"lg\",\n    name: \"Ganda\",\n    native: \"Luganda\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"li\",\n    name: \"Limburgian\",\n    native: \"Limburgs\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"ln\",\n    name: \"Lingala\",\n    native: \"Lingála\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"lo\",\n    name: \"Laotian\",\n    native: \"ລາວ / Pha xa lao\",\n    writing_system: \"Lao\",\n  },\n  {\n    code: \"lt\",\n    name: \"Lithuanian\",\n    native: \"Lietuvių\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"lu\",\n    name: \"Luba-Katanga\",\n    native: \"Tshiluba\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"lv\",\n    name: \"Latvian\",\n    native: \"Latviešu\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"mg\",\n    name: \"Malagasy\",\n    native: \"Malagasy\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"mh\",\n    name: \"Marshallese\",\n    native: \"Kajin Majel / Ebon\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"mi\",\n    name: \"Maori\",\n    native: \"Māori\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"mk\",\n    name: \"Macedonian\",\n    native: \"Македонски\",\n    writing_system: \"Cyrillic\",\n  },\n  {\n    code: \"ml\",\n    name: \"Malayalam\",\n    native: \"മലയാളം\",\n    writing_system: \"Malayalam\",\n  },\n  {\n    code: \"mn\",\n    name: \"Mongolian\",\n    native: \"Монгол\",\n    writing_system: \"Mongolian\",\n  },\n  {\n    code: \"mo\",\n    name: \"Moldovan\",\n    native: \"Moldovenească\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"mr\",\n    name: \"Marathi\",\n    native: \"मराठी\",\n    writing_system: \"Devanagari\",\n  },\n  {\n    code: \"ms\",\n    name: \"Malay\",\n    native: \"Bahasa Melayu\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"mt\",\n    name: \"Maltese\",\n    native: \"bil-Malti\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"my\",\n    name: \"Burmese\",\n    native: \"မြန်မာစာ\",\n    writing_system: \"Myanmar\",\n  },\n  {\n    code: \"na\",\n    name: \"Nauruan\",\n    native: \"Dorerin Naoero\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"nb\",\n    name: \"Norwegian Bokmål\",\n    native: \"Norsk bokmål\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"nd\",\n    name: \"North Ndebele\",\n    native: \"Sindebele\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"ne\",\n    name: \"Nepali\",\n    native: \"नेपाली\",\n    writing_system: \"Devanagari\",\n  },\n  {\n    code: \"ng\",\n    name: \"Ndonga\",\n    native: \"Oshiwambo\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"nl\",\n    name: \"Dutch\",\n    native: \"Nederlands\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"nn\",\n    name: \"Norwegian Nynorsk\",\n    native: \"Norsk nynorsk\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"no\",\n    name: \"Norwegian\",\n    native: \"Norsk\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"nr\",\n    name: \"South Ndebele\",\n    native: \"isiNdebele\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"nv\",\n    name: \"Navajo\",\n    native: \"Diné bizaad\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"ny\",\n    name: \"Chichewa\",\n    native: \"Chi-Chewa\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"oc\",\n    name: \"Occitan\",\n    native: \"Occitan\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"oj\",\n    name: \"Ojibwa\",\n    native: \"ᐊᓂᔑᓈᐯᒧᐎᓐ / Anishinaabemowin\",\n    writing_system: \"Unified Canadian Aboriginal Syllabics\",\n  },\n  {\n    code: \"om\",\n    name: \"Oromo\",\n    native: \"Oromoo\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"or\",\n    name: \"Oriya\",\n    native: \"ଓଡ଼ିଆ\",\n    writing_system: \"Odia\",\n  },\n  {\n    code: \"os\",\n    name: \"Ossetian / Ossetic\",\n    native: \"Иронау\",\n    writing_system: \"Cyrillic\",\n  },\n  {\n    code: \"pa\",\n    name: \"Panjabi / Punjabi\",\n    native: \"ਪੰਜਾਬੀ / पंजाबी / پنجابي\",\n    writing_system: \"Gurmukhi\",\n  },\n  {\n    code: \"pi\",\n    name: \"Pali\",\n    native: \"Pāli / पाऴि\",\n    writing_system: \"Devanagari\",\n  },\n  {\n    code: \"pl\",\n    name: \"Polish\",\n    native: \"Polski\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"ps\",\n    name: \"Pashto\",\n    native: \"پښتو\",\n    rtl: 1,\n    writing_system: \"Arabic\",\n  },\n  {\n    code: \"pt\",\n    name: \"Portuguese\",\n    native: \"Português\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"qu\",\n    name: \"Quechua\",\n    native: \"Runa Simi\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"rm\",\n    name: \"Raeto Romance\",\n    native: \"Rumantsch\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"rn\",\n    name: \"Kirundi\",\n    native: \"Kirundi\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"ro\",\n    name: \"Romanian\",\n    native: \"Română\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"ru\",\n    name: \"Russian\",\n    native: \"Русский\",\n    writing_system: \"Cyrillic\",\n  },\n  {\n    code: \"rw\",\n    name: \"Rwandi\",\n    native: \"Kinyarwandi\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"sa\",\n    name: \"Sanskrit\",\n    native: \"संस्कृतम्\",\n    writing_system: \"Devanagari\",\n  },\n  {\n    code: \"sc\",\n    name: \"Sardinian\",\n    native: \"Sardu\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"sd\",\n    name: \"Sindhi\",\n    native: \"सिनधि\",\n    writing_system: \"Arabic\",\n  },\n  {\n    code: \"se\",\n    name: \"Northern Sami\",\n    native: \"Sámegiella\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"sg\",\n    name: \"Sango\",\n    native: \"Sängö\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"sh\",\n    name: \"Serbo-Croatian\",\n    native: \"Srpskohrvatski / Српскохрватски\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"si\",\n    name: \"Sinhalese\",\n    native: \"සිංහල\",\n    writing_system: \"Sinhala\",\n  },\n  {\n    code: \"sk\",\n    name: \"Slovak\",\n    native: \"Slovenčina\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"sl\",\n    name: \"Slovenian\",\n    native: \"Slovenščina\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"sm\",\n    name: \"Samoan\",\n    native: \"Gagana Samoa\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"sn\",\n    name: \"Shona\",\n    native: \"chiShona\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"so\",\n    name: \"Somalia\",\n    native: \"Soomaaliga\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"sq\",\n    name: \"Albanian\",\n    native: \"Shqip\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"sr\",\n    name: \"Serbian\",\n    native: \"Српски\",\n    writing_system: \"Cyrillic\",\n  },\n  {\n    code: \"ss\",\n    name: \"Swati\",\n    native: \"SiSwati\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"st\",\n    name: \"Southern Sotho\",\n    native: \"Sesotho\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"su\",\n    name: \"Sundanese\",\n    native: \"Basa Sunda\",\n    writing_system: \"Sundanese\",\n  },\n  {\n    code: \"sv\",\n    name: \"Swedish\",\n    native: \"Svenska\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"sw\",\n    name: \"Swahili\",\n    native: \"Kiswahili\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"ta\",\n    name: \"Tamil\",\n    native: \"தமிழ்\",\n    writing_system: \"Tamil\",\n  },\n  {\n    code: \"te\",\n    name: \"Telugu\",\n    native: \"తెలుగు\",\n    writing_system: \"Telugu\",\n  },\n  {\n    code: \"tg\",\n    name: \"Tajik\",\n    native: \"Тоҷикӣ\",\n    writing_system: \"Cyrillic\",\n  },\n  {\n    code: \"th\",\n    name: \"Thai\",\n    native: \"ไทย / Phasa Thai\",\n    writing_system: \"Thai\",\n  },\n  {\n    code: \"ti\",\n    name: \"Tigrinya\",\n    native: \"ትግርኛ\",\n    writing_system: \"Ethiopic\",\n  },\n  {\n    code: \"tk\",\n    name: \"Turkmen\",\n    native: \"Туркмен / تركمن\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"tl\",\n    name: \"Tagalog / Filipino\",\n    native: \"Tagalog\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"tn\",\n    name: \"Tswana\",\n    native: \"Setswana\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"to\",\n    name: \"Tonga\",\n    native: \"Lea Faka-Tonga\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"tr\",\n    name: \"Turkish\",\n    native: \"Türkçe\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"ts\",\n    name: \"Tsonga\",\n    native: \"Xitsonga\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"tt\",\n    name: \"Tatar\",\n    native: \"Tatarça\",\n    writing_system: \"Cyrillic\",\n  },\n  {\n    code: \"tw\",\n    name: \"Twi\",\n    native: \"Twi\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"ty\",\n    name: \"Tahitian\",\n    native: \"Reo Mā`ohi\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"ug\",\n    name: \"Uyghur\",\n    native: \"Uyƣurqə / ئۇيغۇرچە\",\n    writing_system: \"Arabic\",\n  },\n  {\n    code: \"uk\",\n    name: \"Ukrainian\",\n    native: \"Українська\",\n    writing_system: \"Cyrillic\",\n  },\n  {\n    code: \"ur\",\n    name: \"Urdu\",\n    native: \"اردو\",\n    rtl: 1,\n    writing_system: \"Arabic\",\n  },\n  {\n    code: \"uz\",\n    name: \"Uzbek\",\n    native: \"Ўзбек\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"ve\",\n    name: \"Venda\",\n    native: \"Tshivenḓa\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"vi\",\n    name: \"Vietnamese\",\n    native: \"Tiếng Việt\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"vo\",\n    name: \"Volapük\",\n    native: \"Volapük\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"wo\",\n    name: \"Wolof\",\n    native: \"Wollof\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"xh\",\n    name: \"Xhosa\",\n    native: \"isiXhosa\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"yi\",\n    name: \"Yiddish\",\n    native: \"ייִדיש\",\n    rtl: 1,\n    writing_system: \"Hebrew\",\n  },\n  {\n    code: \"yo\",\n    name: \"Yoruba\",\n    native: \"Yorùbá\",\n    writing_system: \"Latin\",\n  },\n  {\n    code: \"zh\",\n    name: \"Chinese (Simplified)\",\n    native: \"简体中文\",\n    writing_system: \"Simplied Han\",\n  },\n  {\n    code: \"zh-TW\",\n    name: \"Chinese (Traditional)\",\n    native: \"繁體中文\",\n    writing_system: \"Traditional Han\",\n  },\n  {\n    code: \"zu\",\n    name: \"Zulu\",\n    native: \"isiZulu\",\n    writing_system: \"Latin\",\n  },\n];\n","import { languages } from \"../constants/languages\";\nfunction generateHashForContent(nodes: Node[]): string {\n  const content = nodes\n    .map((node) => {\n      if (node.nodeType === Node.TEXT_NODE) {\n        const parent = node.parentElement as HTMLElement | null;\n        // Use original text if available, else current text\n        if (parent?.hasAttribute(\"data-original-text\")) {\n          return parent.getAttribute(\"data-original-text\")?.replace(/\\s+/g, \" \").trim();\n        }\n        return node.textContent?.replace(/\\s+/g, \" \").trim().toLocaleLowerCase();\n      }\n    })\n    .join(\" \")\n    .trim();\n\n  const hash = murmurhash3_32_gc(content.toLowerCase(), 42).toString(16);\n  return hash;\n}\n\nfunction murmurhash3_32_gc(key: string, seed: number) {\n  const remainder = key.length & 3;\n  const bytes = key.length - remainder;\n  let h1 = seed;\n  const c1 = 0xcc9e2d51;\n  const c2 = 0x1b873593;\n  let i = 0;\n\n  while (i < bytes) {\n    let k1 =\n      (key.charCodeAt(i) & 0xff) | ((key.charCodeAt(++i) & 0xff) << 8) | ((key.charCodeAt(++i) & 0xff) << 16) | ((key.charCodeAt(++i) & 0xff) << 24);\n    ++i;\n\n    k1 = ((k1 & 0xffff) * c1 + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;\n    k1 = (k1 << 15) | (k1 >>> 17);\n    k1 = ((k1 & 0xffff) * c2 + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;\n\n    h1 ^= k1;\n    h1 = (h1 << 13) | (h1 >>> 19);\n    const h1b = ((h1 & 0xffff) * 5 + ((((h1 >>> 16) * 5) & 0xffff) << 16)) & 0xffffffff;\n    h1 = (h1b & 0xffff) + 0x6b64 + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16);\n  }\n\n  let k1 = 0;\n\n  switch (remainder) {\n    //@ts-expect-error - this is a valid case\n    case 3:\n      k1 ^= key.charCodeAt(i + 2) << 16;\n    //@ts-expect-error - this is a valid case\n    case 2:\n      k1 ^= key.charCodeAt(i + 1) << 8;\n    case 1:\n      k1 ^= key.charCodeAt(i);\n      k1 = ((k1 & 0xffff) * c1 + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;\n      k1 = (k1 << 15) | (k1 >>> 17);\n      k1 = ((k1 & 0xffff) * c2 + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;\n      h1 ^= k1;\n  }\n\n  h1 ^= key.length;\n  h1 ^= h1 >>> 16;\n  h1 = ((h1 & 0xffff) * 0x85ebca6b + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;\n  h1 ^= h1 >>> 13;\n  h1 = ((h1 & 0xffff) * 0xc2b2ae35 + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16)) & 0xffffffff;\n  h1 ^= h1 >>> 16;\n\n  return h1 >>> 0;\n}\n\nfunction getVisibleTextContent(element: HTMLElement): string {\n  // Get all child text nodes that are not inside .sr-only or [aria-hidden=\"true\"]\n  let text = \"\";\n  for (const node of element.childNodes) {\n    if (node.nodeType === Node.TEXT_NODE && !(element.classList.contains(\"sr-only\") || element.getAttribute(\"aria-hidden\") === \"true\")) {\n      text += node.textContent;\n    }\n    if (\n      node.nodeType === Node.ELEMENT_NODE &&\n      !(node as HTMLElement).classList.contains(\"sr-only\") &&\n      (node as HTMLElement).getAttribute(\"aria-hidden\") !== \"true\"\n    ) {\n      text += getVisibleTextContent(node as HTMLElement);\n    }\n  }\n  return text.trim();\n}\n\nconst removeEmojis = (text: string) => text.replace(/[\\p{Emoji_Presentation}\\p{Extended_Pictographic}]/gu, \"\");\n\nconst getUserLanguage = () => {\n  const userLanguages = window.navigator.languages;\n  const userLanguage = languages.find((lang) => userLanguages.includes(lang.code));\n  return userLanguage?.code || \"en\";\n};\n\nexport { generateHashForContent, getVisibleTextContent, removeEmojis, getUserLanguage };\n","// type TreeWalkerFilter = (node: Node) => number\n\ninterface NodeProcessor {\n  acceptNode(node: Node): number;\n}\n\nimport { removeEmojis } from \"../../utils/utils\";\n\nexport class DocumentNavigator {\n  /**\n   * Retrieves text nodes eligible for translation from the document\n   * @returns Collection of text nodes ready for translation\n   */\n  static findTranslatableContent(): Text[] {\n    // Skip during server-side rendering\n    if (typeof window === \"undefined\") {\n      return [];\n    }\n\n    const validator: NodeProcessor = {\n      acceptNode(node: Node): number {\n        if (node.nodeType !== Node.TEXT_NODE) {\n          // Log non-text nodes\n          return NodeFilter.FILTER_REJECT;\n        }\n\n        const container = (node as Text).parentElement;\n        if (!container) {\n          return NodeFilter.FILTER_REJECT;\n        }\n\n        // Skip if any ancestor has aria-hidden=\"true\"\n        if (container.closest('[aria-hidden=\"true\"]')) {\n          return NodeFilter.FILTER_REJECT;\n        }\n\n        // // check if the classname is sr-only\n        if (container.classList.contains(\"sr-only\")) {\n          return NodeFilter.FILTER_REJECT;\n        }\n\n        const shouldSkip =\n          container.closest(\"script, style, code\") !== null ||\n          container.closest(\"next-route-announcer\") !== null ||\n          container.closest(\".jigts-translation-widget\") !== null ||\n          container.closest(\".jigts-widget-trigger\") !== null ||\n          container.closest(\".jigts-widget-dropdown\") !== null ||\n          container.closest(\".notranslate\") !== null ||\n          !node.textContent?.trim();\n        return shouldSkip ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;\n      },\n    };\n\n    const navigator = document.createTreeWalker(document.body, NodeFilter.SHOW_TEXT, validator);\n\n    const results: Text[] = [];\n    let currentNode: Node | null;\n\n    while ((currentNode = navigator.nextNode())) {\n      if (currentNode.nodeType === Node.TEXT_NODE) {\n        let text = currentNode.textContent?.trim() || \"\";\n        const parentElement = currentNode.parentElement;\n        if (parentElement) {\n          const originalText = parentElement.getAttribute(\"data-original-text\");\n          if (originalText) {\n            text = originalText;\n          }\n        }\n        /**\n         * Skip the content if\n         * 1. the content if empty\n         * 2. the content is only one character in length\n         * 3. the content is only an emoji\n         */\n        const textWithoutEmojis = removeEmojis(text);\n        if (text.length === 0 || text.length === 1 || textWithoutEmojis.length === 0) {\n          continue;\n        }\n        results.push(currentNode as Text);\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Divides a collection into smaller groups\n   * @param items Collection to divide\n   * @param groupSize Maximum size of each group\n   * @returns Array of item groups\n   */\n  static divideIntoGroups<T>(items: T[], groupSize: number): T[][] {\n    const groups: T[][] = [];\n\n    for (let i = 0; i < items.length; i += groupSize) {\n      groups.push(items.slice(i, i + groupSize));\n    }\n\n    return groups;\n  }\n\n  /**\n   * Determines if a node contains translatable text\n   * @param node Node to evaluate\n   * @returns Whether the node contains translatable content\n   */\n  static containsTranslatableContent(node: Node): node is Text {\n    if (node.nodeType !== Node.TEXT_NODE) {\n      return false;\n    }\n\n    const container = node.parentElement;\n    if (!container) {\n      return false;\n    }\n    return !(\n      container.tagName === \"SCRIPT\" ||\n      container.tagName === \"STYLE\" ||\n      container.tagName === \"CODE\" ||\n      container.tagName === \"next-route-announcer\" ||\n      container.closest(\".translate-widget\") ||\n      container.closest(\".notranslate\") ||\n      !node.textContent?.trim()\n    );\n  }\n\n  /**\n   * Retrieves the containing element of a node\n   * @param node Node to find container for\n   * @returns Containing element or null if none exists\n   */\n  static getContainer(node: Node): HTMLElement | null {\n    return node.parentElement;\n  }\n}\n","export const MAX_CACHE_SIZE = 1000;\nexport const BATCH_SIZE = 10;\nexport const CACHE_PREFIX = \"jss-\";\n\nexport const DEFAULT_CONFIG = {\n  primaryColor: \"#2563eb\",\n  pageLanguage: \"en\",\n  autoDetectLanguage: false,\n  position: \"top-right\" as const,\n};\n","export default \"<!-- Widget Trigger Button -->\\n<div class=\\\"jigts-widget-trigger\\\" tabindex=\\\"0\\\" role=\\\"button\\\" aria-label=\\\"Open translation menu\\\" aria-expanded=\\\"false\\\">\\n    <!-- Normal State -->\\n    <div class=\\\"jigts-trigger-content\\\">\\n        <span class=\\\"jigts-trigger-icon\\\">\\n            <svg class=\\\"jigts-languages-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                    d=\\\"M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129\\\">\\n                </path>\\n            </svg>\\n        </span>\\n    </div>\\n\\n    <!-- Loading State (hidden by default) -->\\n    <div class=\\\"jigts-trigger-loading\\\" style=\\\"display: none;\\\">\\n        <div class=\\\"jigts-loading-spinner\\\"></div>\\n    </div>\\n</div>\\n\\n<!-- Dropdown Menu -->\\n<div class=\\\"jigts-widget-dropdown\\\">\\n    <!-- Header -->\\n    <div class=\\\"jigts-dropdown-header\\\">\\n        <div class=\\\"jigts-dropdown-title\\\">\\n            <div class=\\\"jigts-title-left\\\">\\n                <svg class=\\\"jigts-languages-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                        d=\\\"M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129\\\">\\n                    </path>\\n                </svg>\\n                <span class=\\\"jigts-title-text\\\">Select Language</span>\\n            </div>\\n            <div class=\\\"jigts-language-count\\\">{{languageCount}} languages</div>\\n        </div>\\n\\n        <!-- Search Input -->\\n        <div class=\\\"jigts-search-container\\\">\\n            <svg class=\\\"jigts-search-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                    d=\\\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\\\"></path>\\n            </svg>\\n            <input type=\\\"text\\\" class=\\\"jigts-search-input\\\" placeholder=\\\"Search languages...\\\" aria-label=\\\"Search languages\\\">\\n            <svg class=\\\"jigts-clear-search\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M6 18L18 6M6 6l12 12\\\">\\n                </path>\\n            </svg>\\n        </div>\\n    </div>\\n\\n    <!-- Reset Option -->\\n    <div class=\\\"jigts-reset-option\\\" tabindex=\\\"0\\\" role=\\\"button\\\" aria-label=\\\"Reset to original language\\\">\\n        <svg class=\\\"jigts-reset-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n            <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                d=\\\"M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6\\\"></path>\\n        </svg>\\n        <div class=\\\"jigts-reset-text\\\">\\n            <span class=\\\"jigts-reset-title\\\">Original Language</span>\\n            <span class=\\\"jigts-reset-subtitle\\\">Reset translation</span>\\n        </div>\\n    </div>\\n\\n    <!-- Language List -->\\n    <div class=\\\"jigts-language-list\\\">\\n        {{languageOptions}}\\n        <div class=\\\"jigts-no-results\\\" style=\\\"display: none;\\\">\\n            <svg class=\\\"jigts-no-results-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                    d=\\\"M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\\\"></path>\\n            </svg>\\n            <span>No languages found</span>\\n        </div>\\n    </div>\\n</div>\"","// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\n// This work is free. You can redistribute it and/or modify it\n// under the terms of the WTFPL, Version 2\n// For more information see LICENSE.txt or http://www.wtfpl.net/\n//\n// For more information, the home page:\n// http://pieroxy.net/blog/pages/lz-string/testing.html\n//\n// LZ-based compression algorithm, version 1.4.5\nvar LZString = (function() {\n\n// private property\nvar f = String.fromCharCode;\nvar keyStrBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar keyStrUriSafe = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\nvar baseReverseDic = {};\n\nfunction getBaseValue(alphabet, character) {\n  if (!baseReverseDic[alphabet]) {\n    baseReverseDic[alphabet] = {};\n    for (var i=0 ; i<alphabet.length ; i++) {\n      baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n    }\n  }\n  return baseReverseDic[alphabet][character];\n}\n\nvar LZString = {\n  compressToBase64 : function (input) {\n    if (input == null) return \"\";\n    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});\n    switch (res.length % 4) { // To produce valid Base64\n    default: // When could this happen ?\n    case 0 : return res;\n    case 1 : return res+\"===\";\n    case 2 : return res+\"==\";\n    case 3 : return res+\"=\";\n    }\n  },\n\n  decompressFromBase64 : function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });\n  },\n\n  compressToUTF16 : function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 15, function(a){return f(a+32);}) + \" \";\n  },\n\n  decompressFromUTF16: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });\n  },\n\n  //compress into uint8array (UCS-2 big endian format)\n  compressToUint8Array: function (uncompressed) {\n    var compressed = LZString.compress(uncompressed);\n    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character\n\n    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {\n      var current_value = compressed.charCodeAt(i);\n      buf[i*2] = current_value >>> 8;\n      buf[i*2+1] = current_value % 256;\n    }\n    return buf;\n  },\n\n  //decompress from uint8array (UCS-2 big endian format)\n  decompressFromUint8Array:function (compressed) {\n    if (compressed===null || compressed===undefined){\n        return LZString.decompress(compressed);\n    } else {\n        var buf=new Array(compressed.length/2); // 2 bytes per character\n        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {\n          buf[i]=compressed[i*2]*256+compressed[i*2+1];\n        }\n\n        var result = [];\n        buf.forEach(function (c) {\n          result.push(f(c));\n        });\n        return LZString.decompress(result.join(''));\n\n    }\n\n  },\n\n\n  //compress into a string that is already URI encoded\n  compressToEncodedURIComponent: function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});\n  },\n\n  //decompress from an output of compressToEncodedURIComponent\n  decompressFromEncodedURIComponent:function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    input = input.replace(/ /g, \"+\");\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });\n  },\n\n  compress: function (uncompressed) {\n    return LZString._compress(uncompressed, 16, function(a){return f(a);});\n  },\n  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {\n    if (uncompressed == null) return \"\";\n    var i, value,\n        context_dictionary= {},\n        context_dictionaryToCreate= {},\n        context_c=\"\",\n        context_wc=\"\",\n        context_w=\"\",\n        context_enlargeIn= 2, // Compensate for the first entry which should not count\n        context_dictSize= 3,\n        context_numBits= 2,\n        context_data=[],\n        context_data_val=0,\n        context_data_position=0,\n        ii;\n\n    for (ii = 0; ii < uncompressed.length; ii += 1) {\n      context_c = uncompressed.charAt(ii);\n      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {\n        context_dictionary[context_c] = context_dictSize++;\n        context_dictionaryToCreate[context_c] = true;\n      }\n\n      context_wc = context_w + context_c;\n      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {\n        context_w = context_wc;\n      } else {\n        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n          if (context_w.charCodeAt(0)<256) {\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<8 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          } else {\n            value = 1;\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1) | value;\n              if (context_data_position ==bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = 0;\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<16 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          }\n          context_enlargeIn--;\n          if (context_enlargeIn == 0) {\n            context_enlargeIn = Math.pow(2, context_numBits);\n            context_numBits++;\n          }\n          delete context_dictionaryToCreate[context_w];\n        } else {\n          value = context_dictionary[context_w];\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n\n\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        // Add wc to the dictionary.\n        context_dictionary[context_wc] = context_dictSize++;\n        context_w = String(context_c);\n      }\n    }\n\n    // Output the code for w.\n    if (context_w !== \"\") {\n      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n        if (context_w.charCodeAt(0)<256) {\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<8 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        } else {\n          value = 1;\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | value;\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = 0;\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<16 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        delete context_dictionaryToCreate[context_w];\n      } else {\n        value = context_dictionary[context_w];\n        for (i=0 ; i<context_numBits ; i++) {\n          context_data_val = (context_data_val << 1) | (value&1);\n          if (context_data_position == bitsPerChar-1) {\n            context_data_position = 0;\n            context_data.push(getCharFromInt(context_data_val));\n            context_data_val = 0;\n          } else {\n            context_data_position++;\n          }\n          value = value >> 1;\n        }\n\n\n      }\n      context_enlargeIn--;\n      if (context_enlargeIn == 0) {\n        context_enlargeIn = Math.pow(2, context_numBits);\n        context_numBits++;\n      }\n    }\n\n    // Mark the end of the stream\n    value = 2;\n    for (i=0 ; i<context_numBits ; i++) {\n      context_data_val = (context_data_val << 1) | (value&1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data_position = 0;\n        context_data.push(getCharFromInt(context_data_val));\n        context_data_val = 0;\n      } else {\n        context_data_position++;\n      }\n      value = value >> 1;\n    }\n\n    // Flush the last char\n    while (true) {\n      context_data_val = (context_data_val << 1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data.push(getCharFromInt(context_data_val));\n        break;\n      }\n      else context_data_position++;\n    }\n    return context_data.join('');\n  },\n\n  decompress: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });\n  },\n\n  _decompress: function (length, resetValue, getNextValue) {\n    var dictionary = [],\n        next,\n        enlargeIn = 4,\n        dictSize = 4,\n        numBits = 3,\n        entry = \"\",\n        result = [],\n        i,\n        w,\n        bits, resb, maxpower, power,\n        c,\n        data = {val:getNextValue(0), position:resetValue, index:1};\n\n    for (i = 0; i < 3; i += 1) {\n      dictionary[i] = i;\n    }\n\n    bits = 0;\n    maxpower = Math.pow(2,2);\n    power=1;\n    while (power!=maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n      bits |= (resb>0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n\n    switch (next = bits) {\n      case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 2:\n        return \"\";\n    }\n    dictionary[3] = c;\n    w = c;\n    result.push(c);\n    while (true) {\n      if (data.index > length) {\n        return \"\";\n      }\n\n      bits = 0;\n      maxpower = Math.pow(2,numBits);\n      power=1;\n      while (power!=maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n          data.position = resetValue;\n          data.val = getNextValue(data.index++);\n        }\n        bits |= (resb>0 ? 1 : 0) * power;\n        power <<= 1;\n      }\n\n      switch (c = bits) {\n        case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 2:\n          return result.join('');\n      }\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n      if (dictionary[c]) {\n        entry = dictionary[c];\n      } else {\n        if (c === dictSize) {\n          entry = w + w.charAt(0);\n        } else {\n          return null;\n        }\n      }\n      result.push(entry);\n\n      // Add w+entry[0] to the dictionary.\n      dictionary[dictSize++] = w + entry.charAt(0);\n      enlargeIn--;\n\n      w = entry;\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n    }\n  }\n};\n  return LZString;\n})();\n\nif (typeof define === 'function' && define.amd) {\n  define(function () { return LZString; });\n} else if( typeof module !== 'undefined' && module != null ) {\n  module.exports = LZString\n} else if( typeof angular !== 'undefined' && angular != null ) {\n  angular.module('LZString', [])\n  .factory('LZString', function () {\n    return LZString;\n  });\n}\n","import LZString from \"lz-string\";\n\nexport class LocalStorageWrapper {\n  private prefix: string;\n  private readonly COMPRESSION_THRESHOLD = 10000;\n  private readonly COMPRESSION_MARKER = \"__COMPRESSED__\";\n\n  constructor(prefix = \"\") {\n    this.prefix = prefix;\n  }\n\n  getKey(hash: string, url: string, targetLang: string): string {\n    // get rid of query params\n    const urlWithoutQuery = url.split(\"?\")[0];\n    // Only encode the URL, not the whole key\n    return `${hash}-${encodeURIComponent(urlWithoutQuery)}-${targetLang}`;\n  }\n\n  private shouldCompress(value: string): boolean {\n    return value.length > this.COMPRESSION_THRESHOLD;\n  }\n\n  private compress(value: string): string {\n    try {\n      return LZString.compressToBase64(value);\n    } catch (error) {\n      console.error(\"Compression failed:\", error);\n      return value;\n    }\n  }\n\n  private decompress(value: string): string {\n    try {\n      return LZString.decompressFromBase64(value) || value;\n    } catch (error) {\n      console.error(\"Decompression failed:\", error);\n      return value;\n    }\n  }\n\n  getItem(key: string): any {\n    const prefixedKey = this.prefix + key;\n    const item = localStorage.getItem(prefixedKey);\n    if (!item) return null;\n\n    try {\n      // Check if the item is compressed\n      const decompressed = item.startsWith(this.COMPRESSION_MARKER) ? this.decompress(item.slice(this.COMPRESSION_MARKER.length)) : item;\n      return JSON.parse(decompressed);\n    } catch (e) {\n      console.error(\"Error parsing cached item:\", e);\n      return null;\n    }\n  }\n\n  setItem(key: string, value: any): void {\n    const prefixedKey = this.prefix + key;\n    const stringified = JSON.stringify(value);\n\n    // Use requestIdleCallback to defer compression if available\n    const storeValue = () => {\n      try {\n        const finalValue = this.shouldCompress(stringified) ? `${this.COMPRESSION_MARKER}${this.compress(stringified)}` : stringified;\n        localStorage.setItem(prefixedKey, finalValue);\n      } catch (error) {\n        console.error(\"Error storing item:\", error);\n        // Fallback to storing uncompressed value\n        localStorage.setItem(prefixedKey, stringified);\n      }\n    };\n\n    if (typeof requestIdleCallback !== \"undefined\") {\n      requestIdleCallback(() => storeValue());\n    } else {\n      // Fallback to setTimeout if requestIdleCallback is not available\n      setTimeout(storeValue, 0);\n    }\n  }\n\n  removeItem(key: string): void {\n    const prefixedKey = this.prefix + key;\n    localStorage.removeItem(prefixedKey);\n  }\n\n  clear(): void {\n    if (this.prefix) {\n      for (let key in localStorage) {\n        if (key.startsWith(this.prefix)) {\n          localStorage.removeItem(key);\n        }\n      }\n    } else {\n      localStorage.clear();\n    }\n  }\n\n  key(index: number): string | null {\n    return localStorage.key(index);\n  }\n\n  get length(): number {\n    return localStorage.length;\n  }\n}\n","import { TranslationService } from \"../lib/translation/index\";\nimport { DocumentNavigator } from \"../lib/dom\";\nimport { languages } from \"../constants/languages\";\nimport { BATCH_SIZE, DEFAULT_CONFIG } from \"../constants\";\nimport type { Language, TranslationConfig } from \"../types\";\nimport widgetTemplate from \"../templates/html/widget.html?raw\";\nimport { generateHashForContent, getUserLanguage, removeEmojis } from \"../utils/utils\";\nimport { CACHE_PREFIX } from \"../constants\";\nimport { LocalStorageWrapper } from \"../lib/storage/localstorage\";\n// import emojiRegex from 'emoji-regex'\ninterface WidgetElements {\n  trigger: HTMLDivElement | null;\n  dropdown: HTMLDivElement | null;\n  searchInput: HTMLInputElement | null;\n  clearSearch: HTMLDivElement | null;\n  languageItems: NodeListOf<HTMLDivElement> | null;\n  loadingIndicator: HTMLDivElement | null;\n}\n\ninterface TranslationResult {\n  success: boolean;\n  targetLanguage: string;\n  translatedNodes: number;\n  error?: string;\n  duration?: number;\n}\n\nexport class TranslationWidget {\n  private config: Required<TranslationConfig>;\n  private translationService: TranslationService;\n  private currentLanguage: string;\n  private widget: HTMLDivElement;\n  private elements: WidgetElements;\n  private autoDetectLanguage: boolean;\n  private isTranslated = false;\n  private userLanguage: string;\n  private isTranslating = false;\n  private observer: MutationObserver | null = null;\n  private translationScheduled = false;\n  private scheduleTimeout: number | null = null;\n  private lastTranslated: { url: string; lang: string; hash: string } | null = null;\n  private static instance: TranslationWidget | null = null;\n  private currentTranslationPromise: Promise<void> | null = null;\n  private lastRequestedLanguage: string | null = null;\n  private translationRequestId = 0;\n  private showUI: boolean;\n  constructor(publicKey: string, config: Partial<TranslationConfig> = {}) {\n    const allowedPositions = [\"top-right\", \"top-left\", \"bottom-left\", \"bottom-right\"] as const;\n    const safeConfig = { ...DEFAULT_CONFIG, ...config };\n    if (safeConfig.position && !allowedPositions.includes(safeConfig.position)) {\n      console.warn(`Invalid position '${safeConfig.position}' passed to TranslationWidget. Falling back to 'top-right'.`);\n      safeConfig.position = \"top-right\";\n    }\n    this.config = safeConfig as Required<TranslationConfig>;\n\n    if (!publicKey) {\n      throw new Error(\"Public key is required to initialize the translation widget\");\n    }\n\n    if (publicKey.startsWith(\"sk_\")) {\n      throw new Error(\"Please use public api key for security reasons. You can get one from https://jigsawstack.com\");\n    }\n\n    if (!publicKey.startsWith(\"pk_\")) {\n      throw new Error(\"Please use proper api key. You can get one from https://jigsawstack.com\");\n    }\n\n    this.translationService = new TranslationService(publicKey);\n    this.autoDetectLanguage = this.config.autoDetectLanguage || false;\n    this.currentLanguage = this.config.pageLanguage || \"en\";\n    this.userLanguage = getUserLanguage();\n    this.showUI = this.config.showUI ?? true;\n    this.widget = document.createElement(\"div\");\n    this.elements = {\n      trigger: null,\n      dropdown: null,\n      searchInput: null,\n      clearSearch: null,\n      languageItems: null,\n      loadingIndicator: null,\n    };\n    this.initialize();\n    TranslationWidget.instance = this;\n  }\n\n  private initialize(): void {\n    if (!this.validateConfig()) return;\n\n    // Get language from URL parameter\n    const urlLang = this.getUrlParameter(\"lang\");\n    let initialLang = this.config.pageLanguage;\n    if (urlLang) {\n      const supportedLang = languages.find((lang) => lang.code === urlLang);\n      if (supportedLang) {\n        initialLang = urlLang;\n      }\n    } else {\n      // Check localStorage for preferred language\n      const prefLang = localStorage.getItem(\"jss-pref\");\n      if (prefLang && languages.find((lang) => lang.code === prefLang)) {\n        initialLang = prefLang;\n      } else if (this.autoDetectLanguage) {\n        initialLang = this.userLanguage;\n      }\n    }\n    this.currentLanguage = initialLang;\n\n    if (this.showUI) {\n      this.createWidget();\n      // Update icon if not default language\n      const triggerIcon = this.elements.trigger?.querySelector(\".jigts-trigger-icon\");\n      if (triggerIcon && this.currentLanguage !== this.config.pageLanguage) {\n        // Find the language name\n        const langObj = languages.find((lang) => lang.code === this.currentLanguage);\n        const langName = langObj ? langObj.name : this.currentLanguage.toUpperCase();\n        triggerIcon.innerHTML = `<span class=\\\"jigts-lang-code\\\">${this.currentLanguage.toUpperCase()}</span><span class=\\\"jigts-lang-name\\\">${langName}</span>`;\n      }\n      this.setupEventListeners();\n    }\n\n    this.setupURLObserver();\n    this.setupContentObserver();\n\n    // Trigger translation immediately if language is different from page language\n    if (this.currentLanguage !== this.config.pageLanguage) {\n      this.translatePage(this.currentLanguage).catch((error) => {\n        console.error(\"Initial translation error:\", error);\n      });\n    }\n  }\n\n  private getUrlParameter(name: string): string | null {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get(name);\n  }\n\n  private setupContentObserver(): void {\n    this.observer = new MutationObserver((mutations) => {\n      for (const mutation of mutations) {\n        if (this.widget.contains(mutation.target)) {\n          return;\n        }\n        if (\n          mutation.type === \"characterData\" ||\n          (mutation.type === \"childList\" && Array.from(mutation.addedNodes).some((node) => node.nodeType === Node.TEXT_NODE))\n        ) {\n        }\n      }\n      if (this.isTranslating) return;\n      this.scheduleTranslation();\n    });\n    this.observeBody();\n  }\n\n  private observeBody() {\n    this.observer?.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      characterData: true,\n    });\n  }\n\n  private onUrlChange = () => {\n    this.scheduleTranslation();\n  };\n\n  private setupURLObserver(): void {\n    const historyMethods = [\"pushState\", \"replaceState\"] as const;\n\n    for (const method of historyMethods) {\n      const original = history[method];\n      history[method] = function (state: unknown, title: string, url?: string | URL | null) {\n        const result = original.call(this, state, title, url);\n        window.dispatchEvent(new Event(method));\n        return result;\n      };\n      window.addEventListener(method, this.onUrlChange);\n    }\n\n    // Also listen for popstate events (browser back/forward)\n    window.addEventListener(\"popstate\", this.onUrlChange);\n  }\n\n  private validateConfig(): boolean {\n    if (!this.translationService) {\n      console.error(\"Translation service is required to initialize the translation widget\");\n      return false;\n    }\n    return true;\n  }\n\n  private createWidget(): void {\n    const currentLanguageLabel = this.getCurrentLanguageLabel();\n\n    // Create widget element\n    this.widget = document.createElement(\"div\");\n    this.widget.className = `jigts-translation-widget jigts-position-${this.config.position || \"top-right\"}`;\n\n    // Apply theme colors if provided\n    if (this.config.theme) {\n      if (this.config.theme.baseColor) {\n        this.widget.style.setProperty(\"--jigts-custom-base-color\", this.config.theme.baseColor);\n      }\n      if (this.config.theme.textColor) {\n        this.widget.style.setProperty(\"--jigts-custom-text-color\", this.config.theme.textColor);\n      }\n    }\n\n    document.body.appendChild(this.widget);\n\n    this.widget.innerHTML = this.createWidgetHTML(currentLanguageLabel);\n\n    // Cache element references\n    this.elements = {\n      trigger: this.widget.querySelector<HTMLDivElement>(\".jigts-widget-trigger\"),\n      dropdown: this.widget.querySelector<HTMLDivElement>(\".jigts-widget-dropdown\"),\n      searchInput: this.widget.querySelector<HTMLInputElement>(\".jigts-search-input\"),\n      clearSearch: this.widget.querySelector<HTMLDivElement>(\".jigts-clear-search\"),\n      languageItems: this.widget.querySelectorAll<HTMLDivElement>(\".jigts-language-item\"),\n      loadingIndicator: this.widget.querySelector<HTMLDivElement>(\".jigts-loading-spinner\"),\n    };\n\n    // Initialize trigger text with fade-in class\n    const triggerSpan = this.elements.trigger?.querySelector(\"span\");\n    if (triggerSpan) {\n      triggerSpan.classList.add(\"jigts-fade-in\");\n    }\n  }\n\n  private getCurrentLanguageLabel(): string {\n    return languages.find((language: Language) => language.code === this.currentLanguage)?.native || \"English\";\n  }\n\n  private createWidgetHTML(currentLanguageLabel: string): string {\n    const languageOptions = this.createLanguageOptions();\n    const languageCount = languages.length;\n    return widgetTemplate\n      .replace(\"{{languageOptions}}\", languageOptions)\n      .replace(\"{{currentLanguageLabel}}\", currentLanguageLabel)\n      .replace(\"{{languageCount}}\", languageCount.toString());\n  }\n\n  private createLanguageOptions(): string {\n    const currentLang = this.currentLanguage;\n    const currentLanguage = languages.find((lang: Language) => lang.code === currentLang);\n    const otherLanguages = languages\n      .filter((lang: Language) => lang.code !== currentLang)\n      .sort((a: Language, b: Language) => a.native.localeCompare(b.native));\n\n    if (!currentLanguage) return \"\";\n\n    const createLanguageItem = (lang: Language, isSelected = false) => `\n            <div class=\"jigts-language-item ${isSelected ? \"jigts-selected\" : \"\"}\" tabindex=\"0\" role=\"option\" aria-selected=\"${isSelected}\" data-language-code=\"${lang.code}\">\n                <div class=\"jigts-language-info\">\n                    <div class=\"jigts-language-main\">\n                        <span class=\"jigts-language-name\">${lang.name}</span>\n                        <div class=\"jigts-language-code\">${lang.code}</div>\n                    </div>\n                    <div class=\"jigts-language-details\">\n                        <span class=\"jigts-language-native\">${lang.native}</span>\n                    </div>\n                </div>\n                <svg class=\"jigts-check-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\"></path>\n                </svg>\n            </div>\n        `;\n\n    return `\n            ${createLanguageItem(currentLanguage, true)}\n            ${otherLanguages.map((lang) => createLanguageItem(lang)).join(\"\")}\n        `;\n  }\n\n  private async updateTriggerText(newText: string): Promise<void> {\n    const triggerSpan = this.elements.trigger?.querySelector(\"span\");\n    if (!triggerSpan) return;\n\n    // Force a reflow to ensure the animation plays\n    triggerSpan.offsetHeight;\n\n    // Start fade out\n    triggerSpan.classList.remove(\"jigts-fade-in\");\n    triggerSpan.classList.add(\"jigts-fade-out\");\n\n    // Wait for fade out\n    await new Promise((resolve) => setTimeout(resolve, 300));\n\n    // Update text\n    triggerSpan.textContent = newText;\n\n    // Force a reflow\n    triggerSpan.offsetHeight;\n\n    // Start fade in\n    triggerSpan.classList.remove(\"jigts-fade-out\");\n    triggerSpan.classList.add(\"jigts-fade-in\");\n  }\n\n  private getTextToTranslate(node: Text, parent: HTMLElement, targetLang: string): string | null {\n    if (!parent.hasAttribute(\"data-original-text\")) {\n      const originalText = node.textContent?.trim();\n      if (originalText) {\n        parent.setAttribute(\"data-translated-lang\", targetLang);\n        parent.setAttribute(\"data-original-text\", originalText);\n        // Store original font size if not already stored\n        if (!parent.hasAttribute(\"data-original-font-size\")) {\n          const computedStyle = window.getComputedStyle(parent);\n          parent.setAttribute(\"data-original-font-size\", computedStyle.fontSize);\n        }\n        return originalText;\n      }\n    } else {\n      const textToTranslate = node.textContent?.trim();\n      if (this.currentLanguage !== \"en\" && targetLang !== \"en\") {\n        parent.setAttribute(\"data-translated-lang\", targetLang);\n        return parent.getAttribute(\"data-original-text\");\n      }\n      return textToTranslate || null;\n    }\n    return null;\n  }\n\n  private calculateFontSize(text: string, originalFontSize: string, originalText: string): string {\n    const baseFontSize = 12; // Minimum font size in pixels\n    const maxFontSize = Number.parseInt(originalFontSize); // Maximum font size is the original size\n    const textLength = text.length;\n    const originalLength = originalText.length;\n\n    // Only scale down if translated text is longer than original\n    if (textLength <= originalLength) {\n      return originalFontSize;\n    }\n\n    // Calculate font size based on text length\n    // The longer the text, the smaller the font size\n    // We use a logarithmic scale to make the reduction more gradual\n    const fontSize = Math.max(baseFontSize, Math.min(maxFontSize, maxFontSize * (1 - Math.log(textLength) / 10)));\n\n    return `${fontSize}px`;\n  }\n\n  private updateLoadingState(isLoading: boolean): void {\n    const triggerContent = this.elements.trigger?.querySelector<HTMLDivElement>(\".jigts-trigger-content\");\n    const triggerLoading = this.elements.trigger?.querySelector<HTMLDivElement>(\".jigts-trigger-loading\");\n    if (triggerContent && triggerLoading) {\n      if (isLoading) {\n        triggerContent.style.display = \"none\";\n        triggerLoading.style.display = \"flex\";\n      } else {\n        triggerLoading.style.display = \"none\";\n        triggerContent.style.display = \"flex\";\n      }\n    }\n  }\n\n  private async translatePage(targetLang: string): Promise<void> {\n    // Increment the request ID for each new translation\n    const requestId = ++this.translationRequestId;\n    this.lastRequestedLanguage = targetLang;\n    this.updateLoadingState(true);\n    // If there's already a translation in progress, wait for it\n    if (this.currentTranslationPromise) {\n      await this.currentTranslationPromise;\n    }\n    // If target language is the default page language, restore original text\n    if (targetLang === this.config.pageLanguage) {\n      this.resetTranslations();\n      // Only hide loader if this is the latest request\n      if (requestId === this.translationRequestId) {\n        this.updateLoadingState(false);\n      }\n      return;\n    }\n    // Create a new promise for this translation\n    this.currentTranslationPromise = this._translatePage(targetLang);\n    try {\n      await this.currentTranslationPromise;\n    } catch (error) {\n      console.error(\"Translation failed:\", error);\n      // If translation fails, reset to default language\n      this.resetToDefaultLanguage();\n    } finally {\n      // Only hide loader if this is the latest request\n      if (requestId === this.translationRequestId) {\n        this.currentTranslationPromise = null;\n        this.updateLoadingState(false);\n      }\n    }\n  }\n\n  private resetToDefaultLanguage(): void {\n    // Reset translations\n    this.resetTranslations();\n\n    // Update language states\n    this.lastRequestedLanguage = this.config.pageLanguage;\n    this.currentLanguage = this.config.pageLanguage;\n\n    // Update UI\n    const languageItems = this.widget.querySelectorAll<HTMLElement>(\".jigts-language-item\");\n    for (const item of languageItems) {\n      const isSelected = item.getAttribute(\"data-language-code\") === this.config.pageLanguage;\n      item.classList.toggle(\"jigts-selected\", isSelected);\n      item.setAttribute(\"aria-selected\", isSelected.toString());\n    }\n\n    // Update localStorage preference to original language\n    localStorage.setItem(\"jss-pref\", this.config.pageLanguage);\n\n    // Update trigger icon\n    const triggerIcon = this.elements.trigger?.querySelector(\".jigts-trigger-icon\");\n    if (triggerIcon) {\n      triggerIcon.innerHTML = this.getLanguageSVG();\n    }\n\n    // Update translation state\n    this.isTranslated = false;\n    this.updateResetButtonVisibility();\n  }\n\n  private async _translatePage(targetLang: string): Promise<void> {\n    this.isTranslating = true;\n    this.observer?.disconnect(); // Pause observing during translation\n    try {\n      const nodes = DocumentNavigator.findTranslatableContent();\n      const batches = DocumentNavigator.divideIntoGroups(nodes, BATCH_SIZE);\n\n      const cache = new LocalStorageWrapper(CACHE_PREFIX);\n      const hash = generateHashForContent(nodes);\n      // Store all nodes and their corresponding texts for each batch\n      const allBatchNodes: Node[][] = [];\n      const allBatchTexts: string[][] = [];\n\n      // Prepare batches\n      for (const batch of batches) {\n        const textsToTranslate: string[] = [];\n        const batchNodes: Node[] = [];\n        for (const node of batch) {\n          if (node.nodeType !== Node.TEXT_NODE) return;\n          const parent = node.parentElement;\n          if (!parent) return;\n\n          const translatedLang = parent.getAttribute(\"data-translated-lang\");\n\n          // Skip if parent already has data-original-text and we're not translating to English\n          if (parent.hasAttribute(\"data-original-text\") && targetLang === translatedLang) {\n            return;\n          }\n\n          let textToTranslate = this.getTextToTranslate(node as Text, parent, targetLang);\n          textToTranslate = removeEmojis(textToTranslate || \"\");\n          if (textToTranslate.length === 0 || textToTranslate.length === 1) {\n            return;\n          }\n\n          if (textToTranslate) {\n            textsToTranslate.push(textToTranslate.trim());\n            batchNodes.push(node);\n          }\n        }\n        allBatchNodes.push(batchNodes);\n        allBatchTexts.push(textsToTranslate);\n      }\n\n      // Only keep non-empty batches\n      const nonEmptyBatchNodes: Node[][] = [];\n      const nonEmptyBatchTexts: string[][] = [];\n      for (const [i, texts] of allBatchTexts.entries()) {\n        if (texts.length > 0) {\n          nonEmptyBatchTexts.push(texts);\n          nonEmptyBatchNodes.push(allBatchNodes[i]);\n        }\n      }\n\n      const key = cache.getKey(hash, window.location.href, targetLang);\n      const cachedTranslations = cache.getItem(key);\n      if (cachedTranslations?.[0]) {\n        const fullTranslations = cachedTranslations[0];\n        // Only update DOM if this is still the most recently requested language\n        if (this.lastRequestedLanguage === targetLang) {\n          for (const [idx, node] of nodes.entries()) {\n            if (node.nodeType === Node.TEXT_NODE) {\n              const parent = node.parentElement;\n              if (parent) {\n                const originalText = parent.getAttribute(\"data-original-text\") || \"\";\n                const originalFontSize = parent.getAttribute(\"data-original-font-size\") || \"16px\";\n                const newFontSize = this.calculateFontSize(fullTranslations[idx], originalFontSize, originalText);\n                parent.style.fontSize = newFontSize;\n              }\n              node.textContent = fullTranslations[idx];\n            }\n          }\n          this.isTranslated = true;\n          this.updateResetButtonVisibility();\n        }\n        return;\n      }\n\n      // Send all batch requests in parallel\n      const allTranslatedTexts = await Promise.all(nonEmptyBatchTexts.map((texts) => this.translationService.translateBatchText(texts, targetLang)));\n\n      if (allTranslatedTexts.length === 0) {\n        if (this.lastRequestedLanguage === targetLang) {\n          this.isTranslated = true;\n          this.updateResetButtonVisibility();\n        }\n        return;\n      }\n\n      // Check if all batches failed (returned original texts)\n      const allBatchesFailed = allTranslatedTexts.every((translations, batchIndex) => {\n        const originalTexts = nonEmptyBatchTexts[batchIndex];\n        return translations.every((translation, index) => translation === originalTexts[index]);\n      });\n\n      if (allBatchesFailed) {\n        console.warn(\"All translations failed, not caching results\");\n        throw new Error(\"All translation batches failed\");\n      }\n\n      // Build a full translation array for all nodes\n      const fullTranslations: string[] = [];\n      for (const [nodeIdx, node] of nodes.entries()) {\n        const parent = node.parentElement as HTMLElement | null;\n        // Check if this node was included in the API call\n        const batchIdx = nonEmptyBatchNodes.findIndex((batch) => batch.includes(node));\n        if (batchIdx !== -1) {\n          // This node was translated in this batch\n          const textIdx = nonEmptyBatchNodes[batchIdx].indexOf(node);\n          const translatedText = allTranslatedTexts[batchIdx][textIdx];\n          fullTranslations[nodeIdx] = translatedText;\n\n          // Only update DOM if this is still the most recently requested language\n          if (this.lastRequestedLanguage === targetLang) {\n            // Apply font size adjustment\n            if (parent) {\n              const originalText = parent.getAttribute(\"data-original-text\") || \"\";\n              const originalFontSize = parent.getAttribute(\"data-original-font-size\") || \"16px\";\n              const newFontSize = this.calculateFontSize(translatedText, originalFontSize, originalText);\n              parent.style.fontSize = newFontSize;\n            }\n            node.textContent = translatedText;\n          }\n        } else if (parent && parent.getAttribute(\"data-translated-lang\") === targetLang) {\n          // Already translated, use current text\n          fullTranslations[nodeIdx] = node.textContent || \"\";\n        } else {\n          fullTranslations[nodeIdx] = node.textContent || \"\";\n        }\n      }\n\n      // Always cache the translations, even if they're not the most recent\n      cache.setItem(key, [fullTranslations]);\n\n      // Only update UI state if this is still the most recently requested language\n      if (this.lastRequestedLanguage === targetLang) {\n        this.isTranslated = true;\n        this.updateResetButtonVisibility();\n      }\n    } finally {\n      this.isTranslating = false;\n      this.observeBody(); // Resume observing after translation\n    }\n  }\n\n  private updateResetButtonVisibility(): void {\n    const resetButton = this.widget.querySelector<HTMLElement>(\".jigts-reset-option\");\n    if (resetButton) {\n      resetButton.style.display = this.isTranslated ? \"flex\" : \"none\";\n    }\n  }\n\n  resetTranslations(): void {\n    if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n      if (this.observer) {\n        this.observer.disconnect();\n      }\n      const elements = document.querySelectorAll<HTMLElement>(\"[data-original-text]\");\n      for (const element of elements) {\n        const textNodes = Array.from(element.childNodes).filter((node): node is Text => node.nodeType === Node.TEXT_NODE);\n        if (textNodes.length > 0) {\n          const originalText = element.getAttribute(\"data-original-text\");\n          if (originalText) {\n            textNodes[0].textContent = originalText;\n          }\n        }\n        // Restore original font size\n        const originalFontSize = element.getAttribute(\"data-original-font-size\");\n        if (originalFontSize) {\n          element.style.fontSize = originalFontSize;\n        }\n        element.removeAttribute(\"data-original-text\");\n        element.removeAttribute(\"data-translated-lang\");\n        element.removeAttribute(\"data-original-font-size\");\n      }\n      this.isTranslated = false;\n      localStorage.setItem(\"jss-pref\", this.config.pageLanguage);\n      this.currentLanguage = this.config.pageLanguage;\n      // Update lastTranslated to reflect the reset state\n      const nodes = DocumentNavigator.findTranslatableContent();\n      const hash = generateHashForContent(nodes);\n      this.lastTranslated = {\n        url: window.location.href,\n        lang: this.config.pageLanguage,\n        hash,\n      };\n\n      this.updateResetButtonVisibility();\n      this.observeBody(); // Reconnect observer\n    }\n  }\n\n  private adjustDropdownPosition(): void {\n    if (!this.showUI) return;\n    const { dropdown, trigger } = this.elements;\n    if (!dropdown || !trigger) return;\n\n    const triggerRect = trigger.getBoundingClientRect();\n    const dropdownRect = dropdown.getBoundingClientRect();\n    const viewportWidth = window.innerWidth;\n    const viewportHeight = window.innerHeight;\n\n    dropdown.style.top = \"\";\n    dropdown.style.bottom = \"\";\n    dropdown.style.left = \"\";\n    dropdown.style.right = \"\";\n    dropdown.style.transform = \"\";\n\n    const spaceBelow = viewportHeight - triggerRect.bottom;\n    const spaceAbove = triggerRect.top;\n    const spaceRight = viewportWidth - triggerRect.right;\n    const spaceLeft = triggerRect.left;\n\n    // Determine vertical position\n    if (spaceBelow < dropdownRect.height && spaceAbove > spaceBelow) {\n      dropdown.style.bottom = \"100%\";\n      dropdown.style.top = \"auto\";\n      dropdown.style.marginBottom = \"0.5rem\";\n      dropdown.style.marginTop = \"0\";\n    } else {\n      dropdown.style.top = \"100%\";\n      dropdown.style.bottom = \"auto\";\n      dropdown.style.marginTop = \"0.5rem\";\n      dropdown.style.marginBottom = \"0\";\n    }\n\n    // Determine horizontal position\n    if (spaceRight < dropdownRect.width && spaceLeft > spaceRight) {\n      dropdown.style.right = \"0\";\n      dropdown.style.left = \"auto\";\n    } else {\n      dropdown.style.left = \"0\";\n      dropdown.style.right = \"auto\";\n    }\n\n    const finalRect = dropdown.getBoundingClientRect();\n\n    if (finalRect.right > viewportWidth) {\n      dropdown.style.right = \"0\";\n      dropdown.style.left = \"auto\";\n    }\n\n    if (finalRect.left < 0) {\n      dropdown.style.left = \"0\";\n      dropdown.style.right = \"auto\";\n    }\n  }\n\n  private setupEventListeners(): void {\n    const { trigger, dropdown, searchInput, clearSearch, languageItems } = this.elements;\n\n    if (!trigger || !dropdown || !searchInput || !clearSearch || !languageItems) {\n      console.error(\"Failed to find required elements\");\n      return;\n    }\n\n    // Reset button functionality\n    const resetButton = this.widget.querySelector<HTMLElement>(\".jigts-reset-option\");\n    if (resetButton) {\n      resetButton.addEventListener(\"click\", () => {\n        if (this.isTranslating) return;\n        this.resetToDefaultLanguage();\n        resetButton.classList.remove(\"jigts-active\");\n        this.isTranslated = false;\n        this.updateResetButtonVisibility();\n        // Reset language selector to page language\n        const languageItems = this.widget.querySelectorAll<HTMLElement>(\".jigts-language-item\");\n        for (const item of languageItems) {\n          const isSelected = item.getAttribute(\"data-language-code\") === this.config.pageLanguage;\n          item.classList.toggle(\"jigts-selected\", isSelected);\n          item.setAttribute(\"aria-selected\", isSelected.toString());\n        }\n        // Restore SVG icon\n        const triggerIcon = this.elements.trigger?.querySelector(\".jigts-trigger-icon\");\n        if (triggerIcon) {\n          triggerIcon.innerHTML = this.getLanguageSVG();\n        }\n        // Close dropdown\n        dropdown.classList.remove(\"jigts-open\");\n        trigger.setAttribute(\"aria-expanded\", \"false\");\n        // Remove has-translation class\n        const triggerContent = trigger.querySelector<HTMLDivElement>(\".jigts-trigger-content\");\n        if (triggerContent) triggerContent.classList.remove(\"jigts-has-translation\");\n      });\n    }\n\n    this.updateResetButtonVisibility();\n\n    trigger.addEventListener(\"click\", () => {\n      dropdown.classList.toggle(\"jigts-open\");\n      const isOpen = dropdown.classList.contains(\"jigts-open\");\n      trigger.setAttribute(\"aria-expanded\", isOpen.toString());\n      if (isOpen) {\n        this.adjustDropdownPosition();\n        searchInput.focus();\n      }\n    });\n\n    window.addEventListener(\"resize\", () => {\n      if (dropdown.classList.contains(\"jigts-open\")) {\n        this.adjustDropdownPosition();\n      }\n    });\n\n    document.addEventListener(\"click\", (e: MouseEvent) => {\n      if (!(e.target as Element).closest(\".jigts-translation-widget\")) {\n        if (dropdown.classList.contains(\"jigts-open\")) {\n          dropdown.classList.add(\"jigts-closing\");\n          setTimeout(() => {\n            dropdown.classList.remove(\"jigts-open\", \"jigts-closing\");\n            trigger.setAttribute(\"aria-expanded\", \"false\");\n          }, 300);\n        }\n      }\n    });\n\n    searchInput.addEventListener(\"input\", () => {\n      const searchTerm = searchInput.value.toLowerCase();\n      const hasValue = searchTerm.length > 0;\n      clearSearch.classList.toggle(\"jigts-visible\", hasValue);\n\n      const items = this.widget.querySelectorAll<HTMLElement>(\".jigts-language-item\");\n      const noResults = this.widget.querySelector<HTMLElement>(\".jigts-no-results\");\n      let visibleCount = 0;\n\n      for (const item of items) {\n        const name = item.querySelector(\".jigts-language-name\")?.textContent?.toLowerCase() || \"\";\n        const native = item.querySelector(\".jigts-language-native\")?.textContent?.toLowerCase() || \"\";\n        const code = item.querySelector(\".jigts-language-code\")?.textContent?.toLowerCase() || \"\";\n        const region = item.querySelector(\".jigts-language-region\")?.textContent?.toLowerCase() || \"\";\n\n        const matches = name.includes(searchTerm) || native.includes(searchTerm) || code.includes(searchTerm) || region.includes(searchTerm);\n\n        item.style.display = matches ? \"\" : \"none\";\n        if (matches) visibleCount++;\n      }\n\n      if (noResults) {\n        noResults.style.display = visibleCount === 0 ? \"flex\" : \"none\";\n      }\n    });\n\n    clearSearch.addEventListener(\"click\", () => {\n      searchInput.value = \"\";\n      clearSearch.classList.remove(\"jigts-visible\");\n      searchInput.focus();\n\n      const items = this.widget.querySelectorAll<HTMLElement>(\".jigts-language-item\");\n      const noResults = this.widget.querySelector<HTMLElement>(\".jigts-no-results\");\n\n      for (const item of items) {\n        item.style.display = \"\";\n      }\n\n      if (noResults) {\n        noResults.style.display = \"none\";\n      }\n    });\n\n    for (const item of languageItems) {\n      item.addEventListener(\"click\", async () => {\n        for (const i of languageItems) {\n          i.classList.remove(\"jigts-selected\");\n          i.setAttribute(\"aria-selected\", \"false\");\n        }\n\n        item.classList.add(\"jigts-selected\");\n        item.setAttribute(\"aria-selected\", \"true\");\n\n        const langName = item.querySelector(\".jigts-language-name\")?.textContent;\n        const langCode = item.getAttribute(\"data-language-code\");\n\n        // Close dropdown immediately\n        dropdown.classList.remove(\"jigts-open\");\n        trigger.setAttribute(\"aria-expanded\", \"false\");\n\n        if (langName) {\n          await this.updateTriggerText(langName);\n        }\n\n        if (langCode) {\n          localStorage.setItem(\"jss-pref\", langCode);\n        }\n\n        const triggerIcon = this.elements.trigger?.querySelector(\".jigts-trigger-icon\");\n        if (triggerIcon && langCode && langName) {\n          triggerIcon.innerHTML = `<span class=\\\"jigts-lang-code\\\">${langCode.toUpperCase()}</span><span class=\\\"jigts-lang-name\\\">${langName}</span>`;\n        }\n\n        const triggerContent = trigger.querySelector<HTMLDivElement>(\".jigts-trigger-content\");\n        if (langCode && langCode !== this.currentLanguage) {\n          if (triggerContent) triggerContent.classList.add(\"jigts-has-translation\");\n          const triggerLoading = trigger.querySelector<HTMLDivElement>(\".jigts-trigger-loading\");\n          if (triggerContent && triggerLoading) {\n            triggerContent.style.display = \"none\";\n            triggerLoading.style.display = \"flex\";\n          }\n\n          try {\n            await this.translatePage(langCode);\n            this.currentLanguage = langCode;\n          } catch (error) {\n            console.error(\"Translation error:\", error);\n            alert(\"An error occurred during translation. Please try again.\");\n          }\n        } else if (triggerContent) {\n          triggerContent.classList.remove(\"jigts-has-translation\");\n        }\n      });\n    }\n\n    document.addEventListener(\"keydown\", (e: KeyboardEvent) => {\n      if (!dropdown.classList.contains(\"jigts-open\")) return;\n\n      if (e.key === \"Escape\") {\n        dropdown.classList.remove(\"jigts-open\");\n        trigger.setAttribute(\"aria-expanded\", \"false\");\n        trigger.focus();\n      }\n    });\n  }\n\n  private scheduleTranslation() {\n    if (this.translationScheduled) return;\n    const currentUrl = window.location.href;\n    const currentLang = this.currentLanguage;\n    const nodes = DocumentNavigator.findTranslatableContent();\n    const hash = generateHashForContent(nodes);\n    if (\n      this.lastTranslated &&\n      this.lastTranslated.url === currentUrl &&\n      this.lastTranslated.lang === currentLang &&\n      this.lastTranslated.hash === hash\n    ) {\n      return;\n    }\n    this.translationScheduled = true;\n    if (this.scheduleTimeout) clearTimeout(this.scheduleTimeout);\n    this.scheduleTimeout = window.setTimeout(() => {\n      this.translationScheduled = false;\n      if (this.currentLanguage !== this.config.pageLanguage) {\n        this.lastTranslated = { url: currentUrl, lang: currentLang, hash };\n        const triggerContent = this.elements.trigger?.querySelector<HTMLDivElement>(\".jigts-trigger-content\");\n        const triggerLoading = this.elements.trigger?.querySelector<HTMLDivElement>(\".jigts-trigger-loading\");\n        if (triggerContent && triggerLoading) {\n          triggerContent.style.display = \"none\";\n          triggerLoading.style.display = \"flex\";\n        }\n        this.translatePage(this.currentLanguage)\n          .then(() => {\n            const languageItems = this.widget.querySelectorAll<HTMLElement>(\".jigts-language-item\");\n            for (const item of languageItems) {\n              const isSelected = item.getAttribute(\"data-language-code\") === this.currentLanguage;\n              item.classList.toggle(\"jigts-selected\", isSelected);\n              item.setAttribute(\"aria-selected\", isSelected.toString());\n            }\n          })\n          .catch((error) => {\n            console.error(\"Auto-translation error:\", error);\n          });\n      }\n    }, 200);\n  }\n\n  /**\n   * Public method to translate the page to a specific language\n   * @param langCode The language code to translate to\n   * @returns Promise that resolves when translation is complete\n   */\n  public async translateTo(langCode: string, onComplete?: (result: TranslationResult) => void, onError?: (error: Error) => void): Promise<TranslationResult> {\n\n    const startTime = Date.now();\n    if (this.isTranslating) {\n      console.warn(\"Translation already in progress\");\n      onError?.(new Error(\"Translation already in progress\"));\n      return {\n        success: false,\n        targetLanguage: langCode,\n        translatedNodes: 0,\n        error: \"Translation already in progress\",\n        duration: 0,\n      };\n    }\n\n    const supportedLang = languages.find((lang) => lang.code === langCode);\n    if (!supportedLang) {\n      onError?.(new Error(`Unsupported language code: ${langCode}`));\n      return {\n        success: false,\n        targetLanguage: langCode,\n        translatedNodes: 0,\n        error: `Unsupported language code: ${langCode}`,\n        duration: 0,\n      };\n    }\n\n    if (langCode === this.currentLanguage) {\n      onComplete?.({\n        success: true,\n        targetLanguage: langCode,\n        translatedNodes: 0,\n        duration: 0,\n      });\n      return {\n        success: true,\n        targetLanguage: langCode,\n        translatedNodes: 0,\n        duration: 0,\n      };\n    }\n\n    try {\n      await this.translatePage(langCode);\n      // Update the current language\n      const language = languages.find((lang) => lang.code === langCode);\n      if (language) {\n        this.currentLanguage = langCode;\n      }\n\n      // Update UI to reflect the selected language\n      const languageItems = this.widget.querySelectorAll<HTMLElement>(\".jigts-language-item\");\n      for (const item of languageItems) {\n        const isSelected = item.getAttribute(\"data-language-code\") === langCode;\n        item.classList.toggle(\"jigts-selected\", isSelected);\n        item.setAttribute(\"aria-selected\", isSelected.toString());\n      }\n\n      // Update trigger text\n      const triggerContent = this.elements.trigger?.querySelector<HTMLDivElement>(\".jigts-trigger-content\");\n      if (triggerContent) {\n        triggerContent.classList.add(\"jigts-has-translation\");\n        const triggerIcon = triggerContent.querySelector(\".jigts-trigger-icon\");\n        if (triggerIcon && supportedLang) {\n          triggerIcon.innerHTML = `<span class=\"jigts-lang-code\">${supportedLang.code.toUpperCase()}</span><span class=\"jigts-lang-name\">${supportedLang.name}</span>`;\n        }\n      }\n\n      const endTime = Date.now();\n      const translatedNodes = document.querySelectorAll(\"[data-translated-lang]\").length;\n      onComplete?.({\n        success: true,\n        targetLanguage: langCode,\n        translatedNodes,\n        duration: endTime - startTime,\n      });\n\n      // upate the localstroage pref\n      localStorage.setItem(\"jss-pref\", langCode);\n      return {\n        success: true,\n        targetLanguage: langCode,\n        translatedNodes,\n        duration: endTime - startTime,\n      };\n    } catch (error) {\n      onError?.(error as Error);\n      return {\n        success: false,\n        targetLanguage: langCode,\n        translatedNodes: 0,\n        error: error instanceof Error ? error.message : \"Unknown error occurred\",\n        duration: 0,\n      };\n    }\n  }\n\n  /**\n   * Get the current instance of TranslationWidget\n   * @returns The current TranslationWidget instance or null if not initialized\n   */\n  public static getInstance(): TranslationWidget | null {\n    return TranslationWidget.instance;\n  }\n\n  // Add this helper method to the class\n  private getLanguageSVG(): string {\n    return `\\n            <svg class=\\\"jigts-languages-icon\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                    d=\\\"M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129\\\">\\n                </path>\\n            </svg>\\n        `;\n  }\n}\n\ndeclare global {\n  interface Window {\n    translate: (langCode: string, onComplete?: () => void, onError?: (error: Error) => void) => Promise<TranslationResult>;\n    resetTranslation: (defaultLang: string) => void;\n  }\n}\n\nif (typeof window !== 'undefined') {\n  window.resetTranslation = (defaultLang: string) => {\n    const instance = TranslationWidget.getInstance();\n    if (!instance) {\n      return;\n    }\n    try {\n      instance.resetTranslations();\n      localStorage.setItem(\"jss-pref\", defaultLang);\n    } catch (error) {\n      console.error(\"Error resetting translation:\", error);\n    }\n  };\n\n  window.translate = async (langCode: string, onComplete?: (result: TranslationResult) => void, onError?: (error: Error) => void): Promise<TranslationResult> => {\n    const instance = TranslationWidget.getInstance();\n    if (!instance) {\n      onError?.(new Error(\"Translation widget not initialized\"));\n      return {\n        success: false,\n        targetLanguage: langCode,\n        translatedNodes: 0,\n        error: \"Translation widget not initialized\",\n        duration: 0,\n      };\n    }\n    const startTime = Date.now();\n    try {\n      const result = await instance.translateTo(langCode, onComplete, onError);\n      onComplete?.(result);\n      return result;\n    } catch (error) {\n      onError?.(error as Error);\n      return {\n        success: false,\n        targetLanguage: langCode,\n        translatedNodes: 0,\n        error: error instanceof Error ? error.message : \"Unknown error occurred\",\n        duration: Date.now() - startTime,\n      };\n    }\n  };\n}\n","import styles from \"./translation-widget.css?inline\";\nimport { TranslationWidget } from \"./widget\";\nimport type { TranslationConfig } from \"./types\";\n\ndeclare global {\n  interface Window {\n    TranslationWidget: (\n      publicKey: string,\n      config?: TranslationConfig\n    ) => TranslationWidget;\n  }\n}\n\nlet widgetInstance: TranslationWidget | undefined;\n\nconst initializeTranslationWidget = (publicKey: string, config?: TranslationConfig): TranslationWidget => {\n  if (typeof window === \"undefined\") {\n    return undefined as unknown as TranslationWidget;\n  }\n\n  const initWidget = () => {\n    if (!widgetInstance) {\n      // Ensure styles are injected\n      if (!document.querySelector(\"style[data-translation-widget]\")) {\n        const style = document.createElement(\"style\");\n        style.setAttribute(\"data-translation-widget\", \"\");\n        style.textContent = styles;\n        document.head.appendChild(style);\n      }\n      widgetInstance = new TranslationWidget(publicKey, config);\n    }\n    return widgetInstance;\n  };\n\n  if (document.readyState === \"loading\") {\n    window.addEventListener(\"DOMContentLoaded\", initWidget);\n    return undefined as unknown as TranslationWidget; // Widget will be created after DOMContentLoaded\n  }\n  return initWidget();\n};\n\nexport { TranslationWidget };\nexport default initializeTranslationWidget;\n"],"names":["k1","_a","LZString","fullTranslations","languageItems"],"mappings":";;;;AAiBO,MAAM,mBAAmB;AAAA,EAM9B,YAAY,WAAmB;AALd;AACT,wCAA6B,EAAE,MAAM,GAAG,QAAQ,EAAE;AAEzC;AAAA,kCAAS;AAGxB,SAAK,YAAY;AAAA,EAAA;AAAA,EAGnB,kBAAgC;AACvB,WAAA,EAAE,GAAG,KAAK,aAAa;AAAA,EAAA;AAAA,EAGhC,MAAM,mBAAmB,OAAiB,YAAoB,aAAa,GAAG,aAAa,KAAwB;AACjH,QAAI,UAAU;AACd,WAAO,UAAU,YAAY;AACvB,UAAA;AACF,cAAM,WAAW,MAAM,MAAM,KAAK,QAAQ;AAAA,UACxC,QAAQ;AAAA,UACR,SAAS;AAAA,YACP,gBAAgB;AAAA,YAChB,aAAa,KAAK;AAAA,UACpB;AAAA,UACA,MAAM,KAAK,UAAU;AAAA,YACnB,MAAM;AAAA,YACN,iBAAiB;AAAA,UAClB,CAAA;AAAA,QAAA,CACF;AAEG,YAAA,CAAC,SAAS,IAAI;AAChB,gBAAM,QAA0B,IAAI,MAAM,2BAA2B,SAAS,UAAU,EAAE;AAC1F,gBAAM,SAAS,SAAS;AACxB,gBAAM,WAAW;AACX,gBAAA;AAAA,QAAA;AAGF,cAAA,SAAU,MAAM,SAAS,KAAK;AAC9B,cAAA,eAAe,MAAM,QAAQ,OAAO,eAAe,IAAI,OAAO,kBAAkB,CAAC,OAAO,eAAe;AAEtG,eAAA;AAAA,eACA,OAAO;AACd;AACA,YAAI,WAAW,YAAY;AACjB,kBAAA,MAAM,oCAAoC,KAAK;AAChD,iBAAA;AAAA,QAAA;AAGT,cAAM,IAAI,QAAQ,CAAC,QAAQ,WAAW,KAAK,UAAU,CAAC;AAAA,MAAA;AAAA,IACxD;AAEK,WAAA;AAAA,EAAA;AAEX;ACrEO,MAAM,YAAwB;AAAA,EACnC;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,KAAK;AAAA,IACL,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,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ACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,KAAK;AAAA,IACL,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,KAAK;AAAA,IACL,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,KAAK;AAAA,IACL,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,IAC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","x_google_ignoreList":[6]}